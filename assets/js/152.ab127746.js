(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{547:function(t,s,a){"use strict";a.r(s);var e=a(7),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"公平锁非公平锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#公平锁非公平锁"}},[t._v("#")]),t._v(" 公平锁非公平锁")]),t._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("p",[t._v("公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。")]),t._v(" "),s("p",[t._v("非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。")]),t._v(" "),s("h2",{attrs:{id:"案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例"}},[t._v("#")]),t._v(" 案例")]),t._v(" "),s("p",[t._v("直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.shiyitopo.tech/uPic/a23d746a.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。")]),t._v(" "),s("p",[t._v("但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://www.shiyitopo.tech/uPic/4499559e.png",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"源码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[t._v("#")]),t._v(" 源码")]),t._v(" "),s("p",[t._v("接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/6edea205.png",alt:"img"}})]),t._v(" "),s("p",[t._v("根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。")]),t._v(" "),s("p",[t._v("下面我们来看一下公平锁与非公平锁的加锁方法的源码:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/bc6fe583.png",alt:"img"}})]),t._v(" "),s("p",[t._v("通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2018b/bd0036bb.png",alt:"img"}})]),t._v(" "),s("p",[t._v("再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。")]),t._v(" "),s("p",[t._v("综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。")]),t._v(" "),s("p",[t._v("From: https://tech.meituan.com/2018/11/15/java-lock.html")])])}),[],!1,null,null,null);s.default=r.exports}}]);