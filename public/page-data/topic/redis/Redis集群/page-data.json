{"componentChunkName":"component---src-templates-topic-post-template-js","path":"/topic/redis/Redis集群","result":{"data":{"siYuan":{"excerpt":"三种集群方案 主从复制模式 哨兵模式 Cluster 模式 主从复制模式 image-20210920222454496 通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬...","raw":"# 三种集群方案\n\n+ 主从复制模式\n+ 哨兵模式\n+ Cluster 模式\n\n# 主从复制模式\n\n![image-20210920222454496](https://www.shiyitopo.tech/uPic/image-20210920222454496.png)\n\n通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。\n\n为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。\n\n为此， **Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上**。\n\n在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。\n\n**引入主从复制机制的目的有两个**\n\n- 一个是读写分离，分担 \"master\" 的读写压力\n- 一个是方便做容灾恢复\n\n**主从复制优点**\n\n- 支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；\n- 为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；\n- Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；\n- Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；\n- Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；\n\n**主从复制缺点**\n\n- Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（**也就是要人工介入**）；\n- 主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；\n- 如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。\n- Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂\n\n## 原理\n\n```mermaid\nsequenceDiagram\n    participant 从服务器\n    participant 主服务器\n    从服务器->>主服务器: SYNC请求\n    主服务器->>主服务器: 创建快照、缓冲快照生成期间的写命令\n    主服务器->>从服务器: 同步快照\n    从服务器->>从服务器: 载入、解析快照\n    主服务器->>主服务器: 缓冲快照同步的写命令\n    主服务器->>从服务器: 同步写缓冲\n    从服务器->>从服务器: 载入缓冲\n    loop Healthcheck\n        主服务器->>从服务器: 同步增量\n    end\n```\n\n- 从数据库启动成功后，连接主数据库，发送 SYNC 命令；\n- 主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；\n- 主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；\n- 从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；\n- 主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；\n- 从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（**从数据库初始化完成**）\n- 主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（**从数据库初始化完成后的操作**）\n- 出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。\n- 主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。\n\n## redis主从复制的坑\n\nredis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。\n\nredis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。\n\n如果此时redis master节点宕机从节点复制失败，为保证集群可用性，会进行主备切换，slave变为了redis master。B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。另外如果主从复制延迟同样也会造成加锁和解锁延迟的问题。\n\n此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。\n\n至于解决办法嘛，目前看还没有什么根治的方法，只能尽量保证机器的稳定性，减少发生此事件的概率,即便是redis作者也没有特别完美的解决这个问题\n\n# 哨兵模式\n\n第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。\n\n哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，**哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例**。\n\n![单哨兵](https://www.shiyitopo.tech/uPic/1460000022808580.png)\n\n## 哨兵模式的作用\n\n- 通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；\n- 当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过**发布订阅模式**通知其他的从服务器，修改配置文件，让它们切换主机；\n\n然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。\n\n![多哨兵](https://segmentfault.com/img/remote/1460000022808582)\n\n## 故障切换的过程\n\n假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为**主观下线**。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为**客观下线**。这样对于客户端而言，一切都是透明的。\n\n## 哨兵模式的工作方式：\n\n- 每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。\n- 如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）\n- 如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态\n- 当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）\n- 在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。\n- 当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。\n- 若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。\n\n## 哨兵模式的优缺点\n\n**优点：**\n\n- 哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。\n- 主从可以自动切换，系统更健壮，可用性更高(**可以看作自动版的主从复制**)。\n\n**缺点：**\n\n- Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。\n\n# Cluster 集群模式（Redis官方）\n\nRedis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。\n\nRedis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，**也就是说每台 Redis 节点上存储不同的内容**。\n\n![image-20200531184321294](https://www.shiyitopo.tech/uPic/1460000022808584.png)\n\n在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。\n\n## 集群的数据分片\n\nRedis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。\n\nRedis 集群有16384 个哈希槽，每个 key 通过+693\n\n对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：\n\n- 节点 A 包含 0 到 5460 号哈希槽\n- 节点 B 包含 5461 到 10922 号哈希槽\n- 节点 C 包含 10923 到 16383 号哈希槽\n\n这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。\n\n在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。\n\n## Redis 集群的主从复制模型\n\n为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。\n\n## 集群的特点\n\n- 所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。\n- 节点的 fail 是通过集群中超过半数的节点检测失效时才生效。\n- 客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。\n\n来源: https://segmentfault.com/a/1190000022808576\n","html":"<div data-subtype=\"h1\" data-node-id=\"20220428141727-id6w37y\" data-node-index=\"0\" data-type=\"NodeHeading\" class=\"h1\" updated=\"20220428144545\"><div contenteditable=\"true\" spellcheck=\"false\">三种集群方案</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-8n0ydmh\" data-node-index=\"1\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-l54oyr8\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-0jiv7r3\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主从复制模式</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-6edput1\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-gye2mpt\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-mqmgphg\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-6o9zkwp\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Cluster 模式</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h1\" data-node-id=\"20220428141727-01yokji\" data-node-index=\"2\" data-type=\"NodeHeading\" class=\"h1\" updated=\"20220428144540\"><div contenteditable=\"true\" spellcheck=\"false\">主从复制模式</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-4hyj5hu\" data-node-index=\"3\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><span contenteditable=\"false\" data-type=\"img\" class=\"img\"><span> </span><span><span class=\"protyle-action protyle-icons\"><span class=\"protyle-icon protyle-icon--only\"><svg class=\"svg\"><use xlink:href=\"#iconMore\"></use></svg></span></span><img src=\"https://www.shiyitopo.tech/uPic/image-20210920222454496.png\" data-src=\"https://www.shiyitopo.tech/uPic/image-20210920222454496.png\" alt=\"image-20210920222454496\" /><span class=\"protyle-action__drag\"></span><span class=\"protyle-action__title\"></span></span><span> </span></span></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-t6d61qd\" data-node-index=\"4\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-h4aw4w3\" data-node-index=\"5\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-kx9p63c\" data-node-index=\"6\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">为此， <strong id=\"\">Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上</strong>。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-aypxgxg\" data-node-index=\"7\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-bm3r7ab\" data-node-index=\"8\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><strong id=\"\">引入主从复制机制的目的有两个</strong></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-yn3z5ka\" data-node-index=\"9\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-rf00sxm\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-imw1ge7\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">一个是读写分离，分担 &quot;master&quot; 的读写压力</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-zasyao9\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-fw9a3yl\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">一个是方便做容灾恢复</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-zd6p7tl\" data-node-index=\"10\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><strong id=\"\">主从复制优点</strong></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-7nz1890\" data-node-index=\"11\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-zm6burr\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-x95wfg4\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-zukjqyh\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-2659hb5\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-9r1r2oi\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-2zi4u31\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-i4f3xub\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-1f0sdb9\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-ysjo176\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-9wae7xd\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-98qa0yj\" data-node-index=\"12\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><strong id=\"\">主从复制缺点</strong></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-1v8ak4c\" data-node-index=\"13\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-u8zx0lo\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-lhuoqnf\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（<strong id=\"\">也就是要人工介入</strong>）；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-wwggm69\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-z910wr4\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-dg9vwbk\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-m6ozqq0\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-eo6t1j4\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-lh8zwil\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-2xgqon2\" data-node-index=\"14\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144554\"><div contenteditable=\"true\" spellcheck=\"false\">原理</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-ys4kv89\" data-node-index=\"15\" data-type=\"NodeCodeBlock\" class=\"render-node\" updated=\"20220428141727\" data-content=\"sequenceDiagram\n    participant 从服务器\n    participant 主服务器\n    从服务器-&gt;&gt;主服务器: SYNC请求\n    主服务器-&gt;&gt;主服务器: 创建快照、缓冲快照生成期间的写命令\n    主服务器-&gt;&gt;从服务器: 同步快照\n    从服务器-&gt;&gt;从服务器: 载入、解析快照\n    主服务器-&gt;&gt;主服务器: 缓冲快照同步的写命令\n    主服务器-&gt;&gt;从服务器: 同步写缓冲\n    从服务器-&gt;&gt;从服务器: 载入缓冲\n    loop Healthcheck\n        主服务器-&gt;&gt;从服务器: 同步增量\n    end\" data-subtype=\"mermaid\"><div spin=\"1\"></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-6zl5shv\" data-node-index=\"16\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-b73rx80\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-fjfxwug\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">从数据库启动成功后，连接主数据库，发送 SYNC 命令；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-sb78xax\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-6mmyhq6\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-wzelbpd\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-461tme4\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-l37w9sh\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-kr6y56f\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-2uoz7zm\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-mfo88k4\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-4rha4az\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-4ams8wo\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（<strong id=\"\">从数据库初始化完成</strong>）</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-3xd30tv\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-rd8klgs\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（<strong id=\"\">从数据库初始化完成后的操作</strong>）</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-6e5t81e\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-lv89vp1\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-uaa7eg1\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-zhyjwcs\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-h04f0fa\" data-node-index=\"17\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144558\"><div contenteditable=\"true\" spellcheck=\"false\">redis主从复制的坑</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-aloghpg\" data-node-index=\"18\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">redis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-z2d0gnl\" data-node-index=\"19\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">redis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-vfm5yg2\" data-node-index=\"20\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">如果此时redis master节点宕机从节点复制失败，为保证集群可用性，会进行主备切换，slave变为了redis master。B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。另外如果主从复制延迟同样也会造成加锁和解锁延迟的问题。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-zpo0qww\" data-node-index=\"21\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-g3e6rfz\" data-node-index=\"22\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">至于解决办法嘛，目前看还没有什么根治的方法，只能尽量保证机器的稳定性，减少发生此事件的概率,即便是redis作者也没有特别完美的解决这个问题</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h1\" data-node-id=\"20220428141727-jxcatge\" data-node-index=\"23\" data-type=\"NodeHeading\" class=\"h1\" updated=\"20220428144600\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-z8rr3mw\" data-node-index=\"24\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-xfu649w\" data-node-index=\"25\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，<strong id=\"\">哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例</strong>。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-1n514xx\" data-node-index=\"26\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><span contenteditable=\"false\" data-type=\"img\" class=\"img\"><span> </span><span><span class=\"protyle-action protyle-icons\"><span class=\"protyle-icon protyle-icon--only\"><svg class=\"svg\"><use xlink:href=\"#iconMore\"></use></svg></span></span><img src=\"https://www.shiyitopo.tech/uPic/1460000022808580.png\" data-src=\"https://www.shiyitopo.tech/uPic/1460000022808580.png\" alt=\"单哨兵\" /><span class=\"protyle-action__drag\"></span><span class=\"protyle-action__title\"></span></span><span> </span></span></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-3jb6vil\" data-node-index=\"27\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144603\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式的作用</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-3g7jnps\" data-node-index=\"28\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-7uhlc68\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-sg4ztzm\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-wg62vck\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-5k01yl8\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过<strong id=\"\">发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机；</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-lkymnxs\" data-node-index=\"29\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-6pl3zuu\" data-node-index=\"30\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><span contenteditable=\"false\" data-type=\"img\" class=\"img\"><span> </span><span><span class=\"protyle-action protyle-icons\"><span class=\"protyle-icon protyle-icon--only\"><svg class=\"svg\"><use xlink:href=\"#iconMore\"></use></svg></span></span><img src=\"https://segmentfault.com/img/remote/1460000022808582\" data-src=\"https://segmentfault.com/img/remote/1460000022808582\" alt=\"多哨兵\" /><span class=\"protyle-action__drag\"></span><span class=\"protyle-action__title\"></span></span><span> </span></span></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-uscl9hh\" data-node-index=\"31\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144607\"><div contenteditable=\"true\" spellcheck=\"false\">故障切换的过程</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-vnt7n96\" data-node-index=\"32\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong id=\"\">主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong id=\"\">客观下线</strong>。这样对于客户端而言，一切都是透明的。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-fe5liq6\" data-node-index=\"33\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144609\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式的工作方式：</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-l71nh2i\" data-node-index=\"34\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-exbsjig\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-6yqxv6x\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-tcbaf5b\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-4d40t80\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-xzc0u42\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-pwib9yf\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-7yp9bp1\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-5b07rjz\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-bggz80d\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-atf81r4\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-fm7r5q1\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-2j8lhn1\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-f7yt8f5\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-s9rva58\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-fq18erp\" data-node-index=\"35\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144612\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式的优缺点</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-fqeshrs\" data-node-index=\"36\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><strong id=\"\">优点：</strong></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-7gr1tk1\" data-node-index=\"37\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-5i4k1ul\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-x9fro84\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-z95v0ti\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-1m3dp7t\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">主从可以自动切换，系统更健壮，可用性更高(<strong id=\"\">可以看作自动版的主从复制</strong>)。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-awfz50g\" data-node-index=\"38\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><strong id=\"\">缺点：</strong></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-yp1fwbd\" data-node-index=\"39\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-kxdq8x7\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-rzmu3wc\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h1\" data-node-id=\"20220428141727-z0udk1o\" data-node-index=\"40\" data-type=\"NodeHeading\" class=\"h1\" updated=\"20220428144617\"><div contenteditable=\"true\" spellcheck=\"false\">Cluster 集群模式（Redis官方）</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-3yz496f\" data-node-index=\"41\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-ormdslr\" data-node-index=\"42\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，<strong id=\"\">也就是说每台 Redis 节点上存储不同的内容</strong>。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-p5c68it\" data-node-index=\"43\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\"><span contenteditable=\"false\" data-type=\"img\" class=\"img\"><span> </span><span><span class=\"protyle-action protyle-icons\"><span class=\"protyle-icon protyle-icon--only\"><svg class=\"svg\"><use xlink:href=\"#iconMore\"></use></svg></span></span><img src=\"https://www.shiyitopo.tech/uPic/1460000022808584.png\" data-src=\"https://www.shiyitopo.tech/uPic/1460000022808584.png\" alt=\"image-20200531184321294\" /><span class=\"protyle-action__drag\"></span><span class=\"protyle-action__title\"></span></span><span> </span></span></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-uzxl310\" data-node-index=\"44\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-zez6jhc\" data-node-index=\"45\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144620\"><div contenteditable=\"true\" spellcheck=\"false\">集群的数据分片</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-9q440tf\" data-node-index=\"46\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-wdvfwwe\" data-node-index=\"47\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">Redis 集群有16384 个哈希槽，每个 key 通过+693</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-vbr05le\" data-node-index=\"48\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-3tvsbox\" data-node-index=\"49\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-pz0xnwm\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-bb1481a\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">节点 A 包含 0 到 5460 号哈希槽</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-fv6s2fd\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-3kdzbzm\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">节点 B 包含 5461 到 10922 号哈希槽</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-gzznkkw\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-q9jyx4m\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">节点 C 包含 10923 到 16383 号哈希槽</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-ocolevg\" data-node-index=\"50\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-imhl3gz\" data-node-index=\"51\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-guu9h2l\" data-node-index=\"52\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144625\"><div contenteditable=\"true\" spellcheck=\"false\">Redis 集群的主从复制模型</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-zr4boff\" data-node-index=\"53\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"h2\" data-node-id=\"20220428141727-a9a9ogo\" data-node-index=\"54\" data-type=\"NodeHeading\" class=\"h2\" updated=\"20220428144627\"><div contenteditable=\"true\" spellcheck=\"false\">集群的特点</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-subtype=\"u\" data-node-id=\"20220428141727-q2sk32p\" data-node-index=\"55\" data-type=\"NodeList\" class=\"list\" updated=\"20220428141727\"><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-lqe9oss\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-bun8j8l\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-zn74btb\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-vj6hpab\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-marker=\"*\" data-subtype=\"u\" data-node-id=\"20220428141727-77qyg90\" data-type=\"NodeListItem\" class=\"li\" updated=\"20220428141727\"><div class=\"protyle-action\" draggable=\"true\"><svg><use xlink:href=\"#iconDot\"></use></svg></div><div data-node-id=\"20220428141727-ahs9o7i\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div><div data-node-id=\"20220428141727-voynyqw\" data-node-index=\"56\" data-type=\"NodeParagraph\" class=\"p\" updated=\"20220428141727\"><div contenteditable=\"true\" spellcheck=\"false\">来源: https://segmentfault.com/a/1190000022808576</div><div class=\"protyle-attr\" contenteditable=\"false\">​</div></div>","field":{"slug":"/topic/redis/Redis集群","topic":"redis"},"frontmatter":{"title":"Redis集群","tags":["redis"],"date":"2022-04-28","description":"三种集群方案 主从复制模式 哨兵模式 Cluster 模式 主从复制模式 image-20210920222454496 通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬..."}},"topic":{"title":"redis","tree":"{\"title\":\"redis\",\"id\":\"20220428141727-a3p03i0\",\"parentId\":\"\",\"href\":\"/topic/redis\",\"path\":\"/topic/redis\",\"children\":[{\"title\":\"Redis为什么这么快\",\"id\":\"20220428141727-jbyo2wp\",\"type\":\"d\",\"href\":\"/topic/redis/Redis为什么这么快\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis为什么这么快\",\"parentPath\":\"/topic/redis\",\"sort\":1,\"children\":[{\"title\":\"完全基于内存\",\"id\":\"20220428141727-m8thckv\",\"type\":\"h\",\"href\":\"/topic/redis/Redis为什么这么快#完全基于内存\",\"parentId\":\"20220428141727-jbyo2wp\",\"path\":\"/topic/redis/Redis为什么这么快\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":2},{\"title\":\"数据结构简单\",\"id\":\"20220428141727-0532nq9\",\"type\":\"h\",\"href\":\"/topic/redis/Redis为什么这么快#数据结构简单\",\"parentId\":\"20220428141727-jbyo2wp\",\"path\":\"/topic/redis/Redis为什么这么快\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":2},{\"title\":\"工作线程采用单线程，避免了线程上下文切换所带来的损耗\",\"id\":\"20220428141727-kw7bg9v\",\"type\":\"h\",\"href\":\"/topic/redis/Redis为什么这么快#工作线程采用单线程，避免了线程上下文切换所带来的损耗\",\"parentId\":\"20220428141727-jbyo2wp\",\"path\":\"/topic/redis/Redis为什么这么快\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":2},{\"title\":\"对于客户端的连接采用多路复用和非阻塞I/O\",\"id\":\"20220428141727-m7ruuk1\",\"type\":\"h\",\"href\":\"/topic/redis/Redis为什么这么快#对于客户端的连接采用多路复用和非阻塞I/O\",\"parentId\":\"20220428141727-jbyo2wp\",\"path\":\"/topic/redis/Redis为什么这么快\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":2},{\"title\":\"redis单线程的问题\",\"id\":\"20220428141728-w6wf4kq\",\"type\":\"d\",\"href\":\"/topic/redis/Redis为什么这么快/redis单线程的问题\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis为什么这么快/redis单线程的问题\",\"parentPath\":\"/topic/redis/Redis为什么这么快\",\"sort\":11,\"children\":[],\"level\":2}],\"level\":1},{\"title\":\"Redis基本数据结构\",\"id\":\"20220428141727-imsmasu\",\"type\":\"d\",\"href\":\"/topic/redis/Redis基本数据结构\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"sort\":2,\"children\":[{\"title\":\"常用的\",\"id\":\"20220428141727-1gclyg6\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#常用的\",\"parentId\":\"20220428141727-imsmasu\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"string\",\"id\":\"20220428141727-u2m7nzt\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#string\",\"parentId\":\"20220428141727-1gclyg6\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"hash\",\"id\":\"20220428141727-po0l8p4\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#hash\",\"parentId\":\"20220428141727-1gclyg6\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"list\",\"id\":\"20220428141727-nyjx5v1\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#list\",\"parentId\":\"20220428141727-1gclyg6\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"set\",\"id\":\"20220428141727-ujl3jkq\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#set\",\"parentId\":\"20220428141727-1gclyg6\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"zset\",\"id\":\"20220428141727-8lh8dqt\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#zset\",\"parentId\":\"20220428141727-1gclyg6\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"扩展结构\",\"id\":\"20220428141727-9xu8ei1\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#扩展结构\",\"parentId\":\"20220428141727-imsmasu\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"bitmap\",\"id\":\"20220428141727-89gt7iy\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#bitmap\",\"parentId\":\"20220428141727-9xu8ei1\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"hyperloglog\",\"id\":\"20220428141727-08upaib\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#hyperloglog\",\"parentId\":\"20220428141727-9xu8ei1\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"GEO\",\"id\":\"20220428141727-6z03dvm\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#GEO\",\"parentId\":\"20220428141727-9xu8ei1\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"扩展功能\",\"id\":\"20220428141727-x5n4s7y\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#扩展功能\",\"parentId\":\"20220428141727-imsmasu\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"pub/sub\",\"id\":\"20220428141727-zay76x9\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#pub/sub\",\"parentId\":\"20220428141727-x5n4s7y\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"pipeline\",\"id\":\"20220428141727-m3750uw\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#pipeline\",\"parentId\":\"20220428141727-x5n4s7y\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"Lua 脚本\",\"id\":\"20220428141727-6rc0qt7\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#Lua 脚本\",\"parentId\":\"20220428141727-x5n4s7y\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"事务\",\"id\":\"20220428141727-8i9gpxn\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构#事务\",\"parentId\":\"20220428141727-x5n4s7y\",\"path\":\"/topic/redis/Redis基本数据结构\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"String的底层实现\",\"id\":\"20220428141728-d2hmuxd\",\"type\":\"d\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"sort\":1,\"children\":[{\"title\":\"SDS 结构\",\"id\":\"20220428141728-y2039os\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#SDS 结构\",\"parentId\":\"20220428141728-d2hmuxd\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":3},{\"title\":\"相对于C语言的优势\",\"id\":\"20220428141728-8t63ohh\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#相对于C语言的优势\",\"parentId\":\"20220428141728-d2hmuxd\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[{\"title\":\"统计长度时间复杂度 O(1)\",\"id\":\"20220428141728-xeqpgol\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#统计长度时间复杂度 O(1)\",\"parentId\":\"20220428141728-8t63ohh\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":4},{\"title\":\"数据溢出\",\"id\":\"20220428141728-coew455\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#数据溢出\",\"parentId\":\"20220428141728-8t63ohh\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":4},{\"title\":\"内存重分配策略\",\"id\":\"20220428141728-mbwnou1\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#内存重分配策略\",\"parentId\":\"20220428141728-8t63ohh\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":4},{\"title\":\"数据格式多样性\",\"id\":\"20220428141728-5h2se0u\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#数据格式多样性\",\"parentId\":\"20220428141728-8t63ohh\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":4}],\"level\":3},{\"title\":\"三大编码\",\"id\":\"20220428141728-t4votze\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/String的底层实现#三大编码\",\"parentId\":\"20220428141728-d2hmuxd\",\"path\":\"/topic/redis/Redis基本数据结构/String的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"List的底层实现\",\"id\":\"20220428141727-skh553t\",\"type\":\"d\",\"href\":\"/topic/redis/Redis基本数据结构/List的底层实现\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis基本数据结构/List的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"sort\":2,\"children\":[],\"level\":2},{\"title\":\"Hash的底层实现\",\"id\":\"20220428141727-g51ewzt\",\"type\":\"d\",\"href\":\"/topic/redis/Redis基本数据结构/Hash的底层实现\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis基本数据结构/Hash的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"sort\":3,\"children\":[{\"title\":\"ZipList编码的哈希对象\",\"id\":\"20220428141727-fo8pixs\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/Hash的底层实现#ZipList编码的哈希对象\",\"parentId\":\"20220428141727-g51ewzt\",\"path\":\"/topic/redis/Redis基本数据结构/Hash的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":3},{\"title\":\"hashtable对象\",\"id\":\"20220428141727-f7zok8f\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/Hash的底层实现#hashtable对象\",\"parentId\":\"20220428141727-g51ewzt\",\"path\":\"/topic/redis/Redis基本数据结构/Hash的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"Set的底层实现\",\"id\":\"20220428141728-5c6e914\",\"type\":\"d\",\"href\":\"/topic/redis/Redis基本数据结构/Set的底层实现\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis基本数据结构/Set的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"sort\":4,\"children\":[],\"level\":2},{\"title\":\"ZSet的底层实现\",\"id\":\"20220428141728-58eined\",\"type\":\"d\",\"href\":\"/topic/redis/Redis基本数据结构/ZSet的底层实现\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis基本数据结构/ZSet的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"sort\":5,\"children\":[{\"title\":\"跳表是什么?\",\"id\":\"20220428141728-9by553n\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/ZSet的底层实现#跳表是什么?\",\"parentId\":\"20220428141728-58eined\",\"path\":\"/topic/redis/Redis基本数据结构/ZSet的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[{\"title\":\"优缺点\",\"id\":\"20220428141728-rvbr2il\",\"type\":\"h\",\"href\":\"/topic/redis/Redis基本数据结构/ZSet的底层实现#优缺点\",\"parentId\":\"20220428141728-9by553n\",\"path\":\"/topic/redis/Redis基本数据结构/ZSet的底层实现\",\"parentPath\":\"/topic/redis/Redis基本数据结构\",\"children\":[],\"level\":4}],\"level\":3}],\"level\":2}],\"level\":1},{\"title\":\"Redis分布式缓存\",\"id\":\"20220428141727-3x1i5zp\",\"type\":\"d\",\"href\":\"/topic/redis/Redis分布式缓存\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"sort\":3,\"children\":[{\"title\":\"双写一致性\",\"id\":\"20220428141727-zahxna7\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#双写一致性\",\"parentId\":\"20220428141727-3x1i5zp\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":2},{\"title\":\"缓存更新策略\",\"id\":\"20220428141727-iqgn80l\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#缓存更新策略\",\"parentId\":\"20220428141727-3x1i5zp\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"最常见的策略\",\"id\":\"20220428141727-45wxv7a\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#最常见的策略\",\"parentId\":\"20220428141727-iqgn80l\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"优点剖析\",\"id\":\"20220428141727-tfanvhu\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#优点剖析\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"1. “先淘汰缓存，再写数据库” 合理\",\"id\":\"20220428141727-vzyp7bi\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#1. “先淘汰缓存，再写数据库” 合理\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"2. 异步刷新，补缺补漏\",\"id\":\"20220428141727-kbueoxr\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#2. 异步刷新，补缺补漏\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"缺点剖析\",\"id\":\"20220428141727-sd1lbh3\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#缺点剖析\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"1. 容灾不足\",\"id\":\"20220428141727-aff14q4\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#1. 容灾不足\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"2. 并发问题\",\"id\":\"20220428141727-7kjhtfn\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#2. 并发问题\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"方案总结\",\"id\":\"20220428141727-5w2loli\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#方案总结\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"写流程：\",\"id\":\"20220428141727-s959uv0\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#写流程：\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"读流程：\",\"id\":\"20220428141727-sceljri\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#读流程：\",\"parentId\":\"20220428141727-45wxv7a\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4}],\"level\":3},{\"title\":\"方案分析\",\"id\":\"20220428141727-7flpl0m\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#方案分析\",\"parentId\":\"20220428141727-iqgn80l\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"优点剖析\",\"id\":\"20220428141727-1cqjx66\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#优点剖析\",\"parentId\":\"20220428141727-7flpl0m\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"1. 容灾\",\"id\":\"20220428141727-w9bvsqf\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#1. 容灾\",\"parentId\":\"20220428141727-1cqjx66\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":5}],\"level\":4},{\"title\":\"缺点剖析\",\"id\":\"20220428141727-n1twxfd\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#缺点剖析\",\"parentId\":\"20220428141727-7flpl0m\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"1. 只适合简单业务，复杂业务容易发生并发问题\",\"id\":\"20220428141727-t5kobxh\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#1. 只适合简单业务，复杂业务容易发生并发问题\",\"parentId\":\"20220428141727-n1twxfd\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"缺点1的改进\",\"id\":\"20220428141727-bz5ta88\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#缺点1的改进\",\"parentId\":\"20220428141727-t5kobxh\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":6}],\"level\":5},{\"title\":\"2. 依然是并发问题\",\"id\":\"20220428141727-gysgmg1\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#2. 依然是并发问题\",\"parentId\":\"20220428141727-n1twxfd\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":5}],\"level\":4}],\"level\":3},{\"title\":\"方案总结\",\"id\":\"20220428141727-01sdgjy\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#方案总结\",\"parentId\":\"20220428141727-iqgn80l\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"写流程：\",\"id\":\"20220428141727-eglmgkf\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#写流程：\",\"parentId\":\"20220428141727-01sdgjy\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4},{\"title\":\"读流程：\",\"id\":\"20220428141727-1vywbk4\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#读流程：\",\"parentId\":\"20220428141727-01sdgjy\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":4}],\"level\":3},{\"title\":\"方案分析\",\"id\":\"20220428141727-137lw2k\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#方案分析\",\"parentId\":\"20220428141727-iqgn80l\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"优点剖析\",\"id\":\"20220428141727-p0zad1o\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#优点剖析\",\"parentId\":\"20220428141727-137lw2k\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"1. 容灾完善\",\"id\":\"20220428141727-cawius6\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#1. 容灾完善\",\"parentId\":\"20220428141727-p0zad1o\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"写流程容灾分析\",\"id\":\"20220428141727-2d2z7fz\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#写流程容灾分析\",\"parentId\":\"20220428141727-cawius6\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":6},{\"title\":\"读流程容灾分析\",\"id\":\"20220428141727-4hr5okn\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#读流程容灾分析\",\"parentId\":\"20220428141727-cawius6\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":6}],\"level\":5},{\"title\":\"2. 无并发问题\",\"id\":\"20220428141727-uvwj2ga\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#2. 无并发问题\",\"parentId\":\"20220428141727-p0zad1o\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":5}],\"level\":4},{\"title\":\"缺点剖析\",\"id\":\"20220428141727-fmiz5zl\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#缺点剖析\",\"parentId\":\"20220428141727-137lw2k\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"1. 增加Cache_0强依赖\",\"id\":\"20220428141727-hr6lxu9\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#1. 增加Cache_0强依赖\",\"parentId\":\"20220428141727-fmiz5zl\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":5},{\"title\":\"2. 复杂度是比较高的\",\"id\":\"20220428141727-vbiftey\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#2. 复杂度是比较高的\",\"parentId\":\"20220428141727-fmiz5zl\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":5}],\"level\":4}],\"level\":3},{\"title\":\"方案总结\",\"id\":\"20220428141727-0an20z6\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存#方案总结\",\"parentId\":\"20220428141727-iqgn80l\",\"path\":\"/topic/redis/Redis分布式缓存\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"缓存击穿\",\"id\":\"20220428141728-p93afgy\",\"type\":\"d\",\"href\":\"/topic/redis/Redis分布式缓存/缓存击穿\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis分布式缓存/缓存击穿\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"sort\":1,\"children\":[{\"title\":\"解决方案\",\"id\":\"20220428141728-27esyuz\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存击穿#解决方案\",\"parentId\":\"20220428141728-p93afgy\",\"path\":\"/topic/redis/Redis分布式缓存/缓存击穿\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[{\"title\":\"不过期\",\"id\":\"20220428141728-foxjedm\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存击穿#不过期\",\"parentId\":\"20220428141728-27esyuz\",\"path\":\"/topic/redis/Redis分布式缓存/缓存击穿\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[],\"level\":4},{\"title\":\"互斥锁\",\"id\":\"20220428141728-68zg08m\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存击穿#互斥锁\",\"parentId\":\"20220428141728-27esyuz\",\"path\":\"/topic/redis/Redis分布式缓存/缓存击穿\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[],\"level\":4}],\"level\":3}],\"level\":2},{\"title\":\"缓存穿透\",\"id\":\"20220428141728-64iljj5\",\"type\":\"d\",\"href\":\"/topic/redis/Redis分布式缓存/缓存穿透\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis分布式缓存/缓存穿透\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"sort\":3,\"children\":[{\"title\":\"接口校验\",\"id\":\"20220428141728-wny00tb\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存穿透#接口校验\",\"parentId\":\"20220428141728-64iljj5\",\"path\":\"/topic/redis/Redis分布式缓存/缓存穿透\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[],\"level\":3},{\"title\":\"空对象缓存或者缺省值\",\"id\":\"20220428141728-6wjc642\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存穿透#空对象缓存或者缺省值\",\"parentId\":\"20220428141728-64iljj5\",\"path\":\"/topic/redis/Redis分布式缓存/缓存穿透\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[],\"level\":3},{\"title\":\"布隆过滤器\",\"id\":\"20220428141728-r9yad28\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存穿透#布隆过滤器\",\"parentId\":\"20220428141728-64iljj5\",\"path\":\"/topic/redis/Redis分布式缓存/缓存穿透\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"缓存雪崩\",\"id\":\"20220428141728-9ti4duq\",\"type\":\"d\",\"href\":\"/topic/redis/Redis分布式缓存/缓存雪崩\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis分布式缓存/缓存雪崩\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"sort\":4,\"children\":[{\"title\":\"解决方案\",\"id\":\"20220428141728-zu9jxq3\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存雪崩#解决方案\",\"parentId\":\"20220428141728-9ti4duq\",\"path\":\"/topic/redis/Redis分布式缓存/缓存雪崩\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[{\"title\":\"三步骤\",\"id\":\"20220428141728-0vnf8gp\",\"type\":\"h\",\"href\":\"/topic/redis/Redis分布式缓存/缓存雪崩#三步骤\",\"parentId\":\"20220428141728-zu9jxq3\",\"path\":\"/topic/redis/Redis分布式缓存/缓存雪崩\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"children\":[],\"level\":4}],\"level\":3}],\"level\":2},{\"title\":\"缓存预热\",\"id\":\"20220428141728-fz10tn2\",\"type\":\"d\",\"href\":\"/topic/redis/Redis分布式缓存/缓存预热\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis分布式缓存/缓存预热\",\"parentPath\":\"/topic/redis/Redis分布式缓存\",\"sort\":7,\"children\":[],\"level\":2}],\"level\":1},{\"title\":\"Redis的分布式锁\",\"id\":\"20220428141727-sgydg0x\",\"type\":\"d\",\"href\":\"/topic/redis/Redis的分布式锁\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"sort\":4,\"children\":[{\"title\":\"利用redis实现分布式锁\",\"id\":\"20220428141727-e4nwnv1\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#利用redis实现分布式锁\",\"parentId\":\"20220428141727-sgydg0x\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"三个重要因素\",\"id\":\"20220428141727-zthzzjq\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#三个重要因素\",\"parentId\":\"20220428141727-e4nwnv1\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"涉及命令\",\"id\":\"20220428141727-hs1yg88\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#涉及命令\",\"parentId\":\"20220428141727-e4nwnv1\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"实现思想\",\"id\":\"20220428141727-5jo3h6s\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#实现思想\",\"parentId\":\"20220428141727-sgydg0x\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"业务执行的时间大于redis锁过期的时间\",\"id\":\"20220428141727-q83o36l\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#业务执行的时间大于redis锁过期的时间\",\"parentId\":\"20220428141727-5jo3h6s\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"redis部署模式的影响\",\"id\":\"20220428141727-9xczwbf\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#redis部署模式的影响\",\"parentId\":\"20220428141727-5jo3h6s\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"原子性问题\",\"id\":\"20220428141727-u4jomll\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁#原子性问题\",\"parentId\":\"20220428141727-5jo3h6s\",\"path\":\"/topic/redis/Redis的分布式锁\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"看门狗模式\",\"id\":\"20220428141728-gdeeql2\",\"type\":\"d\",\"href\":\"/topic/redis/Redis的分布式锁/看门狗模式\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis的分布式锁/看门狗模式\",\"parentPath\":\"/topic/redis/Redis的分布式锁\",\"sort\":1,\"children\":[],\"level\":2},{\"title\":\"Redlock\",\"id\":\"20220428141728-qbzn1tc\",\"type\":\"d\",\"href\":\"/topic/redis/Redis的分布式锁/Redlock\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis的分布式锁/Redlock\",\"parentPath\":\"/topic/redis/Redis的分布式锁\",\"sort\":2,\"children\":[{\"title\":\"问题1\",\"id\":\"20220428141728-lg0r797\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁/Redlock#问题1\",\"parentId\":\"20220428141728-qbzn1tc\",\"path\":\"/topic/redis/Redis的分布式锁/Redlock\",\"parentPath\":\"/topic/redis/Redis的分布式锁\",\"children\":[],\"level\":3},{\"title\":\"问题2\",\"id\":\"20220428141728-nhr8fen\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁/Redlock#问题2\",\"parentId\":\"20220428141728-qbzn1tc\",\"path\":\"/topic/redis/Redis的分布式锁/Redlock\",\"parentPath\":\"/topic/redis/Redis的分布式锁\",\"children\":[],\"level\":3},{\"title\":\"问题3\",\"id\":\"20220428141728-5jc3ave\",\"type\":\"h\",\"href\":\"/topic/redis/Redis的分布式锁/Redlock#问题3\",\"parentId\":\"20220428141728-qbzn1tc\",\"path\":\"/topic/redis/Redis的分布式锁/Redlock\",\"parentPath\":\"/topic/redis/Redis的分布式锁\",\"children\":[],\"level\":3}],\"level\":2}],\"level\":1},{\"title\":\"Redis集群\",\"id\":\"20220428141727-awm7yu5\",\"type\":\"d\",\"href\":\"/topic/redis/Redis集群\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"sort\":6,\"children\":[{\"title\":\"三种集群方案\",\"id\":\"20220428141727-id6w37y\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#三种集群方案\",\"parentId\":\"20220428141727-awm7yu5\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":2},{\"title\":\"主从复制模式\",\"id\":\"20220428141727-01yokji\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#主从复制模式\",\"parentId\":\"20220428141727-awm7yu5\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"原理\",\"id\":\"20220428141727-2xgqon2\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#原理\",\"parentId\":\"20220428141727-01yokji\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"redis主从复制的坑\",\"id\":\"20220428141727-h04f0fa\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#redis主从复制的坑\",\"parentId\":\"20220428141727-01yokji\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"哨兵模式\",\"id\":\"20220428141727-jxcatge\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#哨兵模式\",\"parentId\":\"20220428141727-awm7yu5\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"哨兵模式的作用\",\"id\":\"20220428141727-3jb6vil\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#哨兵模式的作用\",\"parentId\":\"20220428141727-jxcatge\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"故障切换的过程\",\"id\":\"20220428141727-uscl9hh\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#故障切换的过程\",\"parentId\":\"20220428141727-jxcatge\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"哨兵模式的工作方式：\",\"id\":\"20220428141727-fe5liq6\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#哨兵模式的工作方式：\",\"parentId\":\"20220428141727-jxcatge\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"哨兵模式的优缺点\",\"id\":\"20220428141727-fq18erp\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#哨兵模式的优缺点\",\"parentId\":\"20220428141727-jxcatge\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"Cluster 集群模式（Redis官方）\",\"id\":\"20220428141727-z0udk1o\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#Cluster 集群模式（Redis官方）\",\"parentId\":\"20220428141727-awm7yu5\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[{\"title\":\"集群的数据分片\",\"id\":\"20220428141727-zez6jhc\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#集群的数据分片\",\"parentId\":\"20220428141727-z0udk1o\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"Redis 集群的主从复制模型\",\"id\":\"20220428141727-guu9h2l\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#Redis 集群的主从复制模型\",\"parentId\":\"20220428141727-z0udk1o\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3},{\"title\":\"集群的特点\",\"id\":\"20220428141727-a9a9ogo\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群#集群的特点\",\"parentId\":\"20220428141727-z0udk1o\",\"path\":\"/topic/redis/Redis集群\",\"parentPath\":\"/topic/redis\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"Redis数据淘汰策略\",\"id\":\"20220428141727-oaw8wmd\",\"type\":\"d\",\"href\":\"/topic/redis/Redis集群/Redis数据淘汰策略\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis集群/Redis数据淘汰策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"sort\":5,\"children\":[{\"title\":\"Redis的内存淘汰策略，有以下几种\",\"id\":\"20220428141727-aort8cn\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据淘汰策略#Redis的内存淘汰策略，有以下几种\",\"parentId\":\"20220428141727-oaw8wmd\",\"path\":\"/topic/redis/Redis集群/Redis数据淘汰策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":3},{\"title\":\"数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据\",\"id\":\"20220428141727-egla613\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据淘汰策略#数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据\",\"parentId\":\"20220428141727-oaw8wmd\",\"path\":\"/topic/redis/Redis集群/Redis数据淘汰策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":3}],\"level\":2},{\"title\":\"redis持久化\",\"id\":\"20220428141728-ahu8hnn\",\"type\":\"d\",\"href\":\"/topic/redis/Redis集群/redis持久化\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"sort\":8,\"children\":[{\"title\":\"策略\",\"id\":\"20220428141728-h8spnbe\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#策略\",\"parentId\":\"20220428141728-ahu8hnn\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":3},{\"title\":\"AOF持久化\",\"id\":\"20220428141728-8sb3e90\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#AOF持久化\",\"parentId\":\"20220428141728-ahu8hnn\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"执行流程\",\"id\":\"20220428141728-xdy9wq3\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#执行流程\",\"parentId\":\"20220428141728-8sb3e90\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4},{\"title\":\"怎么防止AOF文件越来越大？\",\"id\":\"20220428141728-2fjjnsi\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#怎么防止AOF文件越来越大？\",\"parentId\":\"20220428141728-8sb3e90\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"AOF文件追加阻塞？\",\"id\":\"20220428141728-jggnla6\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#AOF文件追加阻塞？\",\"parentId\":\"20220428141728-2fjjnsi\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":5}],\"level\":4}],\"level\":3},{\"title\":\"RDB持久化\",\"id\":\"20220428141728-3uk1dzb\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#RDB持久化\",\"parentId\":\"20220428141728-ahu8hnn\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"执行流程\",\"id\":\"20220428141728-b6xujxs\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#执行流程\",\"parentId\":\"20220428141728-3uk1dzb\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4}],\"level\":3},{\"title\":\"混合持久化（Redis4.0+）\",\"id\":\"20220428141728-z9bdsb4\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#混合持久化（Redis4.0+）\",\"parentId\":\"20220428141728-ahu8hnn\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"执行流程\",\"id\":\"20220428141728-flzi42f\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#执行流程\",\"parentId\":\"20220428141728-z9bdsb4\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4}],\"level\":3},{\"title\":\"Redis的数据恢复策略\",\"id\":\"20220428141728-x9y47t6\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#Redis的数据恢复策略\",\"parentId\":\"20220428141728-ahu8hnn\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":3},{\"title\":\"Redis持久化策略该如何进行选择\",\"id\":\"20220428141728-54y3bdq\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#Redis持久化策略该如何进行选择\",\"parentId\":\"20220428141728-ahu8hnn\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"1.不需要考虑数据丢失的情况\",\"id\":\"20220428141728-ujbrmwt\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#1.不需要考虑数据丢失的情况\",\"parentId\":\"20220428141728-54y3bdq\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4},{\"title\":\"2.单机实例情况下\",\"id\":\"20220428141728-zahznfw\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#2.单机实例情况下\",\"parentId\":\"20220428141728-54y3bdq\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4},{\"title\":\"3.在主从环境下\",\"id\":\"20220428141728-jbd8vij\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#3.在主从环境下\",\"parentId\":\"20220428141728-54y3bdq\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？\",\"id\":\"20220428141728-sjs8krt\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？\",\"parentId\":\"20220428141728-jbd8vij\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":5},{\"title\":\"4.异地灾备\",\"id\":\"20220428141728-aryf17w\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/redis持久化#4.异地灾备\",\"parentId\":\"20220428141728-jbd8vij\",\"path\":\"/topic/redis/Redis集群/redis持久化\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":5}],\"level\":4}],\"level\":3}],\"level\":2},{\"title\":\"Redis数据删除策略\",\"id\":\"20220428141727-pvzi1zo\",\"type\":\"d\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentId\":\"\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"sort\":13,\"children\":[{\"title\":\"惰性删除\",\"id\":\"20220428141727-o0rija8\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#惰性删除\",\"parentId\":\"20220428141727-pvzi1zo\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":3},{\"title\":\"定期删除\",\"id\":\"20220428141727-wq9axfb\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#定期删除\",\"parentId\":\"20220428141727-pvzi1zo\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":3},{\"title\":\"AOF、RDB 和复制功能对过期键的处理\",\"id\":\"20220428141727-gr8a4lk\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#AOF、RDB 和复制功能对过期键的处理\",\"parentId\":\"20220428141727-pvzi1zo\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"RDB\",\"id\":\"20220428141727-xhxrdyf\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#RDB\",\"parentId\":\"20220428141727-gr8a4lk\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4},{\"title\":\"AOF\",\"id\":\"20220428141727-z7l5azb\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#AOF\",\"parentId\":\"20220428141727-gr8a4lk\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4},{\"title\":\"复制\",\"id\":\"20220428141727-vdap5h4\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#复制\",\"parentId\":\"20220428141727-gr8a4lk\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4}],\"level\":3},{\"title\":\"疑问点？\",\"id\":\"20220428141727-5x39avu\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#疑问点？\",\"parentId\":\"20220428141727-pvzi1zo\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[{\"title\":\"如果主从服务器链接断开怎么办？\",\"id\":\"20220428141727-4505lb0\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#如果主从服务器链接断开怎么办？\",\"parentId\":\"20220428141727-5x39avu\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4},{\"title\":\"如果发生网络抖动，主服务器发送的 del 命令没有传递到从服务器怎么办？\",\"id\":\"20220428141727-4x9rpfk\",\"type\":\"h\",\"href\":\"/topic/redis/Redis集群/Redis数据删除策略#如果发生网络抖动，主服务器发送的 del 命令没有传递到从服务器怎么办？\",\"parentId\":\"20220428141727-5x39avu\",\"path\":\"/topic/redis/Redis集群/Redis数据删除策略\",\"parentPath\":\"/topic/redis/Redis集群\",\"children\":[],\"level\":4}],\"level\":3}],\"level\":2}],\"level\":1}],\"level\":0}"}},"pageContext":{"slug":"/topic/redis/Redis集群","topic":"redis"}},"staticQueryHashes":["1284643331","2841359383"]}