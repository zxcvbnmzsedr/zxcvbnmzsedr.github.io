{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Cloudflare让IPV6不在鸡肋","result":{"data":{"siYuan":{"excerpt":"Cloudflare让IPV6不在鸡肋 前言 随着国内IPV4的公网地址越来越少，以及IPV6的不断普及，我们能够很方便的获取到公网的IPV6地址。但是在外面没有IPV6的情况下，想要访问家里的IPV6服务是一件很困难的事情。 虽然有着共有...","raw":"# Cloudflare让IPV6不在鸡肋\n\n# 前言\n\n随着国内IPV4的公网地址越来越少，以及IPV6的不断普及，我们能够很方便的获取到公网的IPV6地址。但是在外面没有IPV6的情况下，想要访问家里的IPV6服务是一件很困难的事情。\n\n虽然有着共有的6in4，或者ipv4转v6的代理隧道可以用，但是实际用下来，感觉由于代理服务器的影响，没有办法达到预期的速度。\n\n> [https://tunnelbroker.net/](https://tunnelbroker.net/) 提供了免费的IPV6隧道服务\n>\n\n不过，国外有一个非常好用的CDN提供商，[CloudFlare](https://www.cloudflare.com/zh-cn/)\n\n它提供了一整套免费的CDN加速和代理，我们只需要通过CDN来代理请求的IPV6地址即可。\n\n![](https://image.ztianzeng.com/uPic/20220613131516.png)\n\n# 准备工作\n\n要想使用这套服务，直接访问到家中的设备需要准备下面这几样东西:\n\n1. 一个属于自己的域名\n2. 一个能够编写脚本的路由器\n3. 有一定动手能力,爱折腾\n\n# 开始折腾\n\n我们第一步需要确保域名接入到了cloudflare中。通过修改名称服务器，将域名交给cloudflare进行托管。\n\n然后在cloudflare中新建一个了类型是AAAA的DNS，内容随便写啥。\n\n> 因为我用的是Openwrt，所以会以OpenWrt来进行说明\n>\n\n先登录OpenWrt的路由器, 查看LAN口的获取到的IPV6地址，把这个IPV6地址粘贴到CloudFlare中。（关于OpenWrt如何开启IPV6，网上教程很多）\n\n然后将Openwrt的端口修改成下面的任何一个（下面这些端口是CloudFlare支持的反向代理的端口，其次国内家用端口封80和443，我选择的是2095）\n\n* 8880\n* 2052\n* 2082\n* 2086\n* 2095\n\n如果不能访问，一般是由于防火墙的问题，我们可以用5G手机，直接访问[:IPV6地址:]:2095，来确定是不是防火墙的问题。\n\n![image.png](assets/image-20220613133004-4e6ek00.png)\n\n如果一切设置完成，就能访问了。\n\n> 必须将代理状态设置成已代理，否则就会你和配置的域名之间就会走IPV6的方式访问。\n>\n\n# DDNS\n\n由于我们拿到的IPV6是每次拨号都是在变化的，所以要能定时将最新的IPV6地址上报上去。\n\n脚本在下面:\n\n脚本需要用到jq，所以提取先安装[jq](https://stedolan.github.io/jq/download/)\n\n```bash\n#!/bin/bash\n\n#LEDE/Openwrt may need install ca-bundle curl(opkg install ca-bundle curl)\n\n#Add you custom record to the CloudFlare first.\n\n#Your sub domain\nSUB_DOMAIN=\"webdav.shiyitopo.tech\"\n#dash --> example.com --> Overview --> Zone ID:\n#https://dash.cloudflare.com/_your_account_id_/example.com\nZONE_ID=\"\"\n#API Tokens\n#https://dash.cloudflare.com/profile/api-tokens\n#Manage access and permissions for your accounts, sites, and products\n#example.com- Zone:Read, DNS:Edit\nTOKEN_ID=\"\"\n#The path of jq binaries . Download from https://stedolan.github.io/jq/download/\n#If the system has installed jq. Just typed jq.\n#If you custom a special binary. Just type the path of jq\nJQ_PATH=\"/root/jq-linux64\"\n\nif [ -n \"$DNS_ZONE_ID\" ]; then\n    echo \"The user has not configure the the ZONE ID \"\n    exit 1\nfi\n\necho \"Your dns zone id is: $ZONE_ID\"\njsonResult=$(curl -s -X GET \"https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records\" \\\n    -H \"Authorization: Bearer ${TOKEN_ID}\" \\\n    -H \"Content-Type: application/json\")\n\ncurlResult=$(echo $jsonResult | $JQ_PATH -r .success)\n\nif [ \"$curlResult\" = true ]; then\n    echo \"Get dns record success.\"\nelse\n    echo \"Get dns record fail.$jsonResult\"\n    exit 1\nfi\n\nrecordSize=$(echo $jsonResult | $JQ_PATH .result | $JQ_PATH length)\necho \"Total found $recordSize record\"\n\nindex=0\nwhile [ $index -lt $recordSize ]; do\n    tResult=$(echo $jsonResult | $JQ_PATH -r .result[$index])\n    tmpDomain=$(echo $tResult | $JQ_PATH -r .name)\n    type=$(echo $tResult | $JQ_PATH -r .type)\n\n    if [ \"$tmpDomain\"x = \"$SUB_DOMAIN\"x ]; then\n        if [ \"AAAA\"x = \"$type\"x ]; then\n            echo \"Found AAAA domain:$tmpDomain\"\n            identifier_v6=$(echo $tResult | $JQ_PATH -r .id)\n        elif [ \"A\"x = \"$type\"x ]; then\n            echo \"Found A domain:$tmpDomain\"\n            identifier_v4=$(echo $tResult | $JQ_PATH -r .id)\n        else\n            echo \"Please add the A or AAAA record manually first.\"\n        fi\n    fi\n    index=$(expr $index + 1)\ndone\n\nif [ -z \"$identifier_v4\" ] && [ -z \"$identifier_v6\" ]; then\n    echo \"Get '$SUB_DOMAIN' identifier failed. Please add the A or AAAA record manually first.\"\n    exit 1\nelse\n    echo \"Get '$SUB_DOMAIN' identifier success. [A] identifier:$identifier_v4 [AAAA] identifier:$identifier_v6\"\nfi\n\nif [ -z \"$identifier_v4\" ]; then\n    echo \"IPv4 address are not required.\"\nelse\n    #IP=$(curl -s http://members.3322.org/dyndns/getip)\n    IP=$(curl -s http://ip.3322.net/)\n    regex='\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b'\n    matchIP=$(echo $IP | grep -E $regex)\n    if [ -n \"$matchIP\" ]; then\n        echo \"[$IP] IPv4 matches...\"\n        jsonResult=$(curl -s -X PUT \"https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/${identifier_v4}\" \\\n            -H \"Authorization: Bearer ${TOKEN_ID}\" \\\n            -H \"Content-Type: application/json\" \\\n            --data '{\"type\":\"A\",\"name\":\"'${SUB_DOMAIN}'\",\"content\":\"'${IP}'\",\"ttl\":1,\"proxied\":false}')\n        curlResult=$(echo $jsonResult | $JQ_PATH -r .success)\n\n        if [ \"$curlResult\" = true ]; then\n            echo \"Update IPv4 dns record success.\"\n        else\n            echo \"Update IPv4 dns record fail.\"\n        fi\n    else\n        echo \"[$IP]IPv4 doesn't match!\"\n    fi\nfi\n\nif [ -z \"$identifier_v6\" ]; then\n    echo \"IPv6 addresses are not required.\"\nelse\n    IP=$(curl -6 ip.sb)\n    regex='^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$'\n    matchIP=$(echo $IP | grep -E $regex)\n    if [ -n \"$matchIP\" ]; then\n        echo \"[$IP] IPv6 matches...\"\n        echo \"Update IPv6 ...\"\n        jsonResult=$(curl -s -X PUT \"https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/${identifier_v6}\" \\\n            -H \"Authorization: Bearer ${TOKEN_ID}\" \\\n            -H \"Content-Type: application/json\" \\\n            --data '{\"type\":\"AAAA\",\"name\":\"'${SUB_DOMAIN}'\",\"content\":\"'${IP}'\",\"ttl\":1,\"proxied\":true}')\n        curlResult=$(echo $jsonResult | $JQ_PATH -r .success)\n\n        if [ \"$curlResult\" = true ]; then\n            echo \"Update IPv6 dns record success.\"\n        else\n            echo \"Update IPv6 dns record fail.\"\n        fi\n    else\n        echo \"[$IP] IPv6 doesn't match!\"\n    fi\nfi\n```\n\n后续也能通过Nginx进行反向代理，这样就不用配置其他服务的域名了，只需要通过nginx进行统一的转发即可。\n","field":{"slug":"/posts/Cloudflare让IPV6不在鸡肋"},"frontmatter":{"title":"Cloudflare让IPV6不在鸡肋","tags":[],"date":"2022-06-13","description":"Cloudflare让IPV6不在鸡肋 前言 随着国内IPV4的公网地址越来越少，以及IPV6的不断普及，我们能够很方便的获取到公网的IPV6地址。但是在外面没有IPV6的情况下，想要访问家里的IPV6服务是一件很困难的事情。 虽然有着共有..."}},"prev":{"frontmatter":{"title":"用ffmpeg从webm提取mp3"},"field":{"slug":"/posts/用ffmpeg从webm提取mp3"}},"next":{"frontmatter":{"title":"准备迎接SpringBoot3.0"},"field":{"slug":"/posts/准备迎接SpringBoot3.0"}}},"pageContext":{"slug":"/posts/Cloudflare让IPV6不在鸡肋","prevSlug":"/posts/用ffmpeg从webm提取mp3","nextSlug":"/posts/准备迎接SpringBoot3.0"}},"staticQueryHashes":["1284643331","2841359383"]}