(window.webpackJsonp=window.webpackJsonp||[]).push([[258],{525:function(v,_,a){"use strict";a.r(_);var e=a(7),t=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"_4s分析法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4s分析法"}},[v._v("#")]),v._v(" 4S分析法")]),v._v(" "),_("p",[v._v("以Twitter为案例，来作为一个分析")]),v._v(" "),_("h1",{attrs:{id:"scenario场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#scenario场景"}},[v._v("#")]),v._v(" "),_("u",[v._v("Scenario")]),v._v("场景")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("需要设计哪些功能")]),v._v(" "),_("p",[v._v("将功能列举出来，并进行排列，因为在一场中不可能让你设计整个系统，只能设计系统中的某几个最重要的模块")])]),v._v(" "),_("li",[_("p",[v._v("需要承受多大的访问量")]),v._v(" "),_("p",[v._v("承载的访问量的大小决定了采用中间件去实现我们的系统，不同的承载量所需要的中间件和设备都是不一样的，所以系统设计并没有最合适的架构，只有在衡量成本和收益之后设计出来的最符合当下情况的最合适的架构")])])]),v._v(" "),_("h2",{attrs:{id:"需要设计哪些功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#需要设计哪些功能"}},[v._v("#")]),v._v(" 需要设计哪些功能")]),v._v(" "),_("p",[v._v("第一步列举功能:")]),v._v(" "),_("ul",[_("li",[v._v("注册、登录")]),v._v(" "),_("li",[v._v("用户个人页面展示、编辑")]),v._v(" "),_("li",[v._v("上传图片、视频")]),v._v(" "),_("li",[v._v("搜索")]),v._v(" "),_("li",[v._v("发送分享Twitter内容")]),v._v(" "),_("li",[v._v("TimeLine和News Feed")]),v._v(" "),_("li",[v._v("关注和取消关注用户")])]),v._v(" "),_("p",[v._v("第二步骤，功能排序，选出核心功能:")]),v._v(" "),_("ul",[_("li",[v._v("发送Twitter")]),v._v(" "),_("li",[v._v("TimeLine展示")]),v._v(" "),_("li",[v._v("News Feed推送")]),v._v(" "),_("li",[v._v("关注和取消关注用户")]),v._v(" "),_("li",[v._v("注册登录")])]),v._v(" "),_("h2",{attrs:{id:"需要承受的访问量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#需要承受的访问量"}},[v._v("#")]),v._v(" 需要承受的访问量")]),v._v(" "),_("p",[v._v("我们需要对访问量进行一个估算，下面大致是估算方式 :")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("并发用户Concurrent User")]),v._v(" "),_("ul",[_("li",[v._v("日活跃用户数量 * 每个用户平均请求次数 / 一天多少秒 = 1M * 60 / 86100 $\\approx$ 700K")]),v._v(" "),_("li",[v._v("峰值 = Average Concurrent User * 3 $\\approx$ 2100K")])])]),v._v(" "),_("li",[_("p",[v._v("读频率Read QPS （Queries Per Second）")]),v._v(" "),_("ul",[_("li",[v._v("700K")])])]),v._v(" "),_("li",[_("p",[v._v("写频率Write QPS")]),v._v(" "),_("ul",[_("li",[v._v("5K")])])])]),v._v(" "),_("p",[v._v("这样就大致分析出需要承载的QPS。")]),v._v(" "),_("p",[v._v("下面是一些硬件或者软件能够承载的QPS数量:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("QPS=100")]),v._v(" "),_("ul",[_("li",[v._v("笔记本电脑")])])]),v._v(" "),_("li",[_("p",[v._v("QPS=1k")]),v._v(" "),_("ul",[_("li",[v._v("Web服务器")]),v._v(" "),_("li",[v._v("需要考虑单点故障")])])]),v._v(" "),_("li",[_("p",[v._v("QPS=1m")]),v._v(" "),_("ul",[_("li",[v._v("建设1000台的服务器集群")]),v._v(" "),_("li",[v._v("需要考虑集群维护成本，如何对资源进行调度")])])]),v._v(" "),_("li",[_("p",[v._v("QPS和WebServer 、Database之间的关系")]),v._v(" "),_("ul",[_("li",[v._v("一台Web Server承受量是1k的QPS，实际上如果能扛得住100个QPS已经很牛逼了")]),v._v(" "),_("li",[v._v("一台SQL Database承受量是1k QPS左右")]),v._v(" "),_("li",[v._v("一个NoSQL集群（Elasticsearch）承受量是10W左右")]),v._v(" "),_("li",[v._v("内存数据库（Redis）100W QPS左右")])])])]),v._v(" "),_("p",[v._v("通过这些预估的QPS数量，就能够估算出所需要的机器。")]),v._v(" "),_("h1",{attrs:{id:"service服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#service服务"}},[v._v("#")]),v._v(" Service服务")]),v._v(" "),_("p",[v._v("将大系统拆分成一个个小服务。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://image.ztianzeng.com/uPic/20220614190843.png",alt:""}})]),v._v(" "),_("ul",[_("li",[_("p",[v._v("重放需求")]),v._v(" "),_("p",[v._v("重新过一遍每个需求，为每个需求添加一个服务，用于处理内部逻辑")])]),v._v(" "),_("li",[_("p",[v._v("归并需求")]),v._v(" "),_("p",[v._v("归并相同的服务，对同一类问题的逻辑处理归并在同一个Service中")]),v._v(" "),_("p",[v._v("将整个系统切分成若干个小的Service")])])]),v._v(" "),_("p",[v._v("‍")]),v._v(" "),_("h1",{attrs:{id:"storage存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#storage存储"}},[v._v("#")]),v._v(" Storage存储")]),v._v(" "),_("p",[v._v("对于我们写的Service而言，写的是具象化的程序，而程序=算法+数据结构。")]),v._v(" "),_("p",[v._v("但是对于系统而言，系统=服务+数据存储。")]),v._v(" "),_("p",[v._v("所以确定存储结构和介质尤为重要。")]),v._v(" "),_("h2",{attrs:{id:"处理步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#处理步骤"}},[v._v("#")]),v._v(" 处理步骤")]),v._v(" "),_("h3",{attrs:{id:"第一步-为每个service选择存储结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一步-为每个service选择存储结构"}},[v._v("#")]),v._v(" 第一步：为每个Service选择存储结构")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("数据库系统")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("关系型数据库 SQL DataBase")]),v._v(" "),_("ul",[_("li",[v._v("用户信息")])])]),v._v(" "),_("li",[_("p",[v._v("非关系数据库")]),v._v(" "),_("ul",[_("li",[v._v("推文")]),v._v(" "),_("li",[v._v("社交图谱")])])])])]),v._v(" "),_("li",[_("p",[v._v("文件系统")]),v._v(" "),_("ul",[_("li",[v._v("图片、视频、Media Files")])])]),v._v(" "),_("li",[_("p",[v._v("缓存系统Cache")]),v._v(" "),_("ul",[_("li",[v._v("不支持数据持久化")]),v._v(" "),_("li",[v._v("但是效率高，内存级别的访问速度")])])])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://image.ztianzeng.com/uPic/20220615103234.png",alt:""}})]),v._v(" "),_("h3",{attrs:{id:"第二步-细化表结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二步-细化表结构"}},[v._v("#")]),v._v(" 第二步：细化表结构")]),v._v(" "),_("p",[v._v("‍")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://image.ztianzeng.com/uPic/20220615131659.png",alt:""}})]),v._v(" "),_("h2",{attrs:{id:"存储模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#存储模型"}},[v._v("#")]),v._v(" 存储模型")]),v._v(" "),_("h3",{attrs:{id:"pull-model-拉模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pull-model-拉模型"}},[v._v("#")]),v._v(" Pull Model 拉模型")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://image.ztianzeng.com/uPic/20220615151033.png",alt:""}})]),v._v(" "),_("ul",[_("li",[_("p",[v._v("算法:")]),v._v(" "),_("p",[v._v("在用户查看News Feed时，获取每一个好友的前100条Tweets，用K路归并算法进行合并，合并出前100条News Feeds")])]),v._v(" "),_("li",[_("p",[v._v("复杂度分析")]),v._v(" "),_("ul",[_("li",[v._v("获取News Feed ，如果有N个关注对象，则为N次DB Reads的时间 + K路归并的时间（可以忽略，因为DB Read花费时间更多）")]),v._v(" "),_("li",[v._v("发布Tweet ，1次DB Write的时间")])])])]),v._v(" "),_("h1",{attrs:{id:"scala扩展设计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#scala扩展设计"}},[v._v("#")]),v._v(" Scala扩展设计")]),v._v(" "),_("ol",[_("li",[v._v("Optimize 优化")]),v._v(" "),_("li",[v._v("Maintenance 维护")])]),v._v(" "),_("h2",{attrs:{id:"处理步骤-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#处理步骤-2"}},[v._v("#")]),v._v(" 处理步骤")]),v._v(" "),_("h3",{attrs:{id:"第一步-优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第一步-优化"}},[v._v("#")]),v._v(" 第一步：优化")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("解决设计缺陷")]),v._v(" "),_("ul",[_("li",[v._v("Pull 和 Push 模式的局限性")])])]),v._v(" "),_("li",[_("p",[v._v("更多的功能")]),v._v(" "),_("ul",[_("li",[v._v("Like、Follow & Unfollow、Ads")])])]),v._v(" "),_("li",[_("p",[v._v("特殊情况")]),v._v(" "),_("ul",[_("li",[v._v("僵尸粉、热搜")])])])]),v._v(" "),_("h3",{attrs:{id:"第二部-维护"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第二部-维护"}},[v._v("#")]),v._v(" 第二部：维护")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("健壮性")]),v._v(" "),_("ul",[_("li",[v._v("服务器或者数据库挂了")])])]),v._v(" "),_("li",[_("p",[v._v("扩展性")]),v._v(" "),_("ul",[_("li",[v._v("应对流量暴增的情况")])])])]),v._v(" "),_("h2",{attrs:{id:"pull的缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pull的缺陷"}},[v._v("#")]),v._v(" Pull的缺陷")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://image.ztianzeng.com/uPic/20220615151033.png",alt:""}})]),v._v(" "),_("p",[v._v("在用户进行读请求时，会访问每个关注的人的DB，所以这一块将会成为瓶颈")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("在访问DB之前，加入Cache")])]),v._v(" "),_("li",[_("p",[v._v("缓存每个用户的TimeLine")]),v._v(" "),_("ul",[_("li",[v._v("N次DB请求 转化为 N次Cache请求")])])]),v._v(" "),_("li",[_("p",[v._v("缓存每个用户的News Feeds")]),v._v(" "),_("ul",[_("li",[v._v("没有Cache News Feed的用户：归并N个用户最近的100条Tweets，取出结果前的100条")]),v._v(" "),_("li",[v._v("有Cache News Feed的用户：归并N个用户在某个时间戳之后的所有Tweets")])])])]),v._v(" "),_("h2",{attrs:{id:"push的缺陷"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#push的缺陷"}},[v._v("#")]),v._v(" Push的缺陷")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://image.ztianzeng.com/uPic/20220615151122.png",alt:""}})]),v._v(" "),_("p",[v._v("在用户发布一篇文章时，会向关注者的TimeLine中都插入一条Tweets。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("会浪费更多的存储空间")]),v._v(" "),_("ul",[_("li",[v._v("每个人那都会有一条Tweets数据")]),v._v(" "),_("li",[v._v("存储相对内存便宜，可以接受")])])]),v._v(" "),_("li",[_("p",[v._v("不活跃用户的问题")]),v._v(" "),_("ul",[_("li",[v._v("导致每个人收到的时间不一样")])])]),v._v(" "),_("li",[_("p",[v._v("粉丝数量超级大，亿级")]),v._v(" "),_("ul",[_("li",[v._v("插入的时长即使异步，也非常慢")]),v._v(" "),_("li",[v._v("切换回Pull模式，需要Trade Off ： Pull 和 Push成本")])])])]),v._v(" "),_("h2",{attrs:{id:"处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#处理"}},[v._v("#")]),v._v(" 处理")]),v._v(" "),_("h3",{attrs:{id:"最小改动"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#最小改动"}},[v._v("#")]),v._v(" 最小改动")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("扩展机器")]),v._v(" "),_("ul",[_("li",[v._v("Push的话，将需要插入的Tweets分布到多台机器上，并行插入")]),v._v(" "),_("li",[v._v("Pull的话，增加Cache容量")])])])]),v._v(" "),_("h3",{attrs:{id:"增长预估"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#增长预估"}},[v._v("#")]),v._v(" 增长预估")]),v._v(" "),_("p",[v._v("对当前业务量的增长率进行一个预判，衡量是采用Pull还是Push，如果实在太大，考虑Push结合Pull进行优化")]),v._v(" "),_("ul",[_("li",[v._v("普通用户使用Push方案进行处理")]),v._v(" "),_("li",[v._v("标记大V用户，采用Pull方式进行处理")]),v._v(" "),_("li",[v._v("用户查询，合并自己的TimeLine + 大V的TimeLine")])]),v._v(" "),_("p",[v._v("相对来说混用的模型实现上会比单纯的复杂。")]),v._v(" "),_("p",[v._v("‍")])])}),[],!1,null,null,null);_.default=t.exports}}]);