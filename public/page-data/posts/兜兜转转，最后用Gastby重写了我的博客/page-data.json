{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/兜兜转转，最后用Gastby重写了我的博客","result":{"data":{"siYuan":{"excerpt":"6年前，我建立的自己的一个个人博客。最开始是采用WordPress进行构建，但是由于那个时候由于还是学生，可以通过腾讯云学生优惠拿到10块钱一个月的机器，勉强还算能玩。 随着，腾讯云优惠的结束，服务器开销着实承担不起，后面就尝试寻找在线博客...","raw":"6年前，我建立的自己的一个个人博客。最开始是采用WordPress进行构建，但是由于那个时候由于还是学生，可以通过腾讯云学生优惠拿到10块钱一个月的机器，勉强还算能玩。\n\n随着，腾讯云优惠的结束，服务器开销着实承担不起，后面就尝试寻找在线博客，当时的简书、CSDN、博客园等在线博客平台都注册了账号，体验过后都不是很满意。\n\n后面，随着以Hexo为首的静态站点生成框架的兴起，可以通过OSS方便的生成自己的网站，后面采用Hexo尝试了一段时间\n\n随着时间的流逝~~~~~\n\n有几个月没有写博客，就导致Hexo的命令完全就忘光了~~~~\n\n而且当时为了国内能够顺利的访问还把源码托管在国内的某个平台上，长达半年多没写，甚至连托管在哪个平台上都不知道了。\n\n后面有继续转站带有客户端的静态网站生成工具Gridea，也由于无法满足自己的需要，所以最后也放弃了~~~~\n\n索性自己就推导重来，都是静态网站，React搞一搞，难度也不是很大~~~\n\n经过一番折腾选择了Gastby作为基础框架来生成自己的网站~~~\n\n## 为啥是Gastby嘞\n\n|博客系统|开发语言|模板语言|类型|优势|\n| ---------------------------------------------------| -----------| ------------| ------| --------------|\n|[**Hexo**](https://hexo.io/)|Node.js|EJS|静态|中文资料多|\n|[**Hugo**](https://gohugo.io/)|Go|Go|静态|编译超快|\n|[**Jekyll**](https://jekyllrb.com/)|Ruby|Liquid|静态|/|\n|[Ghost](https://ghost.org/)|Node.js|Handlebars|CMS|默认主题好看|\n|[**Gatsby**](gatsbyjs.com)|JS(React)|JS(React)|静态|React|\n|[Typecho](https://typecho.org/)|PHP|PHP|静态|/|\n|[WordPress](https://wordpress.org/)|PHP|PHP|CMS|/|\n|[Gridea](https://gridea.dev)|JS(Vue)|EJS|静态|/|\n|[**Gridsome**](https://gridsome.org/)|JS(Vue)|JS(Vue)|静态|Vue|\n|[Halo](https://halo.run/)|Java|Freemarker|CMS|/|\n|[**Pelican**](https://blog.getpelican.com/)|Python|Jinja|静态|Python|\n\n1. 支持Markdown语法\n2. 生态繁荣\n3. 无后端\n4. 可定制化程度高\n5. 得是熟悉的技术栈！！！\n\n目前前端就会个React，所以自然就选择了Gastby。\n\n\n## 界面设计\n\n大部分的界面是我抄的，css调起来要人命，还不一定有别人的好看\n\n唯一有特色的，就是扫描markdown文件来生成思维导图\n\n大概长这样：\n\n![VaXToq](https://image.ztianzeng.com/uPic/VaXToq.png)\n\n## 数据哪来?\n\n在整个网站中，系统分为两个部分\n\n1. posts: 记录日常的文章\n2. topic: 体系化的知识，不会东一点西一点\n\n由于topic的知识，是需要通过扫描本地文件的，所以目前还是和工程放置在一起的。\n\n而posts的文章，是通过思源笔记来进行生成的\n\n得益于思源笔记开放的API，可以通过API将在笔记上写的文章，导出到对应的文件夹下，达到了共存。。\n\n代码大概是这样:\n\n```js\nconst fs = require('fs')\nconst fetch = require('isomorphic-fetch');\nconst param = (data) => {\n    return {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    }\n}\nconst getHead = ({title, date, tags}) => {\n    const formatDate = `${date.slice(0, 4)}-${date.slice(4, 6)}-${date.slice(6, 8)} ${date.slice(8, 10)}:${date.slice(10, 12)}  `;\n    return `---\\n` +\n        `title: ${title}\\n` +\n        `date: ${formatDate}\\n` +\n        `tags: [${tags}]\\n` +\n        `---\\n`\n}\nconst host = 'http://127.0.0.1:6806/api/'\n\nfunction getData(url, data) {\n    return fetch(host + url, param(data)).then(res => {\n        if (res.status >= 400) {\n            console.log(res);\n            const err = new Error('http server error');\n            err.res = res;\n            throw err;\n        }\n        return res.json();\n    })\n}\n\nfunction delDir(path) {\n    let files = [];\n    if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach((file, index) => {\n            let curPath = path + \"/\" + file;\n            if (fs.statSync(curPath).isDirectory()) {\n                delDir(curPath); //递归删除文件夹\n            } else {\n                fs.unlinkSync(curPath); //删除文件\n            }\n        });\n        fs.rmdirSync(path);\n    }\n}\n\nasync function getSiyuan({path, box}) {\n    delDir(path)\n    fs.mkdirSync(path)\n    const pathArray = path.split('/')\n    const json = await getData('query/sql', {stmt: `select * from blocks where box = '${box}' and type='d'`});\n    for (let i = 0; i < json.data.length; i++) {\n        const {id, content, created} = json.data[i];\n        const {data} = await getData('export/exportMdContent', {id});\n        if (!data.content.trim()) {\n            continue\n        }\n        const tags = data.hPath.split('/').filter(e => !pathArray.includes(e)).slice(0,-1)\n        console.log(content, tags)\n        const head = getHead({title: content, date: created, tags})\n        fs.writeFile(path + content + '.md', head + data.content, err => {\n            if (err) {\n                console.error(err)\n            }\n        })\n    }\n}\n\ntry {\n    getSiyuan({path: './content/posts/', box: '20220420112442-p6q6e8w'}).catch(e => {\n        console.log(e)\n    })\n} catch (e) {\n    console.log(e);\n}\n```\n\n这样就能将思源笔记中的文章，导出成markdown文档写入到项目中。。这样就不需要找额外的客户端来编写markdown，all in one\n\n## \n\n这样其实还有个缺陷，就是修改文档的时候需要重新生成，提交给github进行打包~~~\n\n目前此点无解，除非哪天思源提供了在线API的服务~~~\n\n利用graphql来生成文章，就避免了持续生成的烦恼~~~\n","field":{"slug":"/posts/兜兜转转，最后用Gastby重写了我的博客"},"frontmatter":{"title":"兜兜转转，最后用Gastby重写了我的博客","tags":[],"date":"2022-04-21","description":"6年前，我建立的自己的一个个人博客。最开始是采用WordPress进行构建，但是由于那个时候由于还是学生，可以通过腾讯云学生优惠拿到10块钱一个月的机器，勉强还算能玩。 随着，腾讯云优惠的结束，服务器开销着实承担不起，后面就尝试寻找在线博客..."}},"prev":{"frontmatter":{"title":"SpringCloud并发请求其他系统接口，导致链路追踪失效"},"field":{"slug":"/posts/SpringCloud并发请求其他系统接口，导致链路追踪失效"}},"next":{"frontmatter":{"title":"七牛云自定义处理图片"},"field":{"slug":"/posts/七牛云自定义处理图片"}}},"pageContext":{"slug":"/posts/兜兜转转，最后用Gastby重写了我的博客","prevSlug":"/posts/SpringCloud并发请求其他系统接口，导致链路追踪失效","nextSlug":"/posts/七牛云自定义处理图片"}},"staticQueryHashes":["1284643331","2841359383"]}