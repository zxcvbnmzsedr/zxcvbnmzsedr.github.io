{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Spring/在Spring2.4中使用NacosConfig","result":{"data":{"siYuan":{"excerpt":"在Spring2.4中使用NacosConfig 因为spring cloud alibaba没有进行升级，导致在spring2.4下，无法通过最新的方式引用配置文件。 心中甚是不爽，因此基于最新的配置规则，给nacos打了个布丁。 修改原...","raw":"# 在Spring2.4中使用NacosConfig\n\n因为spring cloud alibaba没有进行升级，导致在spring2.4下，无法通过最新的方式引用配置文件。\n\n心中甚是不爽，因此基于最新的配置规则，给nacos打了个布丁。\n\n# 修改原始配置文件\n\n将原本的工程的application.yml改成这样，重点是optional:nacos 后面的一定要是nacos\n\n别的就基本遵循nacos原本的配置就好了，该是啥样就啥样\n\n```yml\nspring:\n  cloud:\n    nacos:\n      server-addr: www.nacos.com:80\n      config:\n        shared-configs:\n          - data-id: ...\n        file-extension: yaml\n        namespace: ${spring.profiles.active}\n  config:\n    import: optional:nacos:${spring.cloud.nacos.server-addr}\n```\n\n# 新增spring.factories\n\n```properties\n文件位置在这里\nresources/\n   META-INF/\n      spring.factories\n# 自己在前面添加包名\norg.springframework.boot.context.config.ConfigDataLocationResolver=\\\nNacosConfigDataLocationResolver\n\norg.springframework.boot.context.config.ConfigDataLoader=\\\nNacosServerConfigDataLoader\n```\n\n# 创建对应的配置文件位置解析和配置文件夹在\n\n## NacosConfigDataLocationResolver.java\n\n```java\nimport com.alibaba.cloud.nacos.NacosConfigManager;\nimport com.alibaba.cloud.nacos.NacosConfigProperties;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.config.*;\nimport org.springframework.boot.context.properties.bind.BindHandler;\nimport org.springframework.boot.context.properties.bind.Bindable;\nimport org.springframework.boot.context.properties.bind.Binder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.env.StandardEnvironment;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class NacosConfigDataLocationResolver implements ConfigDataLocationResolver<NacosServerConfigDataResource>, Ordered {\n\n    /**\n     * 就这个是让配置文件找到这个解析器的核心字符串，千万不能写错了\n     */\n    public static final String PREFIX = \"nacos:\";\n\n    public NacosConfigDataLocationResolver() {\n\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public NacosConfigProperties nacosConfigProperties() {\n        return new NacosConfigProperties();\n    }\n\n    @Override\n    public int getOrder() {\n        return -1;\n    }\n\n    @Override\n    public boolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location) {\n        return location.hasPrefix(PREFIX);\n    }\n\n    @Override\n    public List<NacosServerConfigDataResource> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location) throws ConfigDataLocationNotFoundException, ConfigDataResourceNotFoundException {\n        return Collections.emptyList();\n    }\n\n    @Override\n    public List<NacosServerConfigDataResource> resolveProfileSpecific(ConfigDataLocationResolverContext context, ConfigDataLocation location, Profiles profiles) throws ConfigDataLocationNotFoundException {\n        String uris = location.getNonPrefixedValue(PREFIX);\n        final NacosConfigProperties properties = loadProperties(context);\n        properties.setServerAddr(uris);\n\n        return Collections.singletonList(new NacosServerConfigDataResource(new NacosConfigManager(properties)));\n    }\n\n    protected NacosConfigProperties loadProperties(ConfigDataLocationResolverContext context) {\n        Binder binder = context.getBinder();\n        BindHandler bindHandler = getBindHandler(context);\n        NacosConfigProperties configClientProperties = binder\n                .bind(NacosConfigProperties.PREFIX, Bindable.of(NacosConfigProperties.class), bindHandler)\n                .orElseGet(NacosConfigProperties::new);\n        configClientProperties.setEnvironment(new StandardEnvironment());\n        if (!StringUtils.hasText(configClientProperties.getName())) {\n            // default to spring.application.name if name isn't set\n            String applicationName = binder.bind(\"spring.application.name\", Bindable.of(String.class), bindHandler)\n                    .orElse(\"application\");\n            configClientProperties.setPrefix(applicationName);\n        }\n        return configClientProperties;\n    }\n\n    private BindHandler getBindHandler(ConfigDataLocationResolverContext context) {\n        return context.getBootstrapContext().getOrElse(BindHandler.class, null);\n    }\n}\n\n```\n\n## NacosServerConfigDataLoader.java\n\n```java\nimport com.alibaba.cloud.nacos.NacosConfigManager;\nimport com.alibaba.cloud.nacos.client.NacosPropertySourceLocator;\nimport org.springframework.boot.context.config.ConfigData;\nimport org.springframework.boot.context.config.ConfigDataLoader;\nimport org.springframework.boot.context.config.ConfigDataLoaderContext;\nimport org.springframework.boot.context.config.ConfigDataResourceNotFoundException;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.env.StandardEnvironment;\n\nimport java.util.Collections;\n\n\npublic class NacosServerConfigDataLoader implements ConfigDataLoader<NacosServerConfigDataResource> {\n\n\n    @Override\n    public ConfigData load(ConfigDataLoaderContext context, NacosServerConfigDataResource resource) throws ConfigDataResourceNotFoundException {\n        NacosConfigManager nacosConfigManager = resource.getNacosConfigManager();\n        final NacosPropertySourceLocator nacosPropertySourceLocator = new NacosPropertySourceLocator(nacosConfigManager);\n        final PropertySource<?> locate = nacosPropertySourceLocator.locate(new StandardEnvironment());\n        return new ConfigData(Collections.singletonList(locate));\n    }\n}\n\n```\n\n## NacosServerConfigDataResource.java\n\n```java\nimport com.alibaba.cloud.nacos.NacosConfigManager;\nimport org.springframework.boot.context.config.ConfigDataResource;\n\npublic class NacosServerConfigDataResource extends ConfigDataResource {\n    private NacosConfigManager nacosConfigManager;\n\n    public NacosServerConfigDataResource(NacosConfigManager nacosConfigManager) {\n        this.nacosConfigManager = nacosConfigManager;\n    }\n\n    public NacosConfigManager getNacosConfigManager() {\n        return nacosConfigManager;\n    }\n}\n\n```\n\n# 后续\n\n创建好这些文件，如果不出意外的话应该能够将工程运行起来\n\n主要核心就是继承 ConfigDataLocationResolver 和 ConfigDataLoader\n\nConfigDataLocationResolver 用于冷启动时，初始化各种参数，打包成一个ConfigDataResource交由给ConfigDataLoader使用\n\nConfigDataLoader则是通过ConfigDataResource进行配置文件的加载，加载到Environment中供应用程式使用\n","field":{"slug":"/posts/Spring/在Spring2.4中使用NacosConfig"},"frontmatter":{"title":"在Spring2.4中使用NacosConfig","tags":["Spring"],"date":"2022-04-21","description":"在Spring2.4中使用NacosConfig 因为spring cloud alibaba没有进行升级，导致在spring2.4下，无法通过最新的方式引用配置文件。 心中甚是不爽，因此基于最新的配置规则，给nacos打了个布丁。 修改原..."}},"prev":{"frontmatter":{"title":"spring24"},"field":{"slug":"/posts/Spring/spring24"}},"next":{"frontmatter":{"title":"七牛云自定义处理图片"},"field":{"slug":"/posts/七牛云自定义处理图片"}}},"pageContext":{"slug":"/posts/Spring/在Spring2.4中使用NacosConfig","prevSlug":"/posts/Spring/spring24","nextSlug":"/posts/七牛云自定义处理图片"}},"staticQueryHashes":["1284643331","2841359383"]}