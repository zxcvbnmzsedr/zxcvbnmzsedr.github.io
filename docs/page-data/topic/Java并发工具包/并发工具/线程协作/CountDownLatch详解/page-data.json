{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/Java并发工具包/并发工具/线程协作/CountDownLatch详解",
    "result": {"pageContext":{"id":"/topic/Java并发工具包/并发工具/线程协作/CountDownLatch详解","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"CountDownLatch详解"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"介绍"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"CountDownLatch是由AQS实现的，用来同步一个或多个任务的并发工具类。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"利用它可以实现类似计数器的功能，比如有一个任务A，它要等待其他4个任务执行完毕之后才能执行，此时就可以利用CountDownLatch来实现这种功能。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"就像下面的这个例子，主线程会阻塞到"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Thread-1"}]},{"type":"text","value":"、和"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Thread-2"}]},{"type":"text","value":"都执行完成之后，才能往下执行"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public class Test {\n    public static void main(String[] args) {\n        final CountDownLatch latch = new CountDownLatch(2);\n        new Thread() {\n            public void run() {\n                try {\n                    System.out.println(\"子线程\" + Thread.currentThread().getName() + \"正在执行\");\n                    Thread.sleep(3000);\n                    System.out.println(\"子线程\" + Thread.currentThread().getName() + \"执行完毕\");\n                    latch.countDown();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            };\n        }.start();\n        new Thread() {\n            public void run() {\n                try {\n                    System.out.println(\"子线程\" + Thread.currentThread().getName() + \"正在执行\");\n                    Thread.sleep(3000);\n                    System.out.println(\"子线程\" + Thread.currentThread().getName() + \"执行完毕\");\n                    latch.countDown();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            };\n        }.start();\n        try {\n            System.out.println(\"等待2个子线程执行完毕...\");\n            latch.await();\n            System.out.println(\"2个子线程已经执行完毕\");\n            System.out.println(\"继续执行主线程\");\n        } catch (InterruptedException e) { e.printStackTrace();   }    }}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"输出结果:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"等待2个子线程执行完毕...\n子线程Thread-1正在执行\n子线程Thread-0正在执行\n子线程Thread-0执行完毕\n子线程Thread-1执行完毕\n2个子线程已经执行完毕\n继续执行主线程\n"}]}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"CountDownLatch详解","slug":"countdownlatch详解"},{"depth":2,"value":"介绍","slug":"介绍"}]}},
    "staticQueryHashes": ["928362550"]}