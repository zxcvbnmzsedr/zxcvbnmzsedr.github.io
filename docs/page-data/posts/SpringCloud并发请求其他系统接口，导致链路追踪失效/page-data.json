{
    "componentChunkName": "component---src-templates-article-page-template-tsx",
    "path": "/posts/SpringCloud并发请求其他系统接口，导致链路追踪失效",
    "result": {"pageContext":{"id":"/posts/SpringCloud并发请求其他系统接口，导致链路追踪失效","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"SpringCloud并发请求其他系统接口，导致链路追踪失效"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在有一次使用线程池调用feign接口请求下游接口，下游接口拿不到系统的spanId和traceId，导致多线程下的链路追踪就不起作用，以致于难以排查问题"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"分析"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于项目中重写了"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Feigin"}]},{"type":"text","value":"中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RequestInterceptor"}]},{"type":"text","value":"，在重写方法中会通过"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RequestContextHolder"}]},{"type":"text","value":"提取header头做了一些对应的属性设置，在多线程开启的子线程下 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RequestContextHolder"}]},{"type":"text","value":" 拿到的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"request"}]},{"type":"text","value":"是null，应该是这边导致的问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"原理分析"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RequestContextHolder"}]},{"type":"text","value":"是"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Spring-Web"}]},{"type":"text","value":"提供，用于方便的获取当前请求的信息。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其内部中有两个ThreadLocal，一个是用于当前线程的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"requestAttributesHolder"}]},{"type":"text","value":"，另一个是作用于子线程的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableRequestAttributesHolder"}]},{"type":"text","value":"，在不做任何设置的情况下，是通过当前线程的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"requestAttributesHolder"}]},{"type":"text","value":"来存储对象的."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public abstract class RequestContextHolder  {\n\tprivate static final ThreadLocal<RequestAttributes> requestAttributesHolder =\n\t\t\tnew NamedThreadLocal<>(\"Request attributes\");\n\n\tprivate static final ThreadLocal<RequestAttributes> inheritableRequestAttributesHolder =\n\t\t\tnew NamedInheritableThreadLocal<>(\"Request context\");\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Spring-Web"}]},{"type":"text","value":"的实现中，是在"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"FrameworkServlet#processRequest"}]},{"type":"text","value":"中，在进入请求处理之前，会将"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Request"}]},{"type":"text","value":"的信息设置到"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"requestAttributesHolder"}]},{"type":"text","value":"中去"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"protected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n​\n   RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n   ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n​\n   initContextHolders(request, localeContext, requestAttributes);\n​\n   try {\n      doService(request, response);\n   }\n}\n​\nprivate void initContextHolders(HttpServletRequest request,\n      @Nullable LocaleContext localeContext, @Nullable RequestAttributes requestAttributes) {\n​\n    if (requestAttributes != null) {\n      RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);\n    }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在从"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RequestContextHolder"}]},{"type":"text","value":"中取出数据的时候，则会从"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"requestAttributesHolder"}]},{"type":"text","value":"中取，如果取不到则会从"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableRequestAttributesHolder"}]},{"type":"text","value":"取。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public static RequestAttributes getRequestAttributes() {\n\tRequestAttributes attributes = requestAttributesHolder.get();\n\tif (attributes == null) {\n\t\tattributes = inheritableRequestAttributesHolder.get();\n\t}\n\treturn attributes;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"解决方案"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"修改"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ServletRegistrationBean"}]},{"type":"text","value":"配置"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们可以通过设置"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"threadContextInheritable"}]},{"type":"text","value":"来修改存储位置，存储到"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableRequestAttributesHolder"}]},{"type":"text","value":"中"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":" @Bean\n    public ServletRegistrationBean apiServlet(DispatcherServlet dispatcherServlet) {\n\t// 设置到子线程\n        dispatcherServlet.setThreadContextInheritable(true);\n        ServletRegistrationBean bean = new ServletRegistrationBean(dispatcherServlet);\n        return bean;\n    }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"新开子线程之前手动设置子线程共享"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"ServletRequestAttributes sra = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\nRequestContextHolder.setRequestAttributes(sra, true);\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"InheritableThreadLocal是怎么做到主子线程共享的"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InheritableThreadLocal"}]},{"type":"text","value":"是在创建"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Thread"}]},{"type":"text","value":"的时候初始化进去的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"来看"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Thread"}]},{"type":"text","value":"构造方法:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public Thread() {\n    this(null, null, \"Thread-\" + nextThreadNum(), 0);\n}\n\npublic Thread(ThreadGroup group, Runnable target, String name,\n                  long stackSize) {\n    this(group, target, name, stackSize, null, true);\n}\n\nprivate Thread(ThreadGroup g, Runnable target, String name,\n                   long stackSize, AccessControlContext acc,\n                   boolean inheritThreadLocals) {\n     ......\n    Thread parent = currentThread();\n    if (inheritThreadLocals && parent.inheritableThreadLocals != null)\n            this.inheritableThreadLocals =\n                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n     ......\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"最后在创建"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Thread"}]},{"type":"text","value":" 的时候，会调用一个带"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritThreadLocals"}]},{"type":"text","value":"标记的构造方法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritThreadLocals"}]},{"type":"text","value":"为true，并且当前线程"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableThreadLocals"}]},{"type":"text","value":"不为空，就将"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableThreadLocals"}]},{"type":"text","value":"设置成父类的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableThreadLocals"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"继续点进去看:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":" private ThreadLocalMap(ThreadLocalMap parentMap) {\n            Entry[] parentTable = parentMap.table;\n            int len = parentTable.length;\n            setThreshold(len);\n            table = new Entry[len];\n\n            for (Entry e : parentTable) {\n                if (e != null) {\n                    @SuppressWarnings(\"unchecked\")\n                    ThreadLocal<Object> key = (ThreadLocal<Object>) e.get();\n                    if (key != null) {\n                        Object value = key.childValue(e.value);\n                        Entry c = new Entry(key, value);\n                        int h = key.threadLocalHashCode & (len - 1);\n                        while (table[h] != null)\n                            h = nextIndex(h, len);\n                        table[h] = c;\n                        size++;\n                    }\n                }\n            }\n        }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"就是通过"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ThreadLocalMap"}]},{"type":"text","value":"的构造方法，将父类的值一个一个拷贝到子线程中,然后新创建的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"inheritableThreadLocals"}]},{"type":"text","value":"就有了值，我们也就能通过这个对象，将父线程的值给拿过来了，自然也就完成了主子线程的传递"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"SpringCloud并发请求其他系统接口，导致链路追踪失效","slug":"springcloud并发请求其他系统接口导致链路追踪失效"},{"depth":2,"value":"分析","slug":"分析"},{"depth":2,"value":"原理分析","slug":"原理分析-2"},{"depth":2,"value":"解决方案","slug":"解决方案-2"},{"depth":3,"value":"修改ServletRegistrationBean配置","slug":"修改servletregistrationbean配置"},{"depth":3,"value":"新开子线程之前手动设置子线程共享","slug":"新开子线程之前手动设置子线程共享"},{"depth":1,"value":"InheritableThreadLocal是怎么做到主子线程共享的","slug":"inheritablethreadlocal是怎么做到主子线程共享的"}]}},
    "staticQueryHashes": ["928362550"]}