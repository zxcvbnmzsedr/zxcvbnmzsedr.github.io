{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/Java并发工具包/并发工具/线程池/创建线程池的参数",
    "result": {"pageContext":{"id":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"创建线程池的参数"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在Java中创建线程都是通过一个ThreadPoolExecutor对象来进行创建的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ThreadPoolExecutor类最多有5个构造函数，用于创建不同特性的线程池"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"参数列表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"|参数名|含义|\n| :-------------: | :------------------------: |\n|corePoolSize|核心线程数|\n|maximumPoolSize|最大线程数|\n|keepAliveTime|空闲线程存活时长|\n|unit|空闲线程存活时间单位|\n|workQueue|用于存放任务的队列|\n|threadFactory|线程工厂，用于来创建新线程|\n|handler|处理被拒绝的任务|"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"创建时机"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%97%B6%E6%9C%BA.png","alt":"线程池创建线程的时机"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在最大线程创建出来之后，回去判断线程的存活时间，如果存活时间大于所设定的值，则会将这些创建出来的回收"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"线程工厂ThreadFactory"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"hreadFactory 实际上是一个线程工厂，它的作用是生产线程以便执行任务。我们可以选择使用默认的线程工厂，创建的线程都会在同一个线程组，并拥有一样的优先级，且都不是守护线程，我们也可以选择自己定制线程工厂，以方便给线程自定义命名，不同的线程池内的线程通常会根据具体业务来定制不同的线程名。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"默认的线程工厂:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"private static class DefaultThreadFactory implements ThreadFactory {\n        private static final AtomicInteger poolNumber = new AtomicInteger(1);\n        private final ThreadGroup group;\n        private final AtomicInteger threadNumber = new AtomicInteger(1);\n        private final String namePrefix;\n\n        DefaultThreadFactory() {\n            SecurityManager s = System.getSecurityManager();\n            group = (s != null) ? s.getThreadGroup() :\n                                  Thread.currentThread().getThreadGroup();\n            namePrefix = \"pool-\" +\n                          poolNumber.getAndIncrement() +\n                         \"-thread-\";\n        }\n\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(group, r,\n                                  namePrefix + threadNumber.getAndIncrement(),\n                                  0);\n            if (t.isDaemon())\n                t.setDaemon(false);\n            if (t.getPriority() != Thread.NORM_PRIORITY)\n                t.setPriority(Thread.NORM_PRIORITY);\n            return t;\n        }\n    }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"工作队列WorkQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用于存放任务的队列列表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"线程的不同的特性，就是通过这个存放任务的列表来实现的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"|线程池|实现队列|特性|\n| :--------------------------------------------------: | :-----------------: | ----------------------------------------------------------------------------------|\n|FixedThreadPool|LinkedBlockingQueue|没有额外线程，只存在核心线程，而且核心线程没有超时机制，而且任务队列没有长度的限制|\n|SingleThreadExecutor|LinkedBlockingQueue|内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。|\n|CachedThreadPool|SynchronousQueue|只有非核心线程，并且其最大线程数为Integer.MAX_VALUE|\n|ScheduledThreadPool"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"SingleThreadScheduledExecutor|DelayedWorkQueue|按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构|"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"看下面ThreadPool的结构，workQueue就是用来存放添加的任务，然后交由给不同的线程去执行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/ThreadPool%E7%BB%93%E6%9E%84.png","alt":"ThreadPool结构"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"拒绝策略Handler"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用于处理核心线程满、队列满、最大线程满了之后，现在添加不进去之后的策略。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/CgotOV3g0WWAVWVlAAEsBI6lEEA162.png","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"DiscardPolicy"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当新任务提交之后会被直接丢弃，也不会有任何的通知，相对而言存在一定的风险，因为在提交的时候并不知道线程会被丢弃，会存在数据丢失的风险"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"       /**\n         * Does nothing, which has the effect of discarding task r.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         */\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"DiscardOldestPolicy"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"丢弃任务队列中的头结点，通常是存活时间最长的任务，这种策略与DiscardPolicy不同之处在于它丢弃的不是最新提交的，而是队列中存活时间最长的，这样就可以腾出空间给新提交的任务，但同理它也存在一定的数据丢失风险。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"        /**\n         * Obtains and ignores the next task that the executor\n         * would otherwise execute, if one is immediately available,\n         * and then retries execution of task r, unless the executor\n         * is shut down, in which case task r is instead discarded.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         */\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                e.getQueue().poll();\n                e.execute(r);\n            }\n        }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"CallerRunsPolicy"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当触发拒绝策略时，只要线程池没有关闭，就由提交任务的当前线程处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"        /**\n         * Executes task r in the caller's thread, unless the executor\n         * has been shut down, in which case the task is discarded.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         */\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            if (!e.isShutdown()) {\n                r.run();\n            }\n        }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"AbortPolicy"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当任务提交到这里，会抛出RejectedExecutionException异常"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"        /**\n         * Always throws RejectedExecutionException.\n         *\n         * @param r the runnable task requested to be executed\n         * @param e the executor attempting to execute this task\n         * @throws RejectedExecutionException always\n         */\n        public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n            throw new RejectedExecutionException(\"Task \" + r.toString() +\n                                                 \" rejected from \" +\n                                                 e.toString());\n        }\n"}]}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"创建线程池的参数","slug":"创建线程池的参数"},{"depth":2,"value":"参数列表","slug":"参数列表"},{"depth":2,"value":"创建时机","slug":"创建时机"},{"depth":2,"value":"线程工厂ThreadFactory","slug":"线程工厂threadfactory"},{"depth":2,"value":"工作队列WorkQueue","slug":"工作队列workqueue"},{"depth":2,"value":"拒绝策略Handler","slug":"拒绝策略handler"},{"depth":3,"value":"DiscardPolicy","slug":"discardpolicy"},{"depth":3,"value":"DiscardOldestPolicy","slug":"discardoldestpolicy"},{"depth":3,"value":"CallerRunsPolicy","slug":"callerrunspolicy"},{"depth":3,"value":"AbortPolicy","slug":"abortpolicy"}]}},
    "staticQueryHashes": ["928362550"]}