{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Nginx泛解析反向代理多个服务","result":{"data":{"siYuan":{"excerpt":"Nginx泛解析反向代理多个服务 还是因为我的软路由，上面挂载了多个服务，如果要挨个配置各个服务的反向代理，不还得疯掉。 所以需要一个通用的方式进行处理。 首先通过Nginx获取到所有泛解析的二级子域名 提取出子域名之后，匹配好定义的ups...","raw":"# Nginx泛解析反向代理多个服务\n\n还是因为我的软路由，上面挂载了多个服务，如果要挨个配置各个服务的反向代理，不还得疯掉。\n\n所以需要一个通用的方式进行处理。\n\n1. 首先通过Nginx获取到所有泛解析的二级子域名\n2. 提取出子域名之后，匹配好定义的upstream\n3. 进行转发\n\n脚本如下：\n\n```nginx\n\nhttp {\n    client_max_body_size 204800M;\n    upstream note {\n        server 192.168.31.10:6806;\n    }\n    upstream omv {\n        server 192.168.31.10:80;\n    }\n    upstream qbt {\n\t\tserver 192.168.31.10:8082;\n    }\n    upstream webdav {\n        server 192.168.31.10:8080;\n    }\n    upstream openwrt {\n        server 192.168.31.3:80;\n    }\n\nserver {\n\tlisten 2095;\n\tlisten [::]:2095;\n\tserver_name map.shiyitopo.tech;\n\troot /home/nginx/map_html;\n\tlocation / {\n\t\ttry_files $uri $uri/ @router;\n\t\tindex  index.html index.htm;\n\t}\n\tlocation @router {\n\t\trewrite ^.*$ /index.html last;\n\t}\n}\nserver {\n\tlisten [::]:2095;\n\tlisten 2095;\n\tserver_name ~^(?<subdomain>.+).shiyitopo.tech$;\n\tlocation / {\n\t\tproxy_pass http://$subdomain;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Host $subdomain;\n\t\tproxy_set_header   X-Forwarded-Host   $http_host;\n\t\tproxy_set_header   X-Forwarded-For    $remote_addr;\n\n\t}\n}  \n}\n```\n\n监听泛解析的域名，提取出二级域名之后，就用proxy_pass反向代理过去就行。\n\n这样就不需要有新的服务就建立一个server了，只需要定义好upstream的后端地址就可以了。\n","field":{"slug":"/posts/Nginx泛解析反向代理多个服务"},"frontmatter":{"title":"Nginx泛解析反向代理多个服务","tags":["软路由"],"date":"2022-06-16","description":"Nginx泛解析反向代理多个服务 还是因为我的软路由，上面挂载了多个服务，如果要挨个配置各个服务的反向代理，不还得疯掉。 所以需要一个通用的方式进行处理。 首先通过Nginx获取到所有泛解析的二级子域名 提取出子域名之后，匹配好定义的ups..."}},"prev":null,"next":{"frontmatter":{"title":"用ffmpeg从webm提取mp3"},"field":{"slug":"/posts/用ffmpeg从webm提取mp3"}}},"pageContext":{"slug":"/posts/Nginx泛解析反向代理多个服务","prevSlug":null,"nextSlug":"/posts/用ffmpeg从webm提取mp3"}},"staticQueryHashes":["1284643331","2841359383"]}