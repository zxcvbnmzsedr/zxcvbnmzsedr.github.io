{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式",
    "result": {"pageContext":{"id":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Thread的实现方式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"实现Runable接口"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"实现Runable接口"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"实现run方法"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"然后通过实现了Runable的实例传递到Thread中，就能实现线程"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public RunableThread implements Runable {\n  @Override\n  public void run(){\n    System.out.println(\"实现Runable接口来实现线程\");\n  }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"直接继承Thread"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public ExtentsThread extend Threaad {\n\t @Override\n  public void run(){\n    System.out.println(\"用Thread类实现线程\");\n  }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"用线程池创建线程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"会给我们线程创建设置一些默认的值，比如名字，是不是守护线程，以及优先级"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"private static class DefaultThreadFactory implements ThreadFactory {\n    ....\n    ....\n    DefaultThreadFactory() {\n        SecurityManager s = System.getSecurityManager();\n        group = (s != null) ? s.getThreadGroup() :\n                              Thread.currentThread().getThreadGroup();\n        namePrefix = \"pool-\" +\n                      poolNumber.getAndIncrement() +\n                     \"-thread-\";\n    }\n\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(group, r,\n                              namePrefix + threadNumber.getAndIncrement(),\n                              0);\n        if (t.isDaemon())\n            t.setDaemon(false);\n        if (t.getPriority() != Thread.NORM_PRIORITY)\n            t.setPriority(Thread.NORM_PRIORITY);\n        return t;\n    }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"使用Callable方式创建"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有返回值的callable也是新建线程的一种方式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"\t\tpublic class CallableTask implements Callable<Integer> {\n      \t@Override\n       \tpublic Integer call() throw Exception {\n          \treturn new Random().nextInt();\n        }\n    }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"使用Timer"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TimerTask实现了Runable的接口，Timer中有个TimerThread继承了Thread，本质他还是Thread"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"本质?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thread的实现的方式从本质上来看只有一种。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"来看下Thread的run是如何实现的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"    .......\n\t\tprivate Runnable target;\t\t\n    @Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n\t\t.....\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"方式1: 最终调用target.run() 方法"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"方式2: 整个run方法被重写"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因此，创建线程只有一种方法："},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"构造Thread类"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实现方式有两种:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用Runable的方式，最后调用target.run方法进行启动"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"直接继承Thread类，重写run方法"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"Thread的实现方式","slug":"thread的实现方式"},{"depth":2,"value":"实现Runable接口","slug":"实现runable接口"},{"depth":2,"value":"直接继承Thread","slug":"直接继承thread"},{"depth":2,"value":"用线程池创建线程","slug":"用线程池创建线程"},{"depth":2,"value":"使用Callable方式创建","slug":"使用callable方式创建"},{"depth":2,"value":"使用Timer","slug":"使用timer"},{"depth":2,"value":"本质?","slug":"本质"}]}},
    "staticQueryHashes": ["928362550"]}