(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{375:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"处理jackson反序列化问题-cannot-deserialize-instance-of-java-lang-integer-out-of-value-false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理jackson反序列化问题-cannot-deserialize-instance-of-java-lang-integer-out-of-value-false"}},[t._v("#")]),t._v(" 处理Jackson反序列化问题：Cannot deserialize instance of java.lang.Integer out of VALUE_FALSE")]),t._v(" "),a("p",[t._v('在使用Jackson库进行Java对象的JSON反序列化时，有时候可能会遇到错误消息："Cannot deserialize instance of '),a("code",[t._v("java.lang.Integer")]),t._v('​ out of VALUE_FALSE"。这通常是因为Jackson期望一个整数值，但实际上遇到了布尔值'),a("code",[t._v("false")]),t._v("​。")]),t._v(" "),a("h2",{attrs:{id:"可能的原因和解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可能的原因和解决方案"}},[t._v("#")]),t._v(" 可能的原因和解决方案：")]),t._v(" "),a("h3",{attrs:{id:"_1-类型不匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型不匹配"}},[t._v("#")]),t._v(" 1. 类型不匹配")]),t._v(" "),a("p",[t._v("确保你要反序列化的Java类中，与出现问题的字段对应的类型是"),a("code",[t._v("Integer")]),t._v("​（或"),a("code",[t._v("int")]),t._v("​），而不是"),a("code",[t._v("Boolean")]),t._v("​（或"),a("code",[t._v("boolean")]),t._v("​）。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" class MyData {\n    private "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" myNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Getter和Setter方法")]),t._v("\n}\n")])])]),a("h3",{attrs:{id:"_2-json数据不匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-json数据不匹配"}},[t._v("#")]),t._v(" 2. JSON数据不匹配")]),t._v(" "),a("p",[t._v("确保要反序列化的JSON数据符合期望的格式。例如，如果期望一个整数值，确保JSON字段表示为数字，而不是布尔值。")]),t._v(" "),a("p",[t._v("如果JSON数据不在你的控制范围内，可能需要在反序列化逻辑中显式处理这些情况。")]),t._v(" "),a("h3",{attrs:{id:"_3-自定义反序列化逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-自定义反序列化逻辑"}},[t._v("#")]),t._v(" 3. 自定义反序列化逻辑")]),t._v(" "),a("p",[t._v("如果需要处理JSON中可能包含布尔值但你想将它们转换为整数的情况，可以使用自定义反序列化器。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" class MyData {\n    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@JsonDeserialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" CustomIntegerDeserializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    private "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" myNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Getter和Setter方法")]),t._v("\n}\n")])])]),a("p",[t._v("或者注册成统一的序列化规则：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" static ObjectMapper defaultMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {\n        final ObjectMapper om "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new ObjectMapper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        SimpleModule module "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new SimpleModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addDeserializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" new CustomIntegerDeserializer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        om"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("registerModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" om"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    }\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 自定义Integer反序列化器\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" static class CustomIntegerDeserializer extends JsonDeserializer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" {\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@Override")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),t._v(" deserialize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JsonParser p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" DeserializationContext ctxt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" throws IOException {\n            JsonNode node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("readValueAsTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isBoolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asBoolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ? "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" : "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            } "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            } "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isTextual"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" {\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parseInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            } "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" {\n                throw new IllegalArgumentException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Unexpected JSON node type for integer: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getNodeType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            }\n        }\n    }\n")])])]),a("p",[t._v("以上示例假设如果遇到布尔值，将其转换为"),a("code",[t._v("1")]),t._v("​表示"),a("code",[t._v("true")]),t._v("​，"),a("code",[t._v("0")]),t._v("​表示"),a("code",[t._v("false")]),t._v("​。根据实际需求调整逻辑。")]),t._v(" "),a("p",[t._v('通过采取这些措施，你应该能够解决"Cannot deserialize instance of '),a("code",[t._v("java.lang.Integer")]),t._v('​ out of VALUE_FALSE"的问题。')]),t._v(" "),a("p",[t._v("记得在处理JSON数据时，保持Java类与JSON数据格式的一致性是至关重要的")])])}),[],!1,null,null,null);a.default=e.exports}}]);