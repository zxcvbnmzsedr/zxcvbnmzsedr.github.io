{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/redis/Redis集群/Redis数据淘汰策略",
    "result": {"pageContext":{"id":"/topic/redis/Redis集群/Redis数据淘汰策略","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Redis数据淘汰策略"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Redis将数据存储在内存中，但是内存有限，当存储的数据超过内存容量时，需要对缓存的数据进行剔除。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"淘汰算法一般有以下几种"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"FIFO: 淘汰最早数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"LRU: 剔除最近最少使用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"LFU: 剔除最近使用频率最低的数据"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Redis的内存淘汰策略，有以下几种"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"noeviction:"}]},{"type":"text","value":" (默认策略) 返回错误。当内存达到限制，客户端尝试执行的命令（大部分的写入指令，但DEL和几个例外）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"allkeys-lru:"}]},{"type":"text","value":" 尝试回收最少使用的键（LRU）（适用所有缓存数据，不管是否设置过期时间）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"volatile-lru:"}]},{"type":"text","value":" 尝试回收最少使用的键（LRU），（仅限于在过期集合的键）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"allkeys-random:"}]},{"type":"text","value":" 随机回收数据（适用所有缓存数据，不管是否设置过期时间）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"volatile-random:"}]},{"type":"text","value":" 随机回收数据（仅限于在过期集合的键）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"volatile-ttl:"}]},{"type":"text","value":" 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个题你说它的考点是什么？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"考的就是淘汰策略呀，同志们，只是方式比较隐晦而已。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们先指定淘汰策略为 allkeys-lru 或者 volatile-lru，然后再计算一下 100w 数据大概占用多少内存，根据算出来的内存，限定 Redis 占用的内存。"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"Redis数据淘汰策略","slug":"redis数据淘汰策略"},{"depth":2,"value":"Redis的内存淘汰策略，有以下几种","slug":"redis的内存淘汰策略有以下几种"},{"depth":2,"value":"数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据","slug":"数据库中有-3000w-的数据而-redis-中只有-100w-数据如何保证-redis-中存放的都是热点数据"}]}},
    "staticQueryHashes": ["928362550"]}