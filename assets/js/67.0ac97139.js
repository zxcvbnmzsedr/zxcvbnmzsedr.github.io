(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{395:function(e,a,t){"use strict";t.r(a);var s=t(7),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"k8s入门到放弃-初始化节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#k8s入门到放弃-初始化节点"}},[e._v("#")]),e._v(" K8S入门到放弃 —— 初始化节点")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("title: 'K8S入门到放弃 —— 初始化节点'\ndate: 2021-06-02 13:40:09\ntags: [K8S]\npublished: true\nhideInList: false\nfeature:\nisTop: false")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("执行下面操作之前先执行"),a("RouterLink",{attrs:{to:"/post/k8s-ru-men-dao-fang-qi-qian-zhi-huan-jing-zhun-bei/"}},[e._v("前置环境")])],1),e._v(" "),a("h1",{attrs:{id:"初始化master节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化master节点"}},[e._v("#")]),e._v(" 初始化master节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('hostnamectl set-hostname master1\n# 只在第一个 master 节点执行\n# 替换 apiserver.demo 为 您想要的 dnsName\nexport APISERVER_NAME=apiserver.demo\n# Kubernetes 容器组所在的网段，该网段安装完成后，由 kubernetes 创建，事先并不存在于您的物理网络中\nexport POD_SUBNET=10.100.0.1/16\necho "127.0.0.1    ${APISERVER_NAME}" >> /etc/hosts\n\ncat <<EOF > ./kubeadm-config.yaml\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.16.2\nimageRepository: registry.aliyuncs.com/google_containers\ncontrolPlaneEndpoint: "${APISERVER_NAME}:6443"\nnetworking:\n  serviceSubnet: "10.96.0.0/16"\n  podSubnet: "${POD_SUBNET}"\n  dnsDomain: "cluster.local"\nEOF\n\n# kubeadm init\nkubeadm init --config=kubeadm-config.yaml --upload-certs\n\n# 配置 kubectl\nrm -rf /root/.kube/\nmkdir /root/.kube/\ncp -i /etc/kubernetes/admin.conf /root/.kube/config\n')])])]),a("h2",{attrs:{id:"初始化完成后安装网络插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化完成后安装网络插件"}},[e._v("#")]),e._v(" 初始化完成后安装网络插件")]),e._v(" "),a("p",[e._v("只有安装网络插件之后，pod直接才能够正常进行通讯")]),e._v(" "),a("h3",{attrs:{id:"安装calico插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装calico插件"}},[e._v("#")]),e._v(" 安装calico插件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 要是服务器上网络不好，从本地下载下来传上去也行\ncurl https://docs.projectcalico.org/manifests/calico.yaml -O\n# calico默认子网是192.168.0.0，需要替换成自己设置的子网，这步非常重要！！！\nsed -i "s#192\\.168\\.0\\.0/16#${POD_SUBNET}#" calico.yaml \nkubectl apply -f calico.yaml \n')])])]),a("h1",{attrs:{id:"加入第二master个节点做高可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加入第二master个节点做高可用"}},[e._v("#")]),e._v(" 加入第二master个节点做高可用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# 执行master安装完成后打印出来的代码\n# 替换 x.x.x.x 为 ApiServer LoadBalancer 的 IP 地址\nexport APISERVER_IP=x.x.x.x\n# 替换 apiserver.demo 为 前面已经使用的 dnsName\nexport APISERVER_NAME=apiserver.demo\necho "${APISERVER_IP}    ${APISERVER_NAME}" >> /etc/hosts\n\n  kubeadm join apiserver.k8s:6443 --token 4z3r2v.2p43g28ons3b475v \\\n    --discovery-token-ca-cert-hash sha256:959569cbaaf0cf3fad744f8bd8b798ea9e11eb1e568c15825355879cf4cdc5d6 \\\n    --control-plane --certificate-key 41a741533a038a936759aff43b5680f0e8c41375614a873ea49fde8944614dd6\n\n')])])]),a("p",[e._v("如果显示过期了，则重新生成token进行请求")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 生成证书\nkubeadm init phase upload-certs --upload-certs\n# 生成加入命令\nkubeadm token create --print-join-command\n\n# 最后拼接出来就大概是这样\nkubeadm join apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303\n--control-plane --certificate-key  $证书\n")])])]),a("h1",{attrs:{id:"初始化worker节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化worker节点"}},[e._v("#")]),e._v(" 初始化worker节点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('hostnamectl set-hostname node1\n# 如果dns能解析到APISERVER_NAME的域名，则不需要写入到hosts中\nexport MASTER_IP=x.x.x.x\n# 替换 apiserver.demo 为初始化 master 节点时所使用的 APISERVER_NAME\nexport APISERVER_NAME=apiserver.demo\necho "${MASTER_IP}    ${APISERVER_NAME}" >> /etc/hosts\n\n# 替换为前面 kubeadm token create --print-join-command 的输出结果,如果过期了就再执行一下\nkubeadm join apiserver.demo:6443 --token mpfjma.4vjjg8flqihor4vt     --discovery-token-ca-cert-hash sha256:6f7a8e40a810323672de5eee6f4d19aa2dbdb38411845a1bf5dd63485c43d303\n')])])]),a("p",[e._v("正常情况下，这个时候能够可以在master节点上通过下面这个命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubectl get nodes\n")])])]),a("p",[e._v("获取到对应的节点信息以及状态")])])}),[],!1,null,null,null);a.default=n.exports}}]);