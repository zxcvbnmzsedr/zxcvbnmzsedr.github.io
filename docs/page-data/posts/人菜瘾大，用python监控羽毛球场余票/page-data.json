{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/人菜瘾大，用python监控羽毛球场余票","result":{"data":{"siYuan":{"excerpt":"人菜瘾大，用python监控羽毛球场余票 人到中年，迷上了羽毛球，苦于所住的地方周边球场着实火爆，票出秒没。 有必要通过一些技术手段，扒拉出余票数，将有票的场地给提取出来，发送通知到手机上。 因为球场都是下单减库存的，所以为了尽快实现这套逻...","raw":"# 人菜瘾大，用python监控羽毛球场余票\n\n![](https://image.ztianzeng.com/uPic/20220512111453.png)\n\n人到中年，迷上了羽毛球，苦于所住的地方周边球场着实火爆，票出秒没。\n\n有必要通过一些技术手段，扒拉出余票数，将有票的场地给提取出来，发送通知到手机上。\n\n因为球场都是下单减库存的，所以为了尽快实现这套逻辑则不去对接支付相关的东西，通过及时通知到手机上手动下单。\n\n代码是这样：\n\n```python\nimport time\nfrom threading import Timer\n\nimport requests\n\nproductDetail = \"\"\n\nid1 = 7\n\n\n\ndef getDay(id, date):\n    # 先转换为时间数组\n    timeArray = time.strptime(date, \"%Y-%m-%d %H:%M:%S\")\n    # 转换为时间戳\n    timeStamp = int(time.mktime(timeArray))\n    href = productDetail % (id, timeStamp)\n    response = requests.get(href)\n    return parseDayJSON(response.json())\n\n\ndef parseDayJSON(dayJson):\n    table_data = dayJson['data']['table_data']\n    playground = {}\n    for x in table_data:\n        for y in x:\n            if y['hall_name'] not in playground:\n                playground[y['hall_name']] = []\n            if y['used'] == 0:\n                playground[y['hall_name']].append(\n                    {\n                        'start': y['start'],\n                        'end': y['end'],\n                        'price': y['price'],\n\n                    }\n                )\n    playgroundNew = {}\n    for site in playground:\n        if site not in playgroundNew:\n            playgroundNew[site] = []\n        siteTime = playground[site]\n        if len(siteTime) > 0:\n            playgroundNew[site] = merge(siteTime)\n    return analyze(playgroundNew)\n\n\ndef analyze(playground):\n    count = 0\n    consumingDict = {}\n    oneHour = 0\n    twoHour = 0\n    for site in playground:\n        if len(playground[site]) > 0:\n            count = count + 1\n        consuming = 0\n        price = 0\n        for siteTime in playground[site]:\n            price += siteTime['price']\n            consuming = int(siteTime['end'].split(':')[0]) - int(siteTime['start'].split(':')[0])\n            if siteTime['price'] >= 200:\n                consuming = 0\n        consumingDict[consuming] = consumingDict.get(consuming, 0) + 1\n        if consuming == 1:\n            oneHour = oneHour + 1\n        if consuming > 1:\n            twoHour = twoHour + 1\n    print(f'发现 {count} 片场地，一小时: {oneHour} 片 一小时以上: {twoHour} 片  晚上有 {count - oneHour - twoHour} 片')\n    night = count - oneHour - twoHour\n    return {\n        'count': count,\n        'oneHour': oneHour,\n        'twoHour': twoHour,\n        'night': night,\n        'playground': playground\n    }\n\n\ndef merge(intervals):\n    # 目标区间索引值\n    target_idx = 0\n    # 开始选取候选区间，和目标区间进行对比\n    for i in range(1, len(intervals)):\n        # 候选区间的开始值小于等于目标区间的结束值，则说明两区间有重合部分\n        if intervals[i]['start'] == intervals[target_idx]['end']:\n            intervals[target_idx]['end'] = intervals[i]['end']\n            intervals[target_idx]['occupy'] = intervals[target_idx].get('occupy', 1) + 1\n            intervals[i] = []\n        # 否则，两区间不重合\n        else:\n            # 更新目标区间索引值（设置新的目标区间为当前的候选区间）\n            intervals[target_idx]['occupy'] = intervals[target_idx].get('occupy', 1)\n            target_idx = i\n    # 返回原数组集合中不为空数组的集合\n    return [interval for interval in intervals if interval]\n\n\ndef notify(content):\n    if content:\n        requests.get(f'https://api.day.app/xxxxxxxxxxxx/{content}')\n\n\ndef getNotifyContent(name, data):\n    count = data['count']\n    oneHour = data['oneHour']\n    twoHour = data['twoHour']\n    night = data['night'],\n    playground = data['playground']\n    if twoHour == 0:\n        return None\n    return f'{name} \\n ' \\\n           f'发现 {count} 片场地 \\n ' \\\n           f'一小时: {oneHour} 片 ' \\\n           f'一小时以上: {twoHour} 片 ' \\\n           f'晚上有 {night} 片'\n\n\ndef monitor():\n    day = '2022-05-15 00:00:00'\n    场地 = getDay(id1, day)\n    content = getNotifyContent('场地', 场地)\n    notify(content)\n    print('--------------------------------------------------------------\\n')\n\n    Timer(600, monitor).start()\n\n\nif __name__ == '__main__':\n    sTimer = Timer(600, monitor)\n    sTimer.start()\n    # monitor()\n```\n\n每间隔10分钟，启动一次。\n\n发现2小时以上的连续场地，就发送通知。。。\n\n\n目前已经抢到了周日的票，完美\n","field":{"slug":"/posts/人菜瘾大，用python监控羽毛球场余票"},"frontmatter":{"title":"人菜瘾大，用python监控羽毛球场余票","tags":[],"date":"2022-05-12","description":"人菜瘾大，用python监控羽毛球场余票 人到中年，迷上了羽毛球，苦于所住的地方周边球场着实火爆，票出秒没。 有必要通过一些技术手段，扒拉出余票数，将有票的场地给提取出来，发送通知到手机上。 因为球场都是下单减库存的，所以为了尽快实现这套逻..."}},"prev":{"frontmatter":{"title":"从CPU亲缘性探究Thread.currentThread"},"field":{"slug":"/posts/从CPU亲缘性探究Thread.currentThread"}},"next":{"frontmatter":{"title":"RocketMQ Rebalance流程"},"field":{"slug":"/posts/RocketMQ/RocketMQ Rebalance流程"}}},"pageContext":{"slug":"/posts/人菜瘾大，用python监控羽毛球场余票","prevSlug":"/posts/从CPU亲缘性探究Thread.currentThread","nextSlug":"/posts/RocketMQ/RocketMQ Rebalance流程"}},"staticQueryHashes":["1284643331","2841359383"]}