{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现",
    "result": {"pageContext":{"id":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"柔性事务的实现"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在电商领域等互联⽹场景下，刚性事务在数据库性能和处理能⼒上都暴露出了瓶颈。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性事务有两个特性：基本可⽤和柔性状态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基本可⽤是指分布式系统出现故障的时候允许损失⼀部分的可⽤性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性状态是指允许系统存在中间状态，这个中间状态不会影响系统整体的可⽤性，⽐如数据库读写分离的主从同步延迟等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性事务的⼀致性指的是最终⼀致性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"柔性事务的分类"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性事务主要分为两大类:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"通知型: 实现方案 -> MQ事务消息、本地消息表，特点: 异步调用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"补偿型: 实现方案-> TCC、Sega ，特点: 同步调用"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"通知型事务"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通知型事务的主流实现是通过MQ（消息队列）来通知其他事务参与者⾃⼰事务的执⾏状态，引⼊MQ组件，有效的将事务参与者进⾏解耦，各参与者都可以异步执⾏，所以通知型事务⼜被称为异步事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"异步确保型事务：主要适⽤于内部系统的数据最终⼀致性保障，因为内部相对⽐较可控，如订单和购物⻋、收货与清算、⽀付与结算等等场景"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"最⼤努⼒通知：主要⽤于外部系统，因为外部的⽹络环境更加复杂和不可信，所以只能尽最⼤努⼒去通知实现数据最终⼀致性，⽐如充值平台与运营商、⽀付对接等跨⽹络系统级别对接"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"异步确保型事务"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"指将⼀系列同步的事务操作修改为基于消息队列异步执⾏的操作，来避免分布式事务中同步阻塞带来的数据操作性能的下降。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"MQ事务消息"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基于MQ的事务消息⽅案主要依靠MQ的半消息机制来实现投递消息和参与者⾃身本地事务的⼀致性保障。半消息机制实现原理其实借鉴的2PC的思路，是⼆阶段提交的⼴义拓展。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/RSb0i0.jpg","alt":"RSb0i0"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"事务消息发送步骤如下："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生产者将半事务消息发送至MQ服务端。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"MQ服务端将消息持久化成功之后，向生产者返回Ack确认消息已经发送成功，此时消息为半事务消息。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生产者开始执行本地事务逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"事务消息回查步骤如下："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"生产者根据检查得到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/zS54uh.jpg","alt":"zS54uh"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"本地消息表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有时候我们⽬前的MQ组件并不⽀持事务消息，或者我们想尽量少的侵⼊业务⽅。这时我们需要另外⼀种⽅案——基于DB本地消息表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本地消息表最初由eBay 提出来解决分布式事务的问题。是⽬前业界使⽤的⽐较多的⽅案之⼀，它的核⼼思想就是将分布式事务拆分成本地事务进⾏处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20200825135927900.png","alt":"20200825135927900"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"发送消息⽅："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要有⼀个消息表，记录着消息状态相关信息。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务数据和消息表在同⼀个数据库，要保证它俩在同⼀个本地事务。直接利⽤本地事务，将业务数据和事务消息直接写⼊数据库。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在本地事务中处理完业务数据和写消息表操作后，通过写消息到 MQ 消息队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使⽤专⻔的投递⼯作线程进⾏事务消息投递到MQ，根据投递ACK去删除事务消息表记录消息会发到消息消费⽅，如果发送失败，即进⾏重试。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"消息消费⽅："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"处理消息队列中的消息，完成⾃⼰的业务逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果本地事务处理成功，则表明已经处理成功了。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果本地事务处理失败，那么就会重试执⾏。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果是业务层⾯的失败，给消息⽣产⽅发送⼀个业务补偿消息，通知进⾏回滚等操作。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"需要注意的问题:"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务主动⽅在完成业务处理后，向业务被动⽅(第三⽅系统)发送通知消息，允许存在消息丢失。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务主动⽅提供递增多挡位时间间隔(5min、10min、30min、1h、24h)，⽤于失败重试调⽤业务被动⽅的接⼝；在通知N次之后就不再通知，报警+记⽇志+⼈⼯介⼊。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务被动⽅提供幂等的服务接⼝，防⽌通知重复消费。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务主动⽅需要有定期校验机制，对业务数据进⾏兜底；防⽌业务被动⽅⽆法履⾏责任时进⾏业务回滚，确保数据最终⼀致性。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"MQ事务消息 VS 本地消息表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼆者的共性："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1、 事务消息都依赖MQ进⾏事务通知，所以都是异步的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2、 事务消息在投递⽅都是存在重复投递的可能，需要有配套的机制去降低重复投递率，实现更友好的消息投递去重。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"3、 事务消息的消费⽅，因为投递重复的⽆法避免，因此需要进⾏消费去重设计或者服务幂等设计。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼆者的区别："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"MQ事务消息："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要MQ⽀持半消息机制或者类似特性，在重复投递上具有⽐较好的去重处理；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"具有⽐较⼤的业务侵⼊性，需要业务⽅进⾏改造，提供对应的本地操作成功的回查功能；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DB本地消息表："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使⽤了数据库来存储事务消息，降低了对MQ的要求，但是增加了存储成本；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"事务消息使⽤了异步投递，增⼤了消息重复投递的可能性；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"通知型事务的问题"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通知型事务，是⽆法解决本地事务执⾏和消息发送的⼀致性问题的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为消息发送是⼀个⽹络通信的过程，发送消息的过程就有可能出现发送失败、或者超时的情况。超时有可能发送成功了，有可能发送失败了，消息的发送⽅是⽆法确定的，所以此时消息发送⽅⽆论是提交事务还是回滚事务，都有可能不⼀致性出现。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"消息发送⼀致性"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消息中间件在分布式系统中的核⼼作⽤就是异步通讯、应⽤解耦和并发缓冲（也叫作流量削峰）。在分布式环境下，需要通过⽹络进⾏通讯，就引⼊了数据传输的不确定性，也就是CAP理论中的分区容错性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消息发送⼀致性是指产⽣消息的业务动作与消息发送动作⼀致，也就是说如果业务操作成功，那么由这个业务操作所产⽣的消息⼀定要发送出去，否则就丢失。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"常规MQ消息处理流程和特点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"常规的MQ队列处理流程⽆法实现消息的⼀致性。所以，需要借助半消息、本地消息表，保障⼀致性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"消息重复投递和业务幂等性"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于未确认的消息，采⽤按规则重新投递的⽅式进⾏处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于以上流程，消息重复发送会导致业务处理接⼝出现重复调⽤的问题。消息消费过程中消息重复发送的主要原因就是消费者成功接收处理完消息后，消息中间件没有及时更新投递状态导致的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果允许消息重复发送，那么消费⽅应该实现业务接⼝的幂等性设计。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"补偿型事务"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但是基于消息实现的事务并不能解决所有的业务场景，例如以下场景：某笔订单完成时，同时扣掉⽤户的现⾦。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这⾥事务发起⽅是管理订单库的服务，但对整个事务是否提交并不能只由订单服务决定，因为还要确保⽤户有⾜够的钱，才能完成这笔交易，⽽这个信息在管理现⾦的服务⾥。这⾥我们可以引⼊基于补偿实现的事务，其流程如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"创建订单数据，但暂不提交本地事务"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"订单服务发送远程调⽤到现⾦服务，以扣除对应的⾦额"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上述步骤成功后提交订单库的事务"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上这个是正常成功的流程，异常流程需要回滚的话，将额外发送远程调⽤到现⾦服务以加上之前扣掉的⾦额。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上流程⽐基于消息队列实现的事务的流程要复杂，同时开发的⼯作量也更多："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编写订单服务⾥创建订单的逻辑"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编写现⾦服务⾥扣钱的逻辑"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编写现⾦服务⾥补偿返还的逻辑"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以看到，该事务流程相对于基于消息实现的分布式事务更为复杂，需要额外开发相关的业务回滚⽅法，也失去了服务间流量削峰填⾕的功能。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但其仅仅只⽐基于消息的事务复杂多⼀点，若不能使⽤基于消息队列的最终⼀致性事务，那么可以优先考虑使⽤基于补偿的事务形态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿模式使⽤⼀个额外的协调服务来协调各个需要保证⼀致性的业务服务，协调服务按顺序调⽤各个业务微服务，如果某个业务服务调⽤异常（包括业务异常和技术异常）就取消之前所有已经调⽤成功的业务服务。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿模式也大致分为两大类:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"TCC事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Sega模型"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TCC 事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC（Try-Confirm-Cancel）的概念来源于 Pat Helland 发表的⼀篇名为“Life beyond Distributed Transactions:an Apostate’s Opinion”的论⽂。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 分布式事务模型包括三部分："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主业务服务：主业务服务为整个业务活动的发起⽅，服务的编排者，负责发起并完成整个业务活动。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从业务服务：从业务服务是整个业务活动的参与⽅，负责提供 TCC 业务操作，实现初步操作(Try)、确认操作(Confirm)、取消操作(Cancel)三个接⼝，供主业务服务调⽤。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20210710092138838.png","alt":"20210710092138838"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{"start":3},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"业务活动管理器：业务活动管理器管理控制整个业务活动，包括记录维护 TCC 全局事务的事务状态和每个从业务服务的⼦事务状态，并在业务活动提交时调⽤所有从业务服务的 Confirm 操作，在业务活动取消时调⽤所有从业务服务的 Cancel 操作。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 提出了⼀种新的事务模型，基于业务层⾯的事务定义，锁粒度完全由业务⾃⼰控制，⽬的是解决复杂业务中，跨表跨库等⼤颗粒度资源锁定的问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 把事务运⾏过程分成 Try、Confirm / Cancel 两个阶段，每个阶段的逻辑由业务代码控制，避免了⻓事务，可以获取更⾼的性能。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"工作流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC(Try-Confirm-Cancel)分布式事务模型相对于 XA 等传统模型，其特征在于它不依赖资源管理器(RM)对分布式事务的⽀持，⽽是通过对业务逻辑的分解来实现分布式事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 模型认为对于业务系统中⼀个特定的业务逻辑，其对外提供服务时，必须接受⼀些不确定性，即对业务逻辑初步操作的调⽤仅是⼀个临时性操作，调⽤它的主业务服务保留了后续的取消权。如果主业务服务认为全局事务应该回滚，它会要求取消之前的临时性操作，这就对应从业务服务的取消操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽽当主业务服务认为全局事务应该提交时，它会放弃之前临时性操作的取消权，这对应从业务服务的确认操作。每⼀个初步操作，最终都会被确认或取消。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因此，针对⼀个具体的业务服务，TCC 分布式事务模型需要业务系统提供三段业务逻辑："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"初步操作 Try：完成所有业务检查，预留必须的业务资源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"确认操作 Confirm：真正执⾏的业务逻辑，不作任何业务检查，只使⽤ Try阶段预留的业务资源。因此，只要 Try操作成功，Confirm 必须能成功。另外，Confirm 操作需满⾜幂等性，保证⼀笔分布式事务有且只能成功⼀次"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"取消操作 Cancel：释放 Try 阶段预留的业务资源。同样的，Cancel 操作也需要满⾜幂等性。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/1bf0b27725f150295091457167_1001046.png","alt":"1bf0b27725f150295091457167_1001046"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Try 阶段失败可以 Cancel，如果 Confirm 和 Cancel 阶段失败了怎么办？"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 中会添加事务⽇志，如果 Confirm 或者 Cancel 阶段出错，则会进⾏重试，所以这两个阶段需要⽀持幂等；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果重试失败，则需要⼈⼯介⼊进⾏恢复和处理等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TCC事务模型 VS DTP事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽐较⼀下TCC事务模型和DTP事务模型，如下所示："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20191210222510796.png","alt":"20191210222510796"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1、TCC模型中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"主业务服务"}]},{"type":"text","value":" 相当于 DTP模型中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AP"}]},{"type":"text","value":"，TCC模型中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"从业务服务"}]},{"type":"text","value":" 相当于 DTP模型中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RM"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在DTP模型中，应⽤AP操作多个资源管理器RM上的资源；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在TCC模型中，是主业务服务操作多个从业务服务上的资源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如航班预定案例中，美团App就是主业务服务，⽽川航和东航就是从业务服务，主业务服务需要使⽤从业务服务上的机票资源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不同的是DTP模型中的资源提供者是类似于Mysql这种关系型数据库，⽽TCC模型中资源的提供者是其他业务服务。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2、TCC模型中，从业务服务提供的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"confirm"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cancel"}]},{"type":"text","value":"接⼝ 相当于DTP模型中RM提供的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prepare"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":"接⼝"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"XA协议中规定了DTP模型中定RM需要提供"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prepare"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":"接⼝给TM调⽤，以实现两阶段提交。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在TCC模型中，从业务服务相当于"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RM"}]},{"type":"text","value":"，提供了类似的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"confirm"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cancel"}]},{"type":"text","value":"接⼝。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC是可以解决部分场景下的分布式事务的，但是，它的⼀个问题在于，需要每个参与者都分别实现Try，Confirm和Cancel接⼝及逻辑，这对于业务的侵⼊性是巨⼤的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC ⽅案严重依赖回滚和补偿代码，最终的结果是：回滚代码逻辑复杂，业务代码很难维护。所以，TCC ⽅案的使⽤场景较少，但是也有使⽤的场景。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽐如说跟钱打交道的，⽀付、交易相关的场景，⼤家会⽤ TCC⽅案，严格保证分布式事务要么全部成功，要么全部⾃动回滚，严格保证资⾦的正确性，保证在资⾦上不会出现问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20201102225620490.jpg","alt":"20201102225620490"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sega事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SAGA可以看做⼀个异步的、利⽤队列实现的补偿事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/TB1Y2kuw7T2gK0jSZFkXXcIQFXa-445-444.png","alt":"TB1Y2kuw7T2gK0jSZFkXXcIQFXa-445-444"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"相关概念"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1987年普林斯顿⼤学的Hector Garcia-Molina和Kenneth Salem发表了⼀篇Paper Sagas，讲述的是如何处理long lived transaction（⻓活事务）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga是⼀个⻓活事务可被分解成可以交错运⾏的⼦事务集合。其中每个⼦事务都是⼀个保持数据库⼀致性的真实事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"论⽂地址："},{"type":"element","tagName":"a","properties":{"href":"https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf"},"children":[{"type":"text","value":"sagas"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga模型是把⼀个分布式事务拆分为多个本地事务，每个本地事务都有相应的执⾏模块和补偿模块（对应TCC中的Confirm和Cancel），当Saga事务中任意⼀个本地事务出错时，可以通过调⽤相关的补偿⽅法恢复之前的事务，达到事务最终⼀致性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这样的SAGA事务模型，是牺牲了⼀定的隔离性和⼀致性的，但是提⾼了长事务的可⽤性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"组成部分"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"LLT（Long Live Transaction）：由⼀个个本地事务组成的事务链。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本地事务：事务链由⼀个个⼦事务（本地事务）组成，LLT = T1+T2+T3+...+Ti。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿：每个本地事务 Ti 有对应的补偿 Ci。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"执⾏顺序"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sega 有两种执行顺序:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"T1, T2, T3, ..., Tn"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"T1, T2, ..., Tj, Cj,..., C2, C1，其中0 < j < n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果没有出异常的话，就按照第一种执行顺序向下执行即可，如果出现了异常需要通过逆向操作将之前的事务进行回滚"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"恢复策略"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"向后恢复（Backward Recovery）：撤销掉之前所有成功⼦事务。如果任意本地⼦事务失败，则补偿已完成的事务。如异常情况的执⾏顺序T1,T2,T3,..Ti,Ci,...C3,C2,C1。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"向前恢复（Forward Recovery）：即重试失败的事务，适⽤于必须要成功的场景，该情况下不需要Ci。执⾏顺序：T1,T2,...,Tj（失败）,Tj（重试）,...,Ti。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"向前恢复没有必要提供补偿事务，如果你的业务中，⼦事务（最终）总会成功，或补偿事务难以定义或不可能，向前恢复更符合你的需求。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"理论上补偿事务永不失败，然⽽，在分布式世界中，服务器可能会宕机，⽹络可能会失败，甚⾄数据中⼼也可能会停电。在这种情况下我们能做些什么？ 最后的⼿段是提供回退措施，⽐如⼈⼯⼲预。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"使用条件"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga只允许两个层次的嵌套，顶级的Saga和简单⼦事务"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"saga可能会看到其他saga的部分结果"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"每个⼦事务应该是独立的原⼦⾏为"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在我们的业务场景下，各个业务环境（如：航班预订、租⻋、酒店预订和付款）是⾃然独⽴的⾏为，⽽且每个事务都可以⽤对应服务的数据库保证原⼦操作。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"补偿也有需考虑的事项："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿事务从语义⻆度撤消了事务Ti的⾏为，但未必能将数据库返回到执⾏Ti时的状态。（例如，如果事务触发导弹发射， 则可能⽆法撤消此操作）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但这对我们的业务来说不是问题。其实难以撤消的⾏为也有可能被补偿。例如，发送邮件的事务可以通过发送解释问题的另⼀封邮件来补偿。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"对于ACID的保证"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga对于ACID的保证和TCC⼀样："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原⼦性（Atomicity）：正常情况下保证。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼀致性（Consistency），在某个时间点，会出现A库和B库的数据违反⼀致性要求的情况，但是最终是⼀致的。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"隔离性（Isolation），在某个时间点，A事务能够读到B事务部分提交的结果。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"持久性（Durability），和本地事务⼀样，只要commit则数据被持久。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Saga和TCC对⽐"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga相⽐TCC的缺点是缺少预留动作，导致补偿动作的实现⽐较麻烦：Ti就是commit，⽐如⼀个业务是发送邮件，在TCC模式下，先保存草稿（Try）再发送（Confirm），撤销的话直接删除草稿（Cancel）就⾏了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽽Saga则就直接发送邮件了（Ti），如果要撤销则得再发送⼀份邮件说明撤销（Ci），实现起来有⼀些麻烦。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果把上⾯的发邮件的例⼦换成："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A服务在完成Ti后⽴即发送Event到ESB（企业服务总线，可以认为是⼀个消息中间件），下游服务监听到这个Event做⾃⼰的⼀些⼯作然后再发送Event到ESB，如果A服务执⾏补偿动作Ci，那么整个补偿动作的层级就很深。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不过没有预留动作也可以认为是优点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有些业务很简单，套⽤TCC需要修改原来的业务逻辑，⽽Saga只需要添加⼀个补偿动作就⾏了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC最少通信次数为2n，⽽Saga为n（n=sub-transaction的数量）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有些第三⽅服务没有Try接⼝，TCC模式实现起来就⽐较困难了，⽽Saga则很简单。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"没有预留动作就意味着不必担⼼资源释放的问题，异常处理起来也更简单。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n"}]}],"data":{"quirksMode":false}},"articleNode":{"field":{"contentType":"topic","topic":"分布式解决方案"},"frontmatter":{"id":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","title":"柔性事务的实现","date":"2022-04-23 21:53","absolute_path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现"},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"柔性事务的实现"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在电商领域等互联⽹场景下，刚性事务在数据库性能和处理能⼒上都暴露出了瓶颈。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性事务有两个特性：基本可⽤和柔性状态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基本可⽤是指分布式系统出现故障的时候允许损失⼀部分的可⽤性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性状态是指允许系统存在中间状态，这个中间状态不会影响系统整体的可⽤性，⽐如数据库读写分离的主从同步延迟等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性事务的⼀致性指的是最终⼀致性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"柔性事务的分类"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"柔性事务主要分为两大类:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"通知型: 实现方案 -> MQ事务消息、本地消息表，特点: 异步调用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"补偿型: 实现方案-> TCC、Sega ，特点: 同步调用"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"通知型事务"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通知型事务的主流实现是通过MQ（消息队列）来通知其他事务参与者⾃⼰事务的执⾏状态，引⼊MQ组件，有效的将事务参与者进⾏解耦，各参与者都可以异步执⾏，所以通知型事务⼜被称为异步事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"异步确保型事务：主要适⽤于内部系统的数据最终⼀致性保障，因为内部相对⽐较可控，如订单和购物⻋、收货与清算、⽀付与结算等等场景"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"最⼤努⼒通知：主要⽤于外部系统，因为外部的⽹络环境更加复杂和不可信，所以只能尽最⼤努⼒去通知实现数据最终⼀致性，⽐如充值平台与运营商、⽀付对接等跨⽹络系统级别对接"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"异步确保型事务"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"指将⼀系列同步的事务操作修改为基于消息队列异步执⾏的操作，来避免分布式事务中同步阻塞带来的数据操作性能的下降。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"MQ事务消息"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基于MQ的事务消息⽅案主要依靠MQ的半消息机制来实现投递消息和参与者⾃身本地事务的⼀致性保障。半消息机制实现原理其实借鉴的2PC的思路，是⼆阶段提交的⼴义拓展。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/RSb0i0.jpg","alt":"RSb0i0"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"事务消息发送步骤如下："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生产者将半事务消息发送至MQ服务端。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"MQ服务端将消息持久化成功之后，向生产者返回Ack确认消息已经发送成功，此时消息为半事务消息。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生产者开始执行本地事务逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"事务消息回查步骤如下："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"生产者根据检查得到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/zS54uh.jpg","alt":"zS54uh"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"本地消息表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有时候我们⽬前的MQ组件并不⽀持事务消息，或者我们想尽量少的侵⼊业务⽅。这时我们需要另外⼀种⽅案——基于DB本地消息表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本地消息表最初由eBay 提出来解决分布式事务的问题。是⽬前业界使⽤的⽐较多的⽅案之⼀，它的核⼼思想就是将分布式事务拆分成本地事务进⾏处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20200825135927900.png","alt":"20200825135927900"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"发送消息⽅："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要有⼀个消息表，记录着消息状态相关信息。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务数据和消息表在同⼀个数据库，要保证它俩在同⼀个本地事务。直接利⽤本地事务，将业务数据和事务消息直接写⼊数据库。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在本地事务中处理完业务数据和写消息表操作后，通过写消息到 MQ 消息队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使⽤专⻔的投递⼯作线程进⾏事务消息投递到MQ，根据投递ACK去删除事务消息表记录消息会发到消息消费⽅，如果发送失败，即进⾏重试。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"消息消费⽅："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"处理消息队列中的消息，完成⾃⼰的业务逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果本地事务处理成功，则表明已经处理成功了。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果本地事务处理失败，那么就会重试执⾏。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果是业务层⾯的失败，给消息⽣产⽅发送⼀个业务补偿消息，通知进⾏回滚等操作。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"需要注意的问题:"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务主动⽅在完成业务处理后，向业务被动⽅(第三⽅系统)发送通知消息，允许存在消息丢失。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务主动⽅提供递增多挡位时间间隔(5min、10min、30min、1h、24h)，⽤于失败重试调⽤业务被动⽅的接⼝；在通知N次之后就不再通知，报警+记⽇志+⼈⼯介⼊。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务被动⽅提供幂等的服务接⼝，防⽌通知重复消费。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"业务主动⽅需要有定期校验机制，对业务数据进⾏兜底；防⽌业务被动⽅⽆法履⾏责任时进⾏业务回滚，确保数据最终⼀致性。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"MQ事务消息 VS 本地消息表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼆者的共性："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1、 事务消息都依赖MQ进⾏事务通知，所以都是异步的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2、 事务消息在投递⽅都是存在重复投递的可能，需要有配套的机制去降低重复投递率，实现更友好的消息投递去重。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"3、 事务消息的消费⽅，因为投递重复的⽆法避免，因此需要进⾏消费去重设计或者服务幂等设计。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼆者的区别："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"MQ事务消息："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要MQ⽀持半消息机制或者类似特性，在重复投递上具有⽐较好的去重处理；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"具有⽐较⼤的业务侵⼊性，需要业务⽅进⾏改造，提供对应的本地操作成功的回查功能；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DB本地消息表："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"使⽤了数据库来存储事务消息，降低了对MQ的要求，但是增加了存储成本；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"事务消息使⽤了异步投递，增⼤了消息重复投递的可能性；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"通知型事务的问题"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通知型事务，是⽆法解决本地事务执⾏和消息发送的⼀致性问题的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为消息发送是⼀个⽹络通信的过程，发送消息的过程就有可能出现发送失败、或者超时的情况。超时有可能发送成功了，有可能发送失败了，消息的发送⽅是⽆法确定的，所以此时消息发送⽅⽆论是提交事务还是回滚事务，都有可能不⼀致性出现。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"消息发送⼀致性"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消息中间件在分布式系统中的核⼼作⽤就是异步通讯、应⽤解耦和并发缓冲（也叫作流量削峰）。在分布式环境下，需要通过⽹络进⾏通讯，就引⼊了数据传输的不确定性，也就是CAP理论中的分区容错性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消息发送⼀致性是指产⽣消息的业务动作与消息发送动作⼀致，也就是说如果业务操作成功，那么由这个业务操作所产⽣的消息⼀定要发送出去，否则就丢失。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"常规MQ消息处理流程和特点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"常规的MQ队列处理流程⽆法实现消息的⼀致性。所以，需要借助半消息、本地消息表，保障⼀致性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"消息重复投递和业务幂等性"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于未确认的消息，采⽤按规则重新投递的⽅式进⾏处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于以上流程，消息重复发送会导致业务处理接⼝出现重复调⽤的问题。消息消费过程中消息重复发送的主要原因就是消费者成功接收处理完消息后，消息中间件没有及时更新投递状态导致的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果允许消息重复发送，那么消费⽅应该实现业务接⼝的幂等性设计。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"补偿型事务"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但是基于消息实现的事务并不能解决所有的业务场景，例如以下场景：某笔订单完成时，同时扣掉⽤户的现⾦。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这⾥事务发起⽅是管理订单库的服务，但对整个事务是否提交并不能只由订单服务决定，因为还要确保⽤户有⾜够的钱，才能完成这笔交易，⽽这个信息在管理现⾦的服务⾥。这⾥我们可以引⼊基于补偿实现的事务，其流程如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"创建订单数据，但暂不提交本地事务"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"订单服务发送远程调⽤到现⾦服务，以扣除对应的⾦额"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上述步骤成功后提交订单库的事务"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上这个是正常成功的流程，异常流程需要回滚的话，将额外发送远程调⽤到现⾦服务以加上之前扣掉的⾦额。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以上流程⽐基于消息队列实现的事务的流程要复杂，同时开发的⼯作量也更多："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编写订单服务⾥创建订单的逻辑"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编写现⾦服务⾥扣钱的逻辑"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"编写现⾦服务⾥补偿返还的逻辑"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以看到，该事务流程相对于基于消息实现的分布式事务更为复杂，需要额外开发相关的业务回滚⽅法，也失去了服务间流量削峰填⾕的功能。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但其仅仅只⽐基于消息的事务复杂多⼀点，若不能使⽤基于消息队列的最终⼀致性事务，那么可以优先考虑使⽤基于补偿的事务形态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿模式使⽤⼀个额外的协调服务来协调各个需要保证⼀致性的业务服务，协调服务按顺序调⽤各个业务微服务，如果某个业务服务调⽤异常（包括业务异常和技术异常）就取消之前所有已经调⽤成功的业务服务。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿模式也大致分为两大类:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"TCC事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Sega模型"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TCC 事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC（Try-Confirm-Cancel）的概念来源于 Pat Helland 发表的⼀篇名为“Life beyond Distributed Transactions:an Apostate’s Opinion”的论⽂。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 分布式事务模型包括三部分："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主业务服务：主业务服务为整个业务活动的发起⽅，服务的编排者，负责发起并完成整个业务活动。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从业务服务：从业务服务是整个业务活动的参与⽅，负责提供 TCC 业务操作，实现初步操作(Try)、确认操作(Confirm)、取消操作(Cancel)三个接⼝，供主业务服务调⽤。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20210710092138838.png","alt":"20210710092138838"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{"start":3},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"业务活动管理器：业务活动管理器管理控制整个业务活动，包括记录维护 TCC 全局事务的事务状态和每个从业务服务的⼦事务状态，并在业务活动提交时调⽤所有从业务服务的 Confirm 操作，在业务活动取消时调⽤所有从业务服务的 Cancel 操作。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 提出了⼀种新的事务模型，基于业务层⾯的事务定义，锁粒度完全由业务⾃⼰控制，⽬的是解决复杂业务中，跨表跨库等⼤颗粒度资源锁定的问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 把事务运⾏过程分成 Try、Confirm / Cancel 两个阶段，每个阶段的逻辑由业务代码控制，避免了⻓事务，可以获取更⾼的性能。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"工作流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC(Try-Confirm-Cancel)分布式事务模型相对于 XA 等传统模型，其特征在于它不依赖资源管理器(RM)对分布式事务的⽀持，⽽是通过对业务逻辑的分解来实现分布式事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 模型认为对于业务系统中⼀个特定的业务逻辑，其对外提供服务时，必须接受⼀些不确定性，即对业务逻辑初步操作的调⽤仅是⼀个临时性操作，调⽤它的主业务服务保留了后续的取消权。如果主业务服务认为全局事务应该回滚，它会要求取消之前的临时性操作，这就对应从业务服务的取消操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽽当主业务服务认为全局事务应该提交时，它会放弃之前临时性操作的取消权，这对应从业务服务的确认操作。每⼀个初步操作，最终都会被确认或取消。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因此，针对⼀个具体的业务服务，TCC 分布式事务模型需要业务系统提供三段业务逻辑："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"初步操作 Try：完成所有业务检查，预留必须的业务资源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"确认操作 Confirm：真正执⾏的业务逻辑，不作任何业务检查，只使⽤ Try阶段预留的业务资源。因此，只要 Try操作成功，Confirm 必须能成功。另外，Confirm 操作需满⾜幂等性，保证⼀笔分布式事务有且只能成功⼀次"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"取消操作 Cancel：释放 Try 阶段预留的业务资源。同样的，Cancel 操作也需要满⾜幂等性。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/1bf0b27725f150295091457167_1001046.png","alt":"1bf0b27725f150295091457167_1001046"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Try 阶段失败可以 Cancel，如果 Confirm 和 Cancel 阶段失败了怎么办？"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 中会添加事务⽇志，如果 Confirm 或者 Cancel 阶段出错，则会进⾏重试，所以这两个阶段需要⽀持幂等；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果重试失败，则需要⼈⼯介⼊进⾏恢复和处理等。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TCC事务模型 VS DTP事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽐较⼀下TCC事务模型和DTP事务模型，如下所示："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20191210222510796.png","alt":"20191210222510796"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1、TCC模型中的 "},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"主业务服务"}]},{"type":"text","value":" 相当于 DTP模型中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AP"}]},{"type":"text","value":"，TCC模型中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"从业务服务"}]},{"type":"text","value":" 相当于 DTP模型中的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RM"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在DTP模型中，应⽤AP操作多个资源管理器RM上的资源；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在TCC模型中，是主业务服务操作多个从业务服务上的资源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如航班预定案例中，美团App就是主业务服务，⽽川航和东航就是从业务服务，主业务服务需要使⽤从业务服务上的机票资源。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不同的是DTP模型中的资源提供者是类似于Mysql这种关系型数据库，⽽TCC模型中资源的提供者是其他业务服务。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"2、TCC模型中，从业务服务提供的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"confirm"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cancel"}]},{"type":"text","value":"接⼝ 相当于DTP模型中RM提供的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prepare"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":"接⼝"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"XA协议中规定了DTP模型中定RM需要提供"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prepare"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":"接⼝给TM调⽤，以实现两阶段提交。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在TCC模型中，从业务服务相当于"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RM"}]},{"type":"text","value":"，提供了类似的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"confirm"}]},{"type":"text","value":"、"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cancel"}]},{"type":"text","value":"接⼝。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC是可以解决部分场景下的分布式事务的，但是，它的⼀个问题在于，需要每个参与者都分别实现Try，Confirm和Cancel接⼝及逻辑，这对于业务的侵⼊性是巨⼤的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC ⽅案严重依赖回滚和补偿代码，最终的结果是：回滚代码逻辑复杂，业务代码很难维护。所以，TCC ⽅案的使⽤场景较少，但是也有使⽤的场景。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽐如说跟钱打交道的，⽀付、交易相关的场景，⼤家会⽤ TCC⽅案，严格保证分布式事务要么全部成功，要么全部⾃动回滚，严格保证资⾦的正确性，保证在资⾦上不会出现问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20201102225620490.jpg","alt":"20201102225620490"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sega事务模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SAGA可以看做⼀个异步的、利⽤队列实现的补偿事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/TB1Y2kuw7T2gK0jSZFkXXcIQFXa-445-444.png","alt":"TB1Y2kuw7T2gK0jSZFkXXcIQFXa-445-444"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"相关概念"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1987年普林斯顿⼤学的Hector Garcia-Molina和Kenneth Salem发表了⼀篇Paper Sagas，讲述的是如何处理long lived transaction（⻓活事务）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga是⼀个⻓活事务可被分解成可以交错运⾏的⼦事务集合。其中每个⼦事务都是⼀个保持数据库⼀致性的真实事务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"论⽂地址："},{"type":"element","tagName":"a","properties":{"href":"https://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf"},"children":[{"type":"text","value":"sagas"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga模型是把⼀个分布式事务拆分为多个本地事务，每个本地事务都有相应的执⾏模块和补偿模块（对应TCC中的Confirm和Cancel），当Saga事务中任意⼀个本地事务出错时，可以通过调⽤相关的补偿⽅法恢复之前的事务，达到事务最终⼀致性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这样的SAGA事务模型，是牺牲了⼀定的隔离性和⼀致性的，但是提⾼了长事务的可⽤性。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"组成部分"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"LLT（Long Live Transaction）：由⼀个个本地事务组成的事务链。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本地事务：事务链由⼀个个⼦事务（本地事务）组成，LLT = T1+T2+T3+...+Ti。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿：每个本地事务 Ti 有对应的补偿 Ci。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"执⾏顺序"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"sega 有两种执行顺序:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"T1, T2, T3, ..., Tn"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"T1, T2, ..., Tj, Cj,..., C2, C1，其中0 < j < n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果没有出异常的话，就按照第一种执行顺序向下执行即可，如果出现了异常需要通过逆向操作将之前的事务进行回滚"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"恢复策略"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"向后恢复（Backward Recovery）：撤销掉之前所有成功⼦事务。如果任意本地⼦事务失败，则补偿已完成的事务。如异常情况的执⾏顺序T1,T2,T3,..Ti,Ci,...C3,C2,C1。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"向前恢复（Forward Recovery）：即重试失败的事务，适⽤于必须要成功的场景，该情况下不需要Ci。执⾏顺序：T1,T2,...,Tj（失败）,Tj（重试）,...,Ti。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"向前恢复没有必要提供补偿事务，如果你的业务中，⼦事务（最终）总会成功，或补偿事务难以定义或不可能，向前恢复更符合你的需求。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"理论上补偿事务永不失败，然⽽，在分布式世界中，服务器可能会宕机，⽹络可能会失败，甚⾄数据中⼼也可能会停电。在这种情况下我们能做些什么？ 最后的⼿段是提供回退措施，⽐如⼈⼯⼲预。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"使用条件"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga只允许两个层次的嵌套，顶级的Saga和简单⼦事务"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"saga可能会看到其他saga的部分结果"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"每个⼦事务应该是独立的原⼦⾏为"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在我们的业务场景下，各个业务环境（如：航班预订、租⻋、酒店预订和付款）是⾃然独⽴的⾏为，⽽且每个事务都可以⽤对应服务的数据库保证原⼦操作。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"补偿也有需考虑的事项："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"补偿事务从语义⻆度撤消了事务Ti的⾏为，但未必能将数据库返回到执⾏Ti时的状态。（例如，如果事务触发导弹发射， 则可能⽆法撤消此操作）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但这对我们的业务来说不是问题。其实难以撤消的⾏为也有可能被补偿。例如，发送邮件的事务可以通过发送解释问题的另⼀封邮件来补偿。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"对于ACID的保证"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga对于ACID的保证和TCC⼀样："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"原⼦性（Atomicity）：正常情况下保证。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼀致性（Consistency），在某个时间点，会出现A库和B库的数据违反⼀致性要求的情况，但是最终是⼀致的。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"隔离性（Isolation），在某个时间点，A事务能够读到B事务部分提交的结果。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"持久性（Durability），和本地事务⼀样，只要commit则数据被持久。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Saga和TCC对⽐"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Saga相⽐TCC的缺点是缺少预留动作，导致补偿动作的实现⽐较麻烦：Ti就是commit，⽐如⼀个业务是发送邮件，在TCC模式下，先保存草稿（Try）再发送（Confirm），撤销的话直接删除草稿（Cancel）就⾏了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⽽Saga则就直接发送邮件了（Ti），如果要撤销则得再发送⼀份邮件说明撤销（Ci），实现起来有⼀些麻烦。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果把上⾯的发邮件的例⼦换成："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A服务在完成Ti后⽴即发送Event到ESB（企业服务总线，可以认为是⼀个消息中间件），下游服务监听到这个Event做⾃⼰的⼀些⼯作然后再发送Event到ESB，如果A服务执⾏补偿动作Ci，那么整个补偿动作的层级就很深。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不过没有预留动作也可以认为是优点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有些业务很简单，套⽤TCC需要修改原来的业务逻辑，⽽Saga只需要添加⼀个补偿动作就⾏了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC最少通信次数为2n，⽽Saga为n（n=sub-transaction的数量）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有些第三⽅服务没有Try接⼝，TCC模式实现起来就⽐较困难了，⽽Saga则很简单。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"没有预留动作就意味着不必担⼼资源释放的问题，异常处理起来也更简单。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"柔性事务的实现"},{"depth":1,"value":"柔性事务的分类"},{"depth":2,"value":"通知型事务"},{"depth":3,"value":"异步确保型事务"},{"depth":4,"value":"MQ事务消息"},{"depth":4,"value":"本地消息表"},{"depth":4,"value":"MQ事务消息 VS 本地消息表"},{"depth":2,"value":"通知型事务的问题"},{"depth":3,"value":"消息发送⼀致性"},{"depth":4,"value":"常规MQ消息处理流程和特点"},{"depth":3,"value":"消息重复投递和业务幂等性"},{"depth":2,"value":"补偿型事务"},{"depth":3,"value":"TCC 事务模型"},{"depth":4,"value":"工作流程"},{"depth":3,"value":"TCC事务模型 VS DTP事务模型"},{"depth":3,"value":"Sega事务模型"},{"depth":4,"value":"相关概念"},{"depth":4,"value":"组成部分"},{"depth":4,"value":"执⾏顺序"},{"depth":4,"value":"恢复策略"},{"depth":4,"value":"使用条件"},{"depth":4,"value":"对于ACID的保证"},{"depth":3,"value":"Saga和TCC对⽐"}],"path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现"},"tree":{"title":"分布式解决方案","id":"20220421194022-kfiadau","parentId":"","href":"/topic/分布式解决方案","path":"/topic/分布式解决方案","children":[{"title":"分布式理论","id":"20220429135957-770gm7n","type":"d","href":"/topic/分布式解决方案/分布式理论","parentId":"","path":"/topic/分布式解决方案/分布式理论","parentPath":"/topic/分布式解决方案","sort":1,"children":[{"title":"分布式特性","id":"20220429140350-6b6azr1","type":"h","href":"/topic/分布式解决方案/分布式理论#分布式特性","parentId":"20220429135957-770gm7n","path":"/topic/分布式解决方案/分布式理论","parentPath":"/topic/分布式解决方案","children":[],"level":2},{"title":"分布式分类","id":"20220429140406-78xx1c9","type":"h","href":"/topic/分布式解决方案/分布式理论#分布式分类","parentId":"20220429135957-770gm7n","path":"/topic/分布式解决方案/分布式理论","parentPath":"/topic/分布式解决方案","children":[],"level":2},{"title":"分布式面临的问题","id":"20220429140249-e8i2v67","type":"h","href":"/topic/分布式解决方案/分布式理论#分布式面临的问题","parentId":"20220429135957-770gm7n","path":"/topic/分布式解决方案/分布式理论","parentPath":"/topic/分布式解决方案","children":[],"level":2},{"title":"三驾马车","id":"20220504221043-ndzz22d","type":"d","href":"/topic/分布式解决方案/分布式理论/三驾马车","parentId":"","path":"/topic/分布式解决方案/分布式理论/三驾马车","parentPath":"/topic/分布式解决方案/分布式理论","sort":0,"children":[{"title":"The Google File System","id":"20220505103842-h8stgqv","type":"d","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentId":"","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","sort":1,"children":[{"title":"摘要","id":"20220505152643-eyjn600","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#摘要","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"1. 引言","id":"20220505152904-rl9r12t","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#1. 引言","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"2. 设计概述","id":"20220505153057-6we6q9e","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2. 设计概述","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"2.1 假设","id":"20220505153214-w97a5eq","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.1 假设","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"2.2 接口","id":"20220505153342-qrfyhd0","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.2 接口","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"2.3 架构","id":"20220505153427-yczpia1","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.3 架构","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"2.4 单master","id":"20220505153634-wr9cy7v","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.4 单master","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"2.5 chunk大小","id":"20220505153645-9j42aj9","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.5 chunk大小","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"2.6 元数据","id":"20220505153729-j7mr5sy","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.6 元数据","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"2.6.1 内存数据结构","id":"20220505153748-93wb5sv","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.6.1 内存数据结构","parentId":"20220505153729-j7mr5sy","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"2.6.2 chunk位置","id":"20220505153811-hrhktlx","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.6.2 chunk位置","parentId":"20220505153729-j7mr5sy","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"2.6.3 操作日志","id":"20220505161734-xlmd7en","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.6.3 操作日志","parentId":"20220505153729-j7mr5sy","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"2.7 一致性模型","id":"20220505161748-vaevsko","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.7 一致性模型","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"2.7.1 GFS提供的保证","id":"20220505161839-noqow5b","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.7.1 GFS提供的保证","parentId":"20220505161748-vaevsko","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"2.7.2 对应用程序的影响","id":"20220505162841-92zpdr4","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#2.7.2 对应用程序的影响","parentId":"20220505161748-vaevsko","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"3. 系统交互","id":"20220505163026-ti0u1cw","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#3. 系统交互","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"3.1 租约和变更顺序","id":"20220505163040-8lpawj0","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#3.1 租约和变更顺序","parentId":"20220505163026-ti0u1cw","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"3.2 数据流","id":"20220505163142-diazjgy","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#3.2 数据流","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"3.3 原子性record append","id":"20220505163435-8p1rdvc","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#3.3 原子性record append","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"3.4 快照","id":"20220505163529-7ewyign","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#3.4 快照","parentId":"20220505153057-6we6q9e","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"4. master操作","id":"20220505163645-gowcg06","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4. master操作","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"4.1 命名空间管理与锁","id":"20220505163711-92uz3lb","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.1 命名空间管理与锁","parentId":"20220505163645-gowcg06","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"4.2 副本分配","id":"20220505164434-f0me82e","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.2 副本分配","parentId":"20220505163645-gowcg06","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"4.3 chunk创建、重做副本、重均衡","id":"20220505164453-s8eah39","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.3 chunk创建、重做副本、重均衡","parentId":"20220505163645-gowcg06","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"4.4 垃圾回收","id":"20220505164538-dlh214d","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.4 垃圾回收","parentId":"20220505163645-gowcg06","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"4.4.1 垃圾回收机制","id":"20220505164549-s9k32j3","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.4.1 垃圾回收机制","parentId":"20220505164538-dlh214d","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"4.4.2 关于垃圾回收的讨论","id":"20220505164604-fp0gkjf","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.4.2 关于垃圾回收的讨论","parentId":"20220505164538-dlh214d","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"4.5 陈旧副本检测","id":"20220505164624-4408wed","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#4.5 陈旧副本检测","parentId":"20220505163645-gowcg06","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"5. 错误容忍与诊断","id":"20220505164640-h5ye4s1","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5. 错误容忍与诊断","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"5.1 高可用","id":"20220505164708-jcnd7d4","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5.1 高可用","parentId":"20220505164640-h5ye4s1","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"5.1.1 快速恢复","id":"20220505164724-ouwncwl","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5.1.1 快速恢复","parentId":"20220505164708-jcnd7d4","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"5.1.2 chunk副本","id":"20220505164753-mjqssd7","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5.1.2 chunk副本","parentId":"20220505164708-jcnd7d4","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"5.1.3 master副本","id":"20220505164839-qlp5rqu","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5.1.3 master副本","parentId":"20220505164708-jcnd7d4","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"5.2 数据完整性","id":"20220505164854-3knwav7","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5.2 数据完整性","parentId":"20220505164640-h5ye4s1","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"5.3 诊断工具","id":"20220505164921-ev1pe72","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#5.3 诊断工具","parentId":"20220505164640-h5ye4s1","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"6. 性能测试","id":"20220505165140-trykuy8","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6. 性能测试","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"6.1 小批量benchmark","id":"20220505165202-gik63pp","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.1 小批量benchmark","parentId":"20220505165140-trykuy8","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"6.1.1 read操作","id":"20220505165851-77tf82y","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.1.1 read操作","parentId":"20220505165202-gik63pp","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.1.2 write操作","id":"20220505165929-ffk2ljm","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.1.2 write操作","parentId":"20220505165202-gik63pp","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.1.3 record append操作","id":"20220505170023-obbtkp5","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.1.3 record append操作","parentId":"20220505165202-gik63pp","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"6.2 现实中的集群","id":"20220505170044-clials5","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.2 现实中的集群","parentId":"20220505165140-trykuy8","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"6.2.1 存储","id":"20220505170057-d7b2dlb","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.2.1 存储","parentId":"20220505170044-clials5","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.2.2 元数据","id":"20220505170719-44kebtz","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.2.2 元数据","parentId":"20220505170044-clials5","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.2.3 读写速率","id":"20220505170734-2akl3y5","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.2.3 读写速率","parentId":"20220505170044-clials5","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.2.4 master的负载","id":"20220505171006-n84v4np","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.2.4 master的负载","parentId":"20220505170044-clials5","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.2.5 恢复时间","id":"20220505171023-dg0klta","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.2.5 恢复时间","parentId":"20220505170044-clials5","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"6.3 负载分解","id":"20220505171050-basmhn2","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.3 负载分解","parentId":"20220505165140-trykuy8","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"6.3.1 方法和注意事项","id":"20220505171105-6nknprd","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.3.1 方法和注意事项","parentId":"20220505171050-basmhn2","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.3.2 chunkserver的负载","id":"20220505171126-1zjmvl7","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.3.2 chunkserver的负载","parentId":"20220505171050-basmhn2","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.3.3 append vs write","id":"20220505171730-8fgjqne","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.3.3 append vs write","parentId":"20220505171050-basmhn2","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"6.3.4 master的负载","id":"20220505172435-d8y3uer","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#6.3.4 master的负载","parentId":"20220505171050-basmhn2","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5}],"level":4},{"title":"7. 开发经历","id":"20220505172855-ihmv36c","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#7. 开发经历","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"8. 相关工作","id":"20220505173054-kl64sam","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#8. 相关工作","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"9. 结论","id":"20220505173109-2jh06vo","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#9. 结论","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"致谢","id":"20220505173109-hcnaqtk","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#致谢","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"参考文献","id":"20220505173132-jfdphbx","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System#参考文献","parentId":"20220505103842-h8stgqv","path":"/topic/分布式解决方案/分布式理论/三驾马车/The Google File System","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4}],"level":3},{"title":"BigTable中文翻译","id":"20220516160557-fxzscu9","type":"d","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentId":"","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","sort":2,"children":[{"title":"1 摘要","id":"20220516160557-umz7qne","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#1 摘要","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"2 介绍","id":"20220516163425-yd815aj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#2 介绍","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"3 数据模型","id":"20220516164133-iriclv2","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#3 数据模型","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"3.1 行","id":"20220516165146-4hgxip8","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#3.1 行","parentId":"20220516164133-iriclv2","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"3.2 列族","id":"20220516170835-vl6rjd2","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#3.2 列族","parentId":"20220516164133-iriclv2","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"3.3 时间戳","id":"20220516170930-mx82b65","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#3.3 时间戳","parentId":"20220516164133-iriclv2","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"4 API","id":"20220516171003-9ekohjf","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#4 API","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"5 BigTable 构件","id":"20220516171243-p6llvpp","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#5 BigTable 构件","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"6 介绍","id":"20220516171430-ie9o4og","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#6 介绍","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"6.1 Tablet 的位置","id":"20220516171900-ykrafld","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#6.1 Tablet 的位置","parentId":"20220516171430-ie9o4og","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"6.2 Tablet 分配","id":"20220516174913-32fi063","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#6.2 Tablet 分配","parentId":"20220516171430-ie9o4og","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"6.3 Tablet服务","id":"20220516190925-hqcobsg","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#6.3 Tablet服务","parentId":"20220516171430-ie9o4og","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"6.4 空间收缩","id":"20220516191452-8mjvmm3","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#6.4 空间收缩","parentId":"20220516171430-ie9o4og","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"7 优化","id":"20220516191623-d3wj1oi","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7 优化","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"7.1 局部性群组","id":"20220516191656-pk7dxu1","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.1 局部性群组","parentId":"20220516191623-d3wj1oi","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"7.2 压缩","id":"20220516191901-lhpmx4v","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.2 压缩","parentId":"20220516191623-d3wj1oi","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"7.3 通过缓存提高读操作的性能","id":"20220516192034-f3othrg","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.3 通过缓存提高读操作的性能","parentId":"20220516191623-d3wj1oi","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"7.3.1 Bloom 过滤器","id":"20220516192205-3iumls8","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.3.1 Bloom 过滤器","parentId":"20220516192034-f3othrg","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"7.3.2 Commit 日志的实现","id":"20220516192429-ey2mdt4","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.3.2 Commit 日志的实现","parentId":"20220516192034-f3othrg","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"7.3.3 Tablet 恢复提速","id":"20220516192728-nf77i1p","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.3.3 Tablet 恢复提速","parentId":"20220516192034-f3othrg","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"7.3.4 利用不变性","id":"20220516192754-4vievj9","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#7.3.4 利用不变性","parentId":"20220516192034-f3othrg","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5}],"level":4},{"title":"8 性能评估","id":"20220516192913-3gxq79q","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#8 性能评估","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"8.1 单个 Tablet 服务器的性能","id":"20220516193231-nhnixh9","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#8.1 单个 Tablet 服务器的性能","parentId":"20220516192913-3gxq79q","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"8.2 性能提升","id":"20220516193308-x93x1b9","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#8.2 性能提升","parentId":"20220516192913-3gxq79q","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"9 实际应用","id":"20220516193444-d1w8t29","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#9 实际应用","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"9.1 Google Analytics","id":"20220516193603-m38lvlw","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#9.1 Google Analytics","parentId":"20220516193444-d1w8t29","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"9.2 Google Earth","id":"20220516193726-mtgboqj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#9.2 Google Earth","parentId":"20220516193444-d1w8t29","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"9.3 个性化查询","id":"20220516193837-b111cn5","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#9.3 个性化查询","parentId":"20220516193444-d1w8t29","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"10 经验教训","id":"20220516193901-qaxm1vk","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#10 经验教训","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"11 相关工作","id":"20220516194041-hpvjwcj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#11 相关工作","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"12 结论","id":"20220516194122-qq6envs","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译#12 结论","parentId":"20220516160557-fxzscu9","path":"/topic/分布式解决方案/分布式理论/三驾马车/BigTable中文翻译","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4}],"level":3},{"title":"MapReduce","id":"20220504221049-bsx93ro","type":"d","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentId":"","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","sort":3,"children":[{"title":"摘要","id":"20220505103937-lcjd3e9","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#摘要","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"引言","id":"20220505105240-h98eljj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#引言","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"编程模型","id":"20220505105313-qdf9dwb","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#编程模型","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"示例","id":"20220505105345-xb9fho4","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#示例","parentId":"20220505105313-qdf9dwb","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"类型","id":"20220505105409-cotrg62","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#类型","parentId":"20220505105313-qdf9dwb","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"更多示例","id":"20220505105510-rrmkrqj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#更多示例","parentId":"20220505105313-qdf9dwb","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"实现","id":"20220505105527-grlt532","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#实现","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"执行概览","id":"20220505105617-4qkjy1k","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#执行概览","parentId":"20220505105527-grlt532","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"master数据结构","id":"20220505105655-2hwm0mm","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#master数据结构","parentId":"20220505105527-grlt532","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"容错","id":"20220505105705-9rdwqcc","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#容错","parentId":"20220505105527-grlt532","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"worker故障","id":"20220505105719-3zo4wh1","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#worker故障","parentId":"20220505105705-9rdwqcc","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"master故障","id":"20220505105744-cbyzz77","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#master故障","parentId":"20220505105705-9rdwqcc","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6},{"title":"故障出现时的语义","id":"20220505105808-fuywl8f","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#故障出现时的语义","parentId":"20220505105705-9rdwqcc","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":6}],"level":5},{"title":"位置分配","id":"20220505130944-of8p0mr","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#位置分配","parentId":"20220505105527-grlt532","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"任务粒度","id":"20220505130958-lr3jevt","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#任务粒度","parentId":"20220505105527-grlt532","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"任务副本","id":"20220505131009-br4h0pt","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#任务副本","parentId":"20220505105527-grlt532","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"改进","id":"20220505131032-odfu8ql","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#改进","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"分区函数","id":"20220505131041-2qvplqj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#分区函数","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"有序性保证","id":"20220505131049-tiorqxo","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#有序性保证","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"合并函数","id":"20220505131059-wsjue5k","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#合并函数","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"输入输出类型","id":"20220505131107-pxvub0b","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#输入输出类型","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"附属输出","id":"20220505131114-3yduwfi","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#附属输出","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"跳过损坏的记录","id":"20220505131125-zonvz4w","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#跳过损坏的记录","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"本地执行","id":"20220505131135-42q9tl4","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#本地执行","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"状态信息","id":"20220505131142-vpljqdj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#状态信息","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"计数器","id":"20220505131209-f81652i","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#计数器","parentId":"20220505131032-odfu8ql","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"性能","id":"20220505131220-bm5qhxg","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#性能","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"集群配置","id":"20220505131228-j20o361","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#集群配置","parentId":"20220505131220-bm5qhxg","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"grep","id":"20220505131240-lt3z5n1","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#grep","parentId":"20220505131220-bm5qhxg","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"sort","id":"20220505131405-ooockqn","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#sort","parentId":"20220505131220-bm5qhxg","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"任务副本的影响","id":"20220505131601-vd5n8aj","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#任务副本的影响","parentId":"20220505131220-bm5qhxg","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5},{"title":"机器故障","id":"20220505131621-npqjp4d","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#机器故障","parentId":"20220505131220-bm5qhxg","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"研发经历","id":"20220505131629-tx69y5r","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#研发经历","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[{"title":"大规模索引","id":"20220505131730-fgwb5p0","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#大规模索引","parentId":"20220505131629-tx69y5r","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":5}],"level":4},{"title":"相关工作","id":"20220505131750-fua8vue","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#相关工作","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"结论","id":"20220505131810-mv3x4nv","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#结论","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4},{"title":"致谢","id":"20220505131810-zu3sj0f","type":"h","href":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce#致谢","parentId":"20220504221049-bsx93ro","path":"/topic/分布式解决方案/分布式理论/三驾马车/MapReduce","parentPath":"/topic/分布式解决方案/分布式理论/三驾马车","children":[],"level":4}],"level":3}],"level":2},{"title":"理论基础","id":"20220421202816-shcixtm","type":"d","href":"/topic/分布式解决方案/分布式理论/理论基础","parentId":"","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","sort":1,"children":[{"title":"CAP定理","id":"20220421194022-lgdnhqq","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#CAP定理","parentId":"20220421202816-shcixtm","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[{"title":"一致性","id":"20220421194022-us5g6gf","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#一致性","parentId":"20220421194022-lgdnhqq","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":4},{"title":"可用性","id":"20220421194022-kv51un6","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#可用性","parentId":"20220421194022-lgdnhqq","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":4},{"title":"分区容错性","id":"20220421194022-0fbmm72","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#分区容错性","parentId":"20220421194022-lgdnhqq","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":4}],"level":3},{"title":"CAP权衡","id":"20220421194022-s2yw4om","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#CAP权衡","parentId":"20220421202816-shcixtm","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":3},{"title":"BASE定理","id":"20220421194022-ugtbzuw","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#BASE定理","parentId":"20220421202816-shcixtm","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[{"title":"Basically Available（基本可⽤）","id":"20220421194022-hx4rr6j","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#Basically Available（基本可⽤）","parentId":"20220421194022-ugtbzuw","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":4},{"title":"Soft state（软状态）","id":"20220421194022-rficqdw","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#Soft state（软状态）","parentId":"20220421194022-ugtbzuw","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":4},{"title":"Eventually consistent（最终⼀致性）","id":"20220421194022-ywkpga3","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#Eventually consistent（最终⼀致性）","parentId":"20220421194022-ugtbzuw","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":4}],"level":3},{"title":"BASE理论的特点","id":"20220421194022-4710eie","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#BASE理论的特点","parentId":"20220421202816-shcixtm","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":3},{"title":"ACID 和 BASE 的区别与联系","id":"20220421194022-7ykvvqi","type":"h","href":"/topic/分布式解决方案/分布式理论/理论基础#ACID 和 BASE 的区别与联系","parentId":"20220421202816-shcixtm","path":"/topic/分布式解决方案/分布式理论/理论基础","parentPath":"/topic/分布式解决方案/分布式理论","children":[],"level":3}],"level":2},{"title":"共识算法","id":"20220429140840-qysmevv","type":"d","href":"/topic/分布式解决方案/分布式理论/共识算法","parentId":"","path":"/topic/分布式解决方案/分布式理论/共识算法","parentPath":"/topic/分布式解决方案/分布式理论","sort":2,"children":[{"title":"Raft算法","id":"20220429141001-rpid265","type":"d","href":"/topic/分布式解决方案/分布式理论/共识算法/Raft算法","parentId":"","path":"/topic/分布式解决方案/分布式理论/共识算法/Raft算法","parentPath":"/topic/分布式解决方案/分布式理论/共识算法","children":[],"level":3},{"title":"Paxos算法","id":"20220429141011-92v98k0","type":"d","href":"/topic/分布式解决方案/分布式理论/共识算法/Paxos算法","parentId":"","path":"/topic/分布式解决方案/分布式理论/共识算法/Paxos算法","parentPath":"/topic/分布式解决方案/分布式理论/共识算法","children":[],"level":3}],"level":2},{"title":"通讯协议-Gossip","id":"20220429141408-iesct3f","type":"d","href":"/topic/分布式解决方案/分布式理论/通讯协议-Gossip","parentId":"","path":"/topic/分布式解决方案/分布式理论/通讯协议-Gossip","parentPath":"/topic/分布式解决方案/分布式理论","sort":3,"children":[],"level":2}],"level":1},{"title":"流量调度","id":"20220429141613-wbxi2uw","type":"d","href":"/topic/分布式解决方案/流量调度","parentId":"","path":"/topic/分布式解决方案/流量调度","parentPath":"/topic/分布式解决方案","sort":2,"children":[{"title":"流量控制","id":"20220429141625-6pv8964","type":"d","href":"/topic/分布式解决方案/流量调度/流量控制","parentId":"","path":"/topic/分布式解决方案/流量调度/流量控制","parentPath":"/topic/分布式解决方案/流量调度","sort":1,"children":[],"level":2},{"title":"服务路由","id":"20220429141647-rhppejp","type":"d","href":"/topic/分布式解决方案/流量调度/服务路由","parentId":"","path":"/topic/分布式解决方案/流量调度/服务路由","parentPath":"/topic/分布式解决方案/流量调度","sort":2,"children":[],"level":2},{"title":"负载均衡","id":"20220429141638-us0mqmb","type":"d","href":"/topic/分布式解决方案/流量调度/负载均衡","parentId":"","path":"/topic/分布式解决方案/流量调度/负载均衡","parentPath":"/topic/分布式解决方案/流量调度","sort":3,"children":[],"level":2}],"level":1},{"title":"数据调度","id":"20220429141727-g27lor1","type":"d","href":"/topic/分布式解决方案/数据调度","parentId":"","path":"/topic/分布式解决方案/数据调度","parentPath":"/topic/分布式解决方案","sort":3,"children":[{"title":"分布式缓存","id":"20220429141810-k5iup7v","type":"d","href":"/topic/分布式解决方案/数据调度/分布式缓存","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式缓存","parentPath":"/topic/分布式解决方案/数据调度","sort":1,"children":[],"level":2},{"title":"数据库","id":"20220429141819-ylczf3x","type":"d","href":"/topic/分布式解决方案/数据调度/数据库","parentId":"","path":"/topic/分布式解决方案/数据调度/数据库","parentPath":"/topic/分布式解决方案/数据调度","sort":2,"children":[],"level":2},{"title":"分布式事务","id":"20220421194022-xmjo91m","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务","parentPath":"/topic/分布式解决方案/数据调度","sort":4,"children":[{"title":"事务分类","id":"20220422211743-d9h1h4g","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","parentPath":"/topic/分布式解决方案/数据调度/分布式事务","sort":2,"children":[{"title":"刚性事务","id":"20220421194022-4srmmfd","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类#刚性事务","parentId":"20220422211743-d9h1h4g","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","parentPath":"/topic/分布式解决方案/数据调度/分布式事务","children":[],"level":4},{"title":"柔性事务","id":"20220421194022-s4gh03z","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类#柔性事务","parentId":"20220422211743-d9h1h4g","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","parentPath":"/topic/分布式解决方案/数据调度/分布式事务","children":[],"level":4},{"title":"刚性事务的实现","id":"20220423180932-i5c8gry","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","sort":1,"children":[{"title":"2PC(标准XA模型)","id":"20220423180940-j94vqjc","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#2PC(标准XA模型)","parentId":"20220423180932-i5c8gry","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"阶段⼀：提交事务请求","id":"20220423180940-0w8g7kd","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#阶段⼀：提交事务请求","parentId":"20220423180940-j94vqjc","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":6},{"title":"阶段⼆：执⾏事务提交","id":"20220423180940-unw5awm","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#阶段⼆：执⾏事务提交","parentId":"20220423180940-j94vqjc","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":6},{"title":"二阶段的优缺点","id":"20220423180940-p40kvug","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#二阶段的优缺点","parentId":"20220423180940-j94vqjc","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":6}],"level":5},{"title":"3PC","id":"20220423180940-gs7otw2","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#3PC","parentId":"20220423180932-i5c8gry","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"阶段⼀：CanCommit","id":"20220423180940-qdofyw8","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#阶段⼀：CanCommit","parentId":"20220423180940-gs7otw2","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":6},{"title":"阶段⼆：PreCommit","id":"20220423180940-rpcq3av","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#阶段⼆：PreCommit","parentId":"20220423180940-gs7otw2","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":6},{"title":"阶段三：doCommit","id":"20220423180940-nhp5paq","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#阶段三：doCommit","parentId":"20220423180940-gs7otw2","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":6}],"level":5},{"title":"2PC和3PC的区别","id":"20220423180940-0uvutgg","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现#2PC和3PC的区别","parentId":"20220423180932-i5c8gry","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/刚性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":5}],"level":4},{"title":"柔性事务的实现","id":"20220423215330-3iq8jdi","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","sort":2,"children":[{"title":"柔性事务的分类","id":"20220423215701-eorkz50","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#柔性事务的分类","parentId":"20220423215330-3iq8jdi","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"通知型事务","id":"20220424140207-63rfn0i","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#通知型事务","parentId":"20220423215701-eorkz50","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"异步确保型事务","id":"20220424141734-ssqxhgg","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#异步确保型事务","parentId":"20220424140207-63rfn0i","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"MQ事务消息","id":"20220424144320-vvl8bhn","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#MQ事务消息","parentId":"20220424141734-ssqxhgg","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"本地消息表","id":"20220424150800-s3n6tgw","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#本地消息表","parentId":"20220424141734-ssqxhgg","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"MQ事务消息 VS 本地消息表","id":"20220424151513-a09myd0","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#MQ事务消息 VS 本地消息表","parentId":"20220424141734-ssqxhgg","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8}],"level":7}],"level":6},{"title":"通知型事务的问题","id":"20220424152118-6uac32f","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#通知型事务的问题","parentId":"20220423215701-eorkz50","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"消息发送⼀致性","id":"20220424152152-cggmsm0","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#消息发送⼀致性","parentId":"20220424152118-6uac32f","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"常规MQ消息处理流程和特点","id":"20220424153236-47ri1pl","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#常规MQ消息处理流程和特点","parentId":"20220424152152-cggmsm0","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8}],"level":7},{"title":"消息重复投递和业务幂等性","id":"20220424152200-0ncnon5","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#消息重复投递和业务幂等性","parentId":"20220424152118-6uac32f","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":7}],"level":6},{"title":"补偿型事务","id":"20220424153327-wt1eal3","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#补偿型事务","parentId":"20220423215701-eorkz50","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"TCC 事务模型","id":"20220424195356-vie44sx","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#TCC 事务模型","parentId":"20220424153327-wt1eal3","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"工作流程","id":"20220425132329-idymkg7","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#工作流程","parentId":"20220424195356-vie44sx","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8}],"level":7},{"title":"TCC事务模型 VS DTP事务模型","id":"20220425204746-vxjja04","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#TCC事务模型 VS DTP事务模型","parentId":"20220424153327-wt1eal3","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":7},{"title":"Sega事务模型","id":"20220424195411-f3n90gn","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#Sega事务模型","parentId":"20220424153327-wt1eal3","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[{"title":"相关概念","id":"20220426111130-6ywhypq","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#相关概念","parentId":"20220424195411-f3n90gn","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"组成部分","id":"20220426111254-5is2lcf","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#组成部分","parentId":"20220424195411-f3n90gn","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"执⾏顺序","id":"20220426111355-qds8zxl","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#执⾏顺序","parentId":"20220424195411-f3n90gn","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"恢复策略","id":"20220426111558-uz4vsur","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#恢复策略","parentId":"20220424195411-f3n90gn","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"使用条件","id":"20220426140712-sp65fo9","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#使用条件","parentId":"20220424195411-f3n90gn","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8},{"title":"对于ACID的保证","id":"20220426141244-4jza2t0","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#对于ACID的保证","parentId":"20220424195411-f3n90gn","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":8}],"level":7},{"title":"Saga和TCC对⽐","id":"20220426141416-9qybphm","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现#Saga和TCC对⽐","parentId":"20220424153327-wt1eal3","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/柔性事务的实现","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","children":[],"level":7}],"level":6}],"level":5}],"level":4},{"title":"总体的⽅案对⽐","id":"20220426143956-3oea8tm","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/总体的⽅案对⽐","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/事务分类/总体的⽅案对⽐","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/事务分类","sort":3,"children":[],"level":4}],"level":3},{"title":"Seata框架","id":"20220426145647-ux209fp","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架","parentPath":"/topic/分布式解决方案/数据调度/分布式事务","sort":3,"children":[{"title":"Seata模块","id":"20220426152420-ajoches","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架#Seata模块","parentId":"20220426145647-ux209fp","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架","parentPath":"/topic/分布式解决方案/数据调度/分布式事务","children":[],"level":4},{"title":"Seata解决方案","id":"20220426160239-lc5rk4b","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架","sort":2,"children":[{"title":"AT模式","id":"20220426155550-64bgf4n","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","sort":1,"children":[{"title":"使用前提","id":"20220426155558-ub7wm27","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式#使用前提","parentId":"20220426155550-64bgf4n","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"整体机制","id":"20220426155652-aexc9fh","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式#整体机制","parentId":"20220426155550-64bgf4n","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"数据隔离性","id":"20220426155838-n38cpfv","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式#数据隔离性","parentId":"20220426155550-64bgf4n","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[{"title":"写隔离","id":"20220426163905-xprvfiu","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式#写隔离","parentId":"20220426155838-n38cpfv","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"读隔离","id":"20220426163909-u8pc717","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式#读隔离","parentId":"20220426155838-n38cpfv","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/AT模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7}],"level":6}],"level":5},{"title":"TCC模式","id":"20220426160034-fjyztju","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","sort":2,"children":[{"title":"第⼀阶段 Try","id":"20220427100807-9m7182w","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#第⼀阶段 Try","parentId":"20220426160034-fjyztju","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"第⼆阶段 Confirm","id":"20220427100921-tzronqk","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#第⼆阶段 Confirm","parentId":"20220426160034-fjyztju","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"第⼆阶段 Cancel","id":"20220427101038-z7iyl90","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#第⼆阶段 Cancel","parentId":"20220426160034-fjyztju","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"多个事务并发的情况","id":"20220427100807-4uemyxv","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#多个事务并发的情况","parentId":"20220426160034-fjyztju","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"SpringCloud集成TCC","id":"20220427101406-ww6wp56","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#SpringCloud集成TCC","parentId":"20220426160034-fjyztju","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[{"title":"定义TCC接口","id":"20220427103444-0y0c4r2","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#定义TCC接口","parentId":"20220427101406-ww6wp56","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"TCC接口的业务实现","id":"20220427103518-2w7qrfd","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式#TCC接口的业务实现","parentId":"20220427101406-ww6wp56","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7}],"level":6}],"level":5},{"title":"Sega模式","id":"20220426160053-48dfocz","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","sort":3,"children":[{"title":"基于状态机引擎的 Saga 实现","id":"20220427110339-mlxwa7j","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式#基于状态机引擎的 Saga 实现","parentId":"20220426160053-48dfocz","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"springCloud seata saga接入指南","id":"20220427111111-cix2tpk","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式#springCloud seata saga接入指南","parentId":"20220426160053-48dfocz","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[{"title":"配置状态机","id":"20220427111137-9vwxkss","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式#配置状态机","parentId":"20220427111111-cix2tpk","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"配置状态机引擎","id":"20220427111242-xo5yogv","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式#配置状态机引擎","parentId":"20220427111111-cix2tpk","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"状态机执行","id":"20220427111159-vkcgfzm","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式#状态机执行","parentId":"20220427111111-cix2tpk","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/Sega模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7}],"level":6}],"level":5},{"title":"XA模式","id":"20220426160059-gdxxs9l","type":"d","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","sort":4,"children":[{"title":"前提","id":"20220427111429-pypz051","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#前提","parentId":"20220426160059-gdxxs9l","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"整体机制","id":"20220427111429-pc6llsu","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#整体机制","parentId":"20220426160059-gdxxs9l","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":6},{"title":"工作机制","id":"20220427111429-bafbod5","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#工作机制","parentId":"20220426160059-gdxxs9l","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[{"title":"1. 整体运行机制","id":"20220427111429-1be3rze","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#1. 整体运行机制","parentId":"20220427111429-bafbod5","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"2. 数据源代理","id":"20220427111429-y739ajn","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#2. 数据源代理","parentId":"20220427111429-bafbod5","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"3. 分支注册","id":"20220427111429-tbfzu5q","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#3. 分支注册","parentId":"20220427111429-bafbod5","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7},{"title":"XA 模式的使用","id":"20220427111429-gskf5fh","type":"h","href":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式#XA 模式的使用","parentId":"20220427111429-bafbod5","path":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/XA模式","parentPath":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案","children":[],"level":7}],"level":6}],"level":5}],"level":4}],"level":3}],"level":2},{"title":"分布式锁","id":"20220429141850-irtgbjl","type":"d","href":"/topic/分布式解决方案/数据调度/分布式锁","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式锁","parentPath":"/topic/分布式解决方案/数据调度","children":[],"level":2},{"title":"分布式ID","id":"20220429141909-i2lgsn3","type":"d","href":"/topic/分布式解决方案/数据调度/分布式ID","parentId":"","path":"/topic/分布式解决方案/数据调度/分布式ID","parentPath":"/topic/分布式解决方案/数据调度","children":[],"level":2}],"level":1},{"title":"服务治理","id":"20220429141922-rrjykjo","type":"d","href":"/topic/分布式解决方案/服务治理","parentId":"","path":"/topic/分布式解决方案/服务治理","parentPath":"/topic/分布式解决方案","sort":4,"children":[{"title":"服务注册和发现","id":"20220429141942-czxw4td","type":"d","href":"/topic/分布式解决方案/服务治理/服务注册和发现","parentId":"","path":"/topic/分布式解决方案/服务治理/服务注册和发现","parentPath":"/topic/分布式解决方案/服务治理","sort":1,"children":[],"level":2},{"title":"链路追踪","id":"20220429142025-xkfxvz1","type":"d","href":"/topic/分布式解决方案/服务治理/链路追踪","parentId":"","path":"/topic/分布式解决方案/服务治理/链路追踪","parentPath":"/topic/分布式解决方案/服务治理","sort":2,"children":[],"level":2},{"title":"服务监控","id":"20220429141957-p3p01fn","type":"d","href":"/topic/分布式解决方案/服务治理/服务监控","parentId":"","path":"/topic/分布式解决方案/服务治理/服务监控","parentPath":"/topic/分布式解决方案/服务治理","sort":3,"children":[],"level":2},{"title":"服务降级和熔断","id":"20220429142039-iiutoki","type":"d","href":"/topic/分布式解决方案/服务治理/服务降级和熔断","parentId":"","path":"/topic/分布式解决方案/服务治理/服务降级和熔断","parentPath":"/topic/分布式解决方案/服务治理","sort":4,"children":[],"level":2}],"level":1},{"title":"高并发架构","id":"20220505192249-oksx1to","type":"d","href":"/topic/分布式解决方案/高并发架构","parentId":"","path":"/topic/分布式解决方案/高并发架构","parentPath":"/topic/分布式解决方案","sort":5,"children":[],"level":1}],"level":0},"headings":[{"depth":1,"value":"柔性事务的实现","slug":"柔性事务的实现"},{"depth":1,"value":"柔性事务的分类","slug":"柔性事务的分类"},{"depth":2,"value":"通知型事务","slug":"通知型事务"},{"depth":3,"value":"异步确保型事务","slug":"异步确保型事务"},{"depth":4,"value":"MQ事务消息","slug":"mq事务消息"},{"depth":4,"value":"本地消息表","slug":"本地消息表"},{"depth":4,"value":"MQ事务消息 VS 本地消息表","slug":"mq事务消息-vs-本地消息表"},{"depth":2,"value":"通知型事务的问题","slug":"通知型事务的问题"},{"depth":3,"value":"消息发送⼀致性","slug":"消息发送致性"},{"depth":4,"value":"常规MQ消息处理流程和特点","slug":"常规mq消息处理流程和特点"},{"depth":3,"value":"消息重复投递和业务幂等性","slug":"消息重复投递和业务幂等性"},{"depth":2,"value":"补偿型事务","slug":"补偿型事务"},{"depth":3,"value":"TCC 事务模型","slug":"tcc-事务模型"},{"depth":4,"value":"工作流程","slug":"工作流程"},{"depth":3,"value":"TCC事务模型 VS DTP事务模型","slug":"tcc事务模型-vs-dtp事务模型"},{"depth":3,"value":"Sega事务模型","slug":"sega事务模型"},{"depth":4,"value":"相关概念","slug":"相关概念"},{"depth":4,"value":"组成部分","slug":"组成部分"},{"depth":4,"value":"执⾏顺序","slug":"执顺序"},{"depth":4,"value":"恢复策略","slug":"恢复策略"},{"depth":4,"value":"使用条件","slug":"使用条件"},{"depth":4,"value":"对于ACID的保证","slug":"对于acid的保证"},{"depth":3,"value":"Saga和TCC对⽐","slug":"saga和tcc对"}]}},
    "staticQueryHashes": ["630634786","928362550"]}