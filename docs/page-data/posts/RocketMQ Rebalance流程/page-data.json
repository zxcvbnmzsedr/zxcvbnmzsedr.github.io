{
    "componentChunkName": "component---src-templates-article-page-template-tsx",
    "path": "/posts/RocketMQ Rebalance流程",
    "result": {"pageContext":{"id":"/posts/RocketMQ Rebalance流程","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"RocketMQ Rebalance流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RocketMQ存在Rebalance机制，这个机制的作用是将一个Topic下的多个队列，在同一个消费者组下的多个consumer之间重新进行分配。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rebalance机制目的是为了提升消息的并行处理能力。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假设不存在Rebalance机制，那就意味着原本有一个Consumer承载着Topic的8个队列，由于业务的增长无法用单个Consumer可以及时消费，这个时候没有Rebalance机制的存在导致即使增加了Consumer，也不会有任何改变。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Rebalance局限性"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于一个队列最多分配给一个消费者，因此当某个消费者组下的消费者实例大于队列数量时，多余的消费者将分配不到任何队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消费暂停"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"考虑在只有"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"的情况下，其负责消费所有4个队列;"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在新增"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":"，触发"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"时，需要分配2个队列给其消费。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"就需要停止这2个队列的消费，等到这两个队列分配给"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":"后，这两个队列才能继续被消费。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"重复消费"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":" 在消费分配给自己的2个队列时，必须接着从"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"之前已经消费到的offset继续开始消费。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然而默认情况下，offset是异步提交的，如"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"当前消费到offset为10，但是异步提交给broker的offset为8；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么如果"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":"从8的offset开始消费，那么就会有2条消息重复。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"也就是说，"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":" 并不会等待"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer1"}]},{"type":"text","value":"提交完offset后，再进行"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"，因此提交间隔越长，可能造成的重复消费就越多。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消费突刺"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"可能导致重复消费，如果需要重复消费的消息过多；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"或者因为"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"暂停时间过长，导致积压了部分消息。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么都有可能导致在"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"结束之后瞬间可能需要消费很多消息。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Rebalance分配规则"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"是没有做统一分配的，而是消费者通过自己再整体消费者中的偏移量来计算出自己应该获得哪些队列"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"分配算法需要实现下面这个接口:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * Strategy Algorithm for message allocating between consumers\n */\npublic interface AllocateMessageQueueStrategy {\n\n    /**\n     * Allocating by consumer id\n     *\n     * @param consumerGroup current consumer group\n     * @param currentCID current consumer id\n     * @param mqAll message queue set in current topic\n     * @param cidAll consumer set in current consumer group\n     * @return The allocate result of given strategy\n     */\n    List<MessageQueue> allocate(\n        final String consumerGroup,\n        final String currentCID,\n        final List<MessageQueue> mqAll,\n        final List<String> cidAll\n    );\n\n    /**\n     * Algorithm name\n     *\n     * @return The strategy name\n     */\n    String getName();\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个接口的 getName() 只是一个唯一标识，用以标识该消费者实例是用什么负载均衡算法去分配队列。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"关键在于"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"allocate"}]},{"type":"text","value":"这个方法，这个方法的出参就是这次Rebalace的结果 —— 本消费者实例应该去获取的队列列表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其余四个入参分别是："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"消费者组名"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当前的消费者实例的唯一ID，实际上就是client 的ip@instanceName。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"全局这个消费者组可以分配的队列集合"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当前这个消费者组消费者集合（值是消费者实例的唯一id）"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"试想下，假设要你去做一个分配队列的算法，实际上最关键的就是两个视图："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"这个topic下全局当前在线的消费者列表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"topic在全局下有哪些队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如，你知道当前有4个消费者 c1 c2 c3 c4在线，也知道topic 下有 8个队列 q0,q1,q2,q3,q4,…q6，那么8/4=2，你就能知道每个消费者应该获取两个队列。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如： c1–>q0,q1, c2–>q2,q3, c3–>q4,q5, c4–>q5,q6。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实际上，这就是rocketmq默认的分配方案。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但现在唯一的问题在于，我们刚刚说的，我们没有一个中心节点统一地做分配，所以RocketMQ需要做一定的修改。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如对于C1："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“我是C1，我知道当前有4个消费者 c1 c2 c3 c4在线，也知道topic 下有 8个队列 q0,q1,q2,q3,q4,…q6，那么8/4=2，我就能知道每个消费者应该获取两个队列，而我算出来我要的队列是c1–>q0,q1”。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于C2："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“我是C2，我知道当前有4个消费者 c1 c2 c3 c4在线，也知道topic 下有 8个队列 q0,q1,q2,q3,q4,…q6，那么8/4=2，我就能知道每个消费者应该获取两个队列，而我算出来我要的队列是c2–>q2,q3。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"要做到无中心的完成这个目标，唯一需要增加的输入项就是“我是C1”，”我是C2”这样的入参，所以上文提到的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"allocate"}]},{"type":"text","value":"方法下面"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"当前的消费者实例"}]},{"type":"text","value":"的唯一ID就是干这个事用的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面的代码就是RocketMQ的默认分配代码:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,\n        List<String> cidAll) {\n\n        List<MessageQueue> result = new ArrayList<MessageQueue>();\n        if (!check(consumerGroup, currentCID, mqAll, cidAll)) {\n            return result;\n        }\n        int index = cidAll.indexOf(currentCID);\n        int mod = mqAll.size() % cidAll.size();\n        // 求最大可分配个数\n        // q数量不超过客户端的数量，则每个客户端最多分配一个queue\n        // 否则，每个客户端平分，当不够整除时，位置在mod内的按平均值多加1个，mod外的按平均值分\n        int averageSize =\n            mqAll.size() <= cidAll.size() ? 1 : (mod > 0 && index < mod ? mqAll.size() / cidAll.size()\n                + 1 : mqAll.size() / cidAll.size());\n        // 计算当前客户端在queue列表的起始位置\n        // 如果能够整除，或者不够整除时位置在mod内，则直接移动分配到的最大个数移动自己索引的倍数，给其他的客户端留位置\n        // 如果不能整除且在mod外，则移动倍数之后加上mod数\n        int startIndex = (mod > 0 && index < mod) ? index * averageSize : index * averageSize + mod;\n        // 计算分配Q的个数，最后一组不足averageSize的只分配能分配到的个数\n        int range = Math.min(averageSize, mqAll.size() - startIndex);\n        // 按照挪过的位置，计算所属Q的下标\n        for (int i = 0; i < range; i++) {\n            result.add(mqAll.get((startIndex + i) % mqAll.size()));\n        }\n        return result;\n    }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"RocketMQ按照Topic维度进行Rebalance，会导致一个很严重的结果：如果一个消费者组订阅多个Topic，可能会出现分配不均，部分处于排序前列的分配更多的队列，部分消费者处于空闲状态。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"由于订阅多个Topic时可能会出现分配不均，这是在RocketMQ中我们为什么不建议同一个消费者组订阅多个Topic的重要原因。在这一点上，Kafka与不RocketMQ同，其是将所有Topic下的所有队列合并在一起，进行Rebalance，因此相对会更加平均。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"触发时机"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RocketMQ有三个时机会触发："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"启动的时候，会立即触发"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有消费实例数量的变更的时候。broker在接受到消费者的心跳包的时候如果发现这个实例是新的实例的时候，会广播一个消费者数量变更的事件给所有消费者实例；同理，当发现一个消费者实例的连接断了，也会广播这样的一个事件"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"定时触发（默认20秒）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于Broker只会通知一次，不保证client一定会收到变更事件通知，需要通过定时触发避免"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"通知丢失"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"articleNode":{"field":{"contentType":"posts","topic":null},"frontmatter":{"id":"/posts/RocketMQ Rebalance流程","title":"RocketMQ Rebalance流程","date":"2022-05-11 17:06","absolute_path":"/posts/RocketMQ Rebalance流程"},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"RocketMQ Rebalance流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RocketMQ存在Rebalance机制，这个机制的作用是将一个Topic下的多个队列，在同一个消费者组下的多个consumer之间重新进行分配。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Rebalance机制目的是为了提升消息的并行处理能力。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假设不存在Rebalance机制，那就意味着原本有一个Consumer承载着Topic的8个队列，由于业务的增长无法用单个Consumer可以及时消费，这个时候没有Rebalance机制的存在导致即使增加了Consumer，也不会有任何改变。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Rebalance局限性"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于一个队列最多分配给一个消费者，因此当某个消费者组下的消费者实例大于队列数量时，多余的消费者将分配不到任何队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消费暂停"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"考虑在只有"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"的情况下，其负责消费所有4个队列;"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在新增"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":"，触发"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"时，需要分配2个队列给其消费。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"就需要停止这2个队列的消费，等到这两个队列分配给"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":"后，这两个队列才能继续被消费。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"重复消费"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":" 在消费分配给自己的2个队列时，必须接着从"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"之前已经消费到的offset继续开始消费。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然而默认情况下，offset是异步提交的，如"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 1"}]},{"type":"text","value":"当前消费到offset为10，但是异步提交给broker的offset为8；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么如果"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":"从8的offset开始消费，那么就会有2条消息重复。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"也就是说，"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer 2"}]},{"type":"text","value":" 并不会等待"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Consumer1"}]},{"type":"text","value":"提交完offset后，再进行"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"，因此提交间隔越长，可能造成的重复消费就越多。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"消费突刺"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"可能导致重复消费，如果需要重复消费的消息过多；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"或者因为"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"暂停时间过长，导致积压了部分消息。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么都有可能导致在"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"结束之后瞬间可能需要消费很多消息。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Rebalance分配规则"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"是没有做统一分配的，而是消费者通过自己再整体消费者中的偏移量来计算出自己应该获得哪些队列"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"分配算法需要实现下面这个接口:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * Strategy Algorithm for message allocating between consumers\n */\npublic interface AllocateMessageQueueStrategy {\n\n    /**\n     * Allocating by consumer id\n     *\n     * @param consumerGroup current consumer group\n     * @param currentCID current consumer id\n     * @param mqAll message queue set in current topic\n     * @param cidAll consumer set in current consumer group\n     * @return The allocate result of given strategy\n     */\n    List<MessageQueue> allocate(\n        final String consumerGroup,\n        final String currentCID,\n        final List<MessageQueue> mqAll,\n        final List<String> cidAll\n    );\n\n    /**\n     * Algorithm name\n     *\n     * @return The strategy name\n     */\n    String getName();\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个接口的 getName() 只是一个唯一标识，用以标识该消费者实例是用什么负载均衡算法去分配队列。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"关键在于"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"allocate"}]},{"type":"text","value":"这个方法，这个方法的出参就是这次Rebalace的结果 —— 本消费者实例应该去获取的队列列表。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其余四个入参分别是："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"消费者组名"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当前的消费者实例的唯一ID，实际上就是client 的ip@instanceName。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"全局这个消费者组可以分配的队列集合"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当前这个消费者组消费者集合（值是消费者实例的唯一id）"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"试想下，假设要你去做一个分配队列的算法，实际上最关键的就是两个视图："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"这个topic下全局当前在线的消费者列表"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"topic在全局下有哪些队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如，你知道当前有4个消费者 c1 c2 c3 c4在线，也知道topic 下有 8个队列 q0,q1,q2,q3,q4,…q6，那么8/4=2，你就能知道每个消费者应该获取两个队列。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"例如： c1–>q0,q1, c2–>q2,q3, c3–>q4,q5, c4–>q5,q6。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实际上，这就是rocketmq默认的分配方案。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"但现在唯一的问题在于，我们刚刚说的，我们没有一个中心节点统一地做分配，所以RocketMQ需要做一定的修改。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如对于C1："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“我是C1，我知道当前有4个消费者 c1 c2 c3 c4在线，也知道topic 下有 8个队列 q0,q1,q2,q3,q4,…q6，那么8/4=2，我就能知道每个消费者应该获取两个队列，而我算出来我要的队列是c1–>q0,q1”。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于C2："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"“我是C2，我知道当前有4个消费者 c1 c2 c3 c4在线，也知道topic 下有 8个队列 q0,q1,q2,q3,q4,…q6，那么8/4=2，我就能知道每个消费者应该获取两个队列，而我算出来我要的队列是c2–>q2,q3。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"要做到无中心的完成这个目标，唯一需要增加的输入项就是“我是C1”，”我是C2”这样的入参，所以上文提到的"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"allocate"}]},{"type":"text","value":"方法下面"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"当前的消费者实例"}]},{"type":"text","value":"的唯一ID就是干这个事用的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面的代码就是RocketMQ的默认分配代码:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public List<MessageQueue> allocate(String consumerGroup, String currentCID, List<MessageQueue> mqAll,\n        List<String> cidAll) {\n\n        List<MessageQueue> result = new ArrayList<MessageQueue>();\n        if (!check(consumerGroup, currentCID, mqAll, cidAll)) {\n            return result;\n        }\n        int index = cidAll.indexOf(currentCID);\n        int mod = mqAll.size() % cidAll.size();\n        // 求最大可分配个数\n        // q数量不超过客户端的数量，则每个客户端最多分配一个queue\n        // 否则，每个客户端平分，当不够整除时，位置在mod内的按平均值多加1个，mod外的按平均值分\n        int averageSize =\n            mqAll.size() <= cidAll.size() ? 1 : (mod > 0 && index < mod ? mqAll.size() / cidAll.size()\n                + 1 : mqAll.size() / cidAll.size());\n        // 计算当前客户端在queue列表的起始位置\n        // 如果能够整除，或者不够整除时位置在mod内，则直接移动分配到的最大个数移动自己索引的倍数，给其他的客户端留位置\n        // 如果不能整除且在mod外，则移动倍数之后加上mod数\n        int startIndex = (mod > 0 && index < mod) ? index * averageSize : index * averageSize + mod;\n        // 计算分配Q的个数，最后一组不足averageSize的只分配能分配到的个数\n        int range = Math.min(averageSize, mqAll.size() - startIndex);\n        // 按照挪过的位置，计算所属Q的下标\n        for (int i = 0; i < range; i++) {\n            result.add(mqAll.get((startIndex + i) % mqAll.size()));\n        }\n        return result;\n    }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"RocketMQ按照Topic维度进行Rebalance，会导致一个很严重的结果：如果一个消费者组订阅多个Topic，可能会出现分配不均，部分处于排序前列的分配更多的队列，部分消费者处于空闲状态。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"由于订阅多个Topic时可能会出现分配不均，这是在RocketMQ中我们为什么不建议同一个消费者组订阅多个Topic的重要原因。在这一点上，Kafka与不RocketMQ同，其是将所有Topic下的所有队列合并在一起，进行Rebalance，因此相对会更加平均。"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"触发时机"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RocketMQ有三个时机会触发："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"启动的时候，会立即触发"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有消费实例数量的变更的时候。broker在接受到消费者的心跳包的时候如果发现这个实例是新的实例的时候，会广播一个消费者数量变更的事件给所有消费者实例；同理，当发现一个消费者实例的连接断了，也会广播这样的一个事件"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"定时触发（默认20秒）。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于Broker只会通知一次，不保证client一定会收到变更事件通知，需要通过定时触发避免"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rebalance"}]},{"type":"text","value":"通知丢失"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"RocketMQ Rebalance流程"},{"depth":1,"value":"Rebalance局限性"},{"depth":1,"value":"Rebalance分配规则"},{"depth":1,"value":"触发时机"}],"path":"/posts/RocketMQ Rebalance流程"},"headings":[{"depth":1,"value":"RocketMQ Rebalance流程","slug":"rocketmq-rebalance流程"},{"depth":1,"value":"Rebalance局限性","slug":"rebalance局限性"},{"depth":1,"value":"Rebalance分配规则","slug":"rebalance分配规则"},{"depth":1,"value":"触发时机","slug":"触发时机"}]}},
    "staticQueryHashes": ["630634786","928362550"]}