{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/软路由/记录一次NAS系统崩溃","result":{"data":{"siYuan":{"excerpt":"记录一次NAS系统崩溃 由于之前没有考虑到nas的强大，在不断的装docker之后，磁盘竟然满了，后面扩容就一不小心将扩展分区给删除了，虽然成功的扩容了磁盘，但只成功运行了几天，后面一次断点重启，就直接导致无法开机（grub的问题），因为里...","raw":"# 记录一次NAS系统崩溃\n\n由于之前没有考虑到nas的强大，在不断的装docker之后，磁盘竟然满了，后面扩容就一不小心将扩展分区给删除了，虽然成功的扩容了磁盘，但只成功运行了几天，后面一次断点重启，就直接导致无法开机（grub的问题），因为里面就一些电影文件，所以索性心一横直接重装了系统。\n\n我重新审视了一下我自己的需求，无非是影音文件的共享，顺带装个逼，又考虑到J3160这颗垃圾U着实撑不起场面，所以就抛弃了之前用OMV5装docker这种庞大臃肿的方案，能原生的就原生去装。\n\nOMV5的插件比OMV4少了太多，原生插件堪称基类，基本上都是docker的方案来解决，既然如此，那么用OMV6其实并没有太大的区别，反正都没啥插件，还能体验新系统，所以就折腾起OMV6了。\n\n再次记录一下装OMV6的过程。\n\n使用ISO傻瓜式安装过程就不在此叙述了~~~~\n\n## 安装完之后的问题\n\n### 中文乱码\n\n安装完，第一件要解决的就是中文乱码问题。\n\n装完之后使用`local`e命令输出的编码是`zh_CN.UTF-8` 不知道为啥会导致ls 查看中文目录的时候乱码。\n\n解决方案: 使用 `dpkg-reconfigure locales` 重新配置编码方式 为 `en_US.UTF-8`\n\n### smb协议兼容问题\n\n我用小米电视连接smb的时候，始终无法连接上，网上查询得知小米电视采用的是`SMB1.0`的协议 ,然后OMV6的需要手动修改一下SMB支持的最低版本\n\n在图形化界面的SMB设置那里设置 `server min protocol = CORE`\n\n![image-20220108225924680](https://www.shiyitopo.tech/uPic/image-20220108225924680.png)\n\n## 需要安装的软件\n\n这些软件原本我是采用docker进行安装，现在都改为原生安装\n\n为了这颗破U，能省则省\n\n### airconnect\n\n目的为了能将苹果的音频投放到我的小爱音箱\n\n从 https://github.com/philippe44/AirConnect 下载对应架构的 airupnp\n\n我的是 airupnp-x86-64,\n\n```shell\nwget https://github.com/philippe44/AirConnect/raw/master/bin/airupnp-x86-64\nmv airupnp-x86-64 /usr/bin/air\n```\n\n设置服务\n\n```shell\nvim /usr/lib/systemd/system/air.service\t\n## 写入\n[Unit]\nDescription=air server\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/bin/air  -Z\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n\n## 执行\nsystemctl daemon-reload\nsystemctl start air\nsystemctl enable air\nsystemctl status air\n```\n\n### webdav\n\n将smb转为更加通用的webdav协议\n\n用的是https://github.com/hacdias/webdav，发现这个用go写的，最为轻量才几M\n\n下载对应架构的webdav执行文件，放到/usr/bin目录下面\n\n配置文件说明:\n\n```shell\n# 监听任意网卡，多网卡可指定对应ip\naddress: 0.0.0.0\nport: 8081\nauth: true\nprefix: /\n\nmodify: true\nrules: []\n\n# 跨域设置\ncors:\n  enabled: true\n  credentials: true\n  allowed_headers:\n    - Depth\n  allowed_hosts:\n    - http://localhost:8081\n  allowed_methods:\n    - GET\n  exposed_headers:\n    - Content-Length\n    - Content-Range\n\n# 用户信息，如果 auth 为 true 生效\nusers:\n  - username: admin\n    password: admin\n    # 配置自己的硬盘路径\n    scope: /srv/dev-disk-by-uuid-c78a92c0-7c20-4480-b997-1f88c9d0cd4d/\n```\n\n更多的就去找官网吧，我将这个文件保存为 /home/webdav/webdav.config.yml （个人习惯保存在home目录下）\n\n将webdav 配置成服务\n\n```shell\n[Unit]\nDescription=WebDAV server\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/bin/webdav --config /home/webdav/webdav.config.yml\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```shell\nsystemctl daemon-reload\nsystemctl start webdav\nsystemctl enable webdav\nsystemctl status webdav\n```\n\n### 远程挂载webdav\n\n因为有大佬将阿里云盘封装成webdav协议，所以我们可以通过挂载webdav的方式将阿里云盘作为我们的本地盘.\n\n原本的挂载阿里云盘的服务使用docker部署的，着实太重，后面我就给迁移到了openwrt上面去了，就不在nas上进行挂载了，nas上只需要挂载阿里云盘的webdav服务即可，挂载教程 https://github.com/messense/aliyundrive-webdav\n\n~~nas上挂载webdav的方法是采用davfs2~~\n\n```shell\n## 安装davfs2\n apt-get install davfs2 -y\n ## 挂载，自行修改webdav的ip 和 挂载路径\n mount  -t davfs -o noexec http://192.168.31.3:8080 /srv/dev-disk-by-uuid-c78a92c0-7c20-4480-b997-1f88c9d0cd4d/aliyun/\n```\n\n~~如果想要开机自动挂载 WebDAV，并且自动输入用户名和密码，需要将`/etc/davfs2/davfs2.conf` 中的 `use_lock` 解除注释，并将值修改为 `0`，接下来在 ` /etc/davfs2/secrets` 末尾添加 `WebDAV地址 用户名 密码`，最后在 `/etc/fstab` 末尾添加 `WebDAV地址 /mnt/webdav davfs rw,user,_netdev 0 0`。~~\n\n使用过程中发现，davfs2挂载的时候会出现无法播放以及网络资源占用的莫名情况，故改为rclone挂载。\n\n安装rclone:\n\n```shell\ncurl https://rclone.org/install.sh | sudo bash\nrclone\n## 根据命令行给出的提示进行配置操作\n```\n\n修改`/etc/fuse.conf`,加上`user_allow_other` 表示允许非root用户可以登录\n\n挂载文件的命令:\n\n```shell\nrclone mount ali:/ /srv/dev-disk-by-uuid-c78a92c0-7c20-4480-b997-1f88c9d0cd4d/aliyun --cache-dir /tmp --allow-other --vfs-cache-mode full --allow-non-empty  \n```\n\n注册成服务\n\n```\ncommand=\"mount ali:/ /srv/dev-disk-by-uuid-c78a92c0-7c20-4480-b997-1f88c9d0cd4d/aliyun --cache-dir /tmp --allow-other --vfs-cache-mode full --allow-non-empty\"\ncat > /etc/systemd/system/rclone.service <<EOF\n[Unit]\nDescription=Rclone\nAfter=network-online.target\n\n[Service]\nType=simple\nExecStart=$(command -v rclone) ${command}\nRestart=on-abort\nUser=root\n\n[Install]\nWantedBy=default.target\nEOF\n```\n\n### 内网穿透\n\n我发现国内某头部厂商基于`ngork`提供了一个不限速的内网穿透工具，为了它能存活的久一点，我就不透露它的名字了。\n\n因为是基于`ngork`，使用`nohup`无法使其在后台运行，使用`screen`能够后台运行但是无法开机启动，因此我们需要安装`supervisord`来控制进程的启动\n\n安装: supervisor\n\n```shell\napt-cache show supervisor\napt install supervisor\nsupervisord -v\n```\n\n设置启动服务\n\n```shell\nvi /etc/supervisor/conf.d/ngrok.conf\n\n# 项目名称，对应前面supervisorctl命令里的服务名称\n[program:ngrok] \n# 目录\ndirectory = /usr/local/bin/\n# 执行的命令\ncommand = /usr/local/bin/ngrok http -log stdout --authtoken yourtoken 192.168.0.200:4000\n# 在 supervisord 启动的时候也自动启动\nautostart = true\n# 启动 5 秒后没有异常退出，就当作已经正常启动了\nstartsecs = 5\n# 程序异常退出后自动重启\nautorestart = true\n# 启动失败自动重试次数，默认是 3\nstartretries = 3\n# 执行命令的用户\nuser = root\n# 把 stderr 重定向到 stdout，默认 false\nredirect_stderr = true\n# stdout 日志文件大小，默认 50MB\nstdout_logfile_maxbytes = 50MB\n# stdout 日志文件备份数\nstdout_logfile_backups = 20\n# stdout 日志文件\nstdout_logfile = /var/log/supervisor/ngrok.log\n```\n\n运行:\n\n```shell\n# 加载 ngrok 服务\nsupervisorctl start ngrok\n```\n\n### zidr 管理文件\n\n这也是一个神器\n\nnginx配置，直接使用omv的php 的socket进行通讯:\n\n```nginx\nserver {\n      listen 80;\n      server_name zidr;\n      index zdir/index.php index.html index.htm index.php;\n      root /data/wwwroot/default;\n      access_log /var/log/zdir.log combined;\n      #rewrite\n      rewrite ^/static/(.+) /zdir/static/$1 break;\n     \n      #error_page 404 /404.html;\n      #error_page 502 /502.html;\n\n      location ~ [^/]\\.php(/|$) {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/run/php/php7.4-fpm-openmediavault-webgui.sock;\n        fastcgi_index index.php;\n        fastcgi_read_timeout 60s;\n        include fastcgi.conf;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n      }\n\n      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ {\n        expires 30d;\n        access_log off;\n      }\n      location ~ .*\\.(js|css)?$ {\n        expires 7d;\n        access_log off;\n      }\n      location ~ /\\.ht {\n        deny all;\n      }\n    }\n```\n\n创建路径:\n\n```shell\nmkdir -p  /data/wwwroot/default && cd /data/wwwroot/default\ngit clone https://github.com/helloxz/zdir.git\n## 将目录软连接到这里\nln -s /srv/dev dev\n```\n","field":{"slug":"/posts/软路由/记录一次NAS系统崩溃"},"frontmatter":{"title":"记录一次NAS系统崩溃","tags":["软路由"],"date":"2022-04-21","description":"记录一次NAS系统崩溃 由于之前没有考虑到nas的强大，在不断的装docker之后，磁盘竟然满了，后面扩容就一不小心将扩展分区给删除了，虽然成功的扩容了磁盘，但只成功运行了几天，后面一次断点重启，就直接导致无法开机（grub的问题），因为里..."}},"prev":{"frontmatter":{"title":"定时备份数据"},"field":{"slug":"/posts/软路由/定时备份数据"}},"next":{"frontmatter":{"title":"2021年XBOX最新解锁的方法"},"field":{"slug":"/posts/游戏/2021年XBOX最新解锁的方法"}}},"pageContext":{"slug":"/posts/软路由/记录一次NAS系统崩溃","prevSlug":"/posts/软路由/定时备份数据","nextSlug":"/posts/游戏/2021年XBOX最新解锁的方法"}},"staticQueryHashes":["1284643331","2841359383"]}