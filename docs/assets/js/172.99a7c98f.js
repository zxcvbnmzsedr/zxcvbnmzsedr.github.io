(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{488:function(t,_,s){"use strict";s.r(_);var v=s(6),a=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"zset的底层实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#zset的底层实现"}},[t._v("#")]),t._v(" ZSet的底层实现")]),t._v(" "),_("p",[t._v("当有序集合中包含的元素数量超过服务器属性")]),t._v(" "),_("p",[t._v("zset_max_ziplist_entries 的值（默认值为 128 ），")]),t._v(" "),_("p",[t._v("或者 有序集合中新添加元素的 member 的长度大于服务器属性")]),t._v(" "),_("p",[t._v("zset_max_ziplist_value 的值（默认值为 64 ）时，")]),t._v(" "),_("p",[t._v("redis会使用 跳跃表 作为有序集合的底层实现。")]),t._v(" "),_("p",[t._v("否则会使用ziplist作为有序集合的底层实现")]),t._v(" "),_("h1",{attrs:{id:"跳表是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#跳表是什么"}},[t._v("#")]),t._v(" 跳表是什么?")]),t._v(" "),_("p",[t._v("跳表 = 链表 + 多级索引.")]),t._v(" "),_("p",[t._v("skiplist是一种以空间换取时间的结构。 时间复杂度O(logN),空间复杂度O(n);")]),t._v(" "),_("p",[t._v("由于链表，无法进行二分查找，因此借鉴数据库索引的思想，提取出链表中关键节点（索引），先在关键节点上查找，再进入下层链表查找。")]),t._v(" "),_("p",[t._v("提取多层关键节点，就形成了跳跃表.")]),t._v(" "),_("h2",{attrs:{id:"优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),_("p",[t._v("只有在 数据量较大的情况下 才能体现出来优势。\n而且应该是 读多写少的情况下 才能使用，所以它的适用范围应该还是比较有限的")]),t._v(" "),_("p",[t._v("维护成本相对要高, 新增或者删除时需要把所有索引都更新一遍；")]),t._v(" "),_("p",[t._v("最后在新增和删除的过程中的更新，时间复杂度也是O(log n)")])])}),[],!1,null,null,null);_.default=a.exports}}]);