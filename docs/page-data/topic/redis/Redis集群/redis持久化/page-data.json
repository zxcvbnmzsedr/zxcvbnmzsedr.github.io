{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/redis/Redis集群/redis持久化",
    "result": {"pageContext":{"id":"/topic/redis/Redis集群/redis持久化","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"redis持久化"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为Redis是一个内存数据库，所有的数据都保存在内存里面，一旦发生关机或者重启，内存中的数据都会丢失，所以为了重启的时候能够及时的恢复数据，redis提供了持久化机制。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在运行正常期间根据策略生成持久化文件，在机器重启后，能够根据持久化文件恢复内存中的数据。即使redis有主从同步的模式，主节点挂掉之后可以让从节点变成主节点，但是如果整个机房都发生停电，那么从节点和从节点内存中的数据都会丢失。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"策略"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"持久化策略"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"大概原理"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"优缺点"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"配置方法"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"AOF"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"记录所有的操作命令，"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"并以文本的形式追加到文件中"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"文件大，恢复慢，性能影响大，但实时性高，丢失数据最少,持久化保存的数据更加完整"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"默认关闭"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"redis.conf中appendonly设置为true"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"RDB"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"当前进程数据生成快照保存到硬盘"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"文件小，恢复快，不影响性能，实时性低，兼容性差(老版本redis不兼容新版本的RDB文件)"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"默认开启，满足一定条件就会触发RDB文件的生成"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"也可以执行SAVE和BGSAVE手动触发"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"混合持久化"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"(Redis 4.0 之后新增)"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"再将后续的操作命令以 AOF 的格式存入文件"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"Redis 可以更快的启动，同时结合 AOF 的优点，又减低了大量数据丢失的风险。"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"AOF 文件中添加了 RDB 格式的内容，会使得 AOF 文件的可读性会很差，不容易阅读"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"默认关闭，通过redis.conf中的aof-use-rdb-preamble开启"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"AOF持久化"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022911658.jpeg","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"执行流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"AOF的持久化主要是在Redis执行命令之后，将命令添加到aof_buf的末尾,然后在每次事件结束时根据appendfsync的配置，来决定是否将aof_buf缓冲区的内容写入和保存到AOF文件中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基于性能考虑一般生产环境的配置都是everysec"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"appendfsync 参数有三个选项："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"always：每处理一个命令都将 aof_buf 缓冲区中的所有内容写入并同步到AOF 文件，即每个命令都刷盘。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"everysec：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件，如果上次同步 AOF 文件的时间距离现在超过一秒钟， 那么再次对 AOF 文件进行同步， 并且这个同步操作是异步的，由一个后台线程专门负责执行，即每秒刷盘1次。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"no：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 但并不对 AOF 文件进行同步， 何时同步由操作系统来决定。即不执行刷盘，让操作系统自己执行刷盘。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"怎么防止AOF文件越来越大？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为了防止AOF文件越来越大，可以通过执行BGREWRITEAOF命令，会fork子进程出来，读取当前数据库的键值对信息，生成所需的写命令，写入新的AOF文件。在生成期间，父进程继续正常处理请求，执行修改命令后，不仅会将命令写入aof_buf缓冲区，还会写入重写aof_buf缓冲区。当新的AOF文件生成完毕后，子进程父进程发送信号，父进程将重写aof_buf缓冲区的修改命令写入新的AOF文件，写入完毕后，对新的AOF文件进行改名，原子地（atomic）地替换旧的AOF文件。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"BGREWRITEAOF命令"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"BGREWRITEAOF命令用于异步执行一个 AOF 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"注意："}]},{"type":"text","value":"\n从 Redis 2.4 开始， AOF 重写由 Redis 自行触发， BGREWRITEAOF 仅仅用于手动触发重写操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"AOF文件追加阻塞？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"修改命令添加到aof_buf之后，如果配置是everysec那么会每秒执行fsync操作，调用write写入磁盘一次，但是如果硬盘负载过高，fsync操作可能会超过1s，Redis主线程持续高速向aof_buf写入命令，硬盘的负载可能会越来越大，IO资源消耗更快，所以Redis的处理逻辑是会对比上次fsync成功的时间，如果超过2s，则主线程阻塞直到fsync同步完成，所以最多可能丢失2s的数据，而不是1s。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"RDB持久化"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RDB持久化指的是在满足一定的触发条件时（在一个的时间间隔内执行修改命令达到一定的数量，或者手动执行SAVE和BGSAVE命令），对这个时间点的数据库所有键值对信息生成一个压缩文件dump.rdb，然后将旧的删除，进行替换。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"执行流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实现原理是fork一个子进程，然后对键值对进行遍历，生成rdb文件，在生成过程中，父进程会继续处理客户端发送的请求，当父进程要对数据进行修改时，会对相关的内存页进行拷贝，修改的是拷贝后的数据。（也就是COPY ON WRITE，写时复制技术，就是当多个调用者同时请求同一个资源，如内存或磁盘上的数据存储，他们会共用同一个指向资源的指针，指向相同的资源，只有当一个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给这个调用者，其他调用者还是使用最初的资源,在CopyOnWriteArrayList的实现中，也有用到，添加或者插入一个新元素时过程是，加锁，对原数组进行复制，然后添加新元素，然后替代旧数组，解锁）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022911660.png","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"0"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk3"]},"children":[{"type":"text","value":"//CopyOnWriteArrayList的添加元素的方法"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"boolean"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" e) {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"final"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"ReentrantLock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"try"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Object"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"[] "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"elements"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"getArray"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"len"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"elements"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"length"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Object"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"[] "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"newElements"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"copyOf"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"(elements, len + "}]},{"type":"element","tagName":"span","properties":{"className":["mtk7"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":");"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    newElements[len] = e;"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"setArray"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"(newElements);"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"true"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  } "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"finally"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"unlock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  }"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"混合持久化（Redis4.0+）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"执行流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"混合持久化同样也是通过"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"bgrewriteaof"}]},{"type":"text","value":"命令完成的，不同的是当开启混合持久化时，fork出的子进程先将当前内存中的键值对信息全量的以RDB方式写入aof文件，然后在将重写缓冲区的增量命令以AOF方式写入到文件，写入完成后通知主进程更新统计信息，并将新的含有RDB格式和AOF格式的AOF文件替换旧的的AOF文件。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"简单的说：新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Redis的数据恢复策略"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"优先级:\n混合持久化 > AOF > RDB"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果配置了混合持久化，那么根据混合持久化文件进行恢复数据。（Redis4.0+）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"只配置 AOF ，重启时加载 AOF 文件恢复数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"同时配置了 RDB 和 AOF ，启动时只加载 AOF文件恢复数据，如果AOF文件损坏，那么根据RDB文件恢复数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"只配置 RDB，启动时加载RDB持久化文件恢复数据"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Redis持久化策略该如何进行选择"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"（因为混合持久化是Redis 4.0之后支持的，目前一般生成环境使用的Redis版本可能都还较低，所以这里的策略选择主要是针对AOF持久和RDB持久化进行技术选型。）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以下是几种持久化方案选择的场景："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1.不需要考虑数据丢失的情况"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么不需要考虑持久化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2.单机实例情况下"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以接受丢失十几分钟及更长时间的数据，可以选择RDB持久化，对性能影响小，如果只能接受秒级的数据丢失，只能选择AOF持久化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3.在主从环境下"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为主服务器在执行修改命令后，会将命令发送给从服务器，从服务进行执行后，与主服务器保持数据同步，实现数据热备份，在master宕掉后继续提供服务。同时也可以进行读写分离，分担Redis的读请求。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要持久化，因为不进行持久化，主服务器，从服务器同时出现故障时，会导致数据丢失。（例如：机房全部机器断电）。如果系统中有自动拉起机制（即检测到服务停止后重启该服务）将master自动重启，由于没有持久化文件，那么master重启后数据是空的，slave同步数据也变成了空的。应尽量避免“自动拉起机制”和“不做持久化”同时出现。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以一般可以采用以下方案："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主服务器不开启持久化，使得主服务器性能更好。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从服务器开启AOF持久化，关闭RDB持久化，并且定时对AOF文件进行备份，以及在凌晨执行bgaofrewrite命令来进行AOF文件重写，减小AOF文件大小。（当然如果对数据丢失容忍度高也可以开启RDB持久化，关闭AOF持久化）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"4.异地灾备"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一般性的故障（停电，关机）不会影响到磁盘，但是一些灾难性的故障（地震，洪水）会影响到磁盘，所以需要定时把单机上或从服务器上的AOF文件，RDB文件备份到其他地区的机房。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n"}]}],"data":{"quirksMode":false}},"html":"<h1 id=\"redis持久化\">redis持久化</h1>\n<p updated=\"20220712103446\">因为Redis是一个内存数据库，所有的数据都保存在内存里面，一旦发生关机或者重启，内存中的数据都会丢失，所以为了重启的时候能够及时的恢复数据，redis提供了持久化机制。</p>\n<p updated=\"20220712103446\">在运行正常期间根据策略生成持久化文件，在机器重启后，能够根据持久化文件恢复内存中的数据。即使redis有主从同步的模式，主节点挂掉之后可以让从节点变成主节点，但是如果整个机房都发生停电，那么从节点和从节点内存中的数据都会丢失。</p>\n<h1 id=\"策略\">策略</h1>\n<table updated=\"20220712103446\">\n<thead>\n<tr>\n<th align=\"center\">持久化策略</th>\n<th align=\"center\">大概原理</th>\n<th align=\"center\">优缺点</th>\n<th align=\"center\">配置方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">AOF</td>\n<td align=\"center\">记录所有的操作命令，<br />并以文本的形式追加到文件中</td>\n<td align=\"center\">文件大，恢复慢，性能影响大，但实时性高，丢失数据最少,持久化保存的数据更加完整</td>\n<td align=\"center\">默认关闭<br />redis.conf中appendonly设置为true</td>\n</tr>\n<tr>\n<td align=\"center\">RDB</td>\n<td align=\"center\">当前进程数据生成快照保存到硬盘</td>\n<td align=\"center\">文件小，恢复快，不影响性能，实时性低，兼容性差(老版本redis不兼容新版本的RDB文件)</td>\n<td align=\"center\">默认开启，满足一定条件就会触发RDB文件的生成<br />也可以执行SAVE和BGSAVE手动触发</td>\n</tr>\n<tr>\n<td align=\"center\">混合持久化<br />(Redis 4.0 之后新增)</td>\n<td align=\"center\">在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，<br />再将后续的操作命令以 AOF 的格式存入文件</td>\n<td align=\"center\">Redis 可以更快的启动，同时结合 AOF 的优点，又减低了大量数据丢失的风险。<br />AOF 文件中添加了 RDB 格式的内容，会使得 AOF 文件的可读性会很差，不容易阅读</td>\n<td align=\"center\">默认关闭，通过redis.conf中的aof-use-rdb-preamble开启</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"AOF持久化\">AOF持久化</h1>\n<p updated=\"20220712103446\"><span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022911658.jpeg\" alt=\"img\" /></span></p>\n<h2 id=\"执行流程\">执行流程</h2>\n<p updated=\"20220712103446\">AOF的持久化主要是在Redis执行命令之后，将命令添加到aof_buf的末尾,然后在每次事件结束时根据appendfsync的配置，来决定是否将aof_buf缓冲区的内容写入和保存到AOF文件中。</p>\n<p updated=\"20220712103446\">基于性能考虑一般生产环境的配置都是everysec</p>\n<p updated=\"20220712103446\"><strong>appendfsync 参数有三个选项：</strong></p>\n<ol updated=\"20220712103446\">\n<li id=\"20220712103446-rkh0l90\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">always：每处理一个命令都将 aof_buf 缓冲区中的所有内容写入并同步到AOF 文件，即每个命令都刷盘。</p>\n</li>\n<li id=\"20220712103446-jt7xix3\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">everysec：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件，如果上次同步 AOF 文件的时间距离现在超过一秒钟， 那么再次对 AOF 文件进行同步， 并且这个同步操作是异步的，由一个后台线程专门负责执行，即每秒刷盘1次。</p>\n</li>\n<li id=\"20220712103446-q7wayxz\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">no：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 但并不对 AOF 文件进行同步， 何时同步由操作系统来决定。即不执行刷盘，让操作系统自己执行刷盘。</p>\n</li>\n</ol>\n<h2 id=\"怎么防止AOF文件越来越大-\">怎么防止AOF文件越来越大？</h2>\n<p updated=\"20220712103446\">为了防止AOF文件越来越大，可以通过执行BGREWRITEAOF命令，会fork子进程出来，读取当前数据库的键值对信息，生成所需的写命令，写入新的AOF文件。在生成期间，父进程继续正常处理请求，执行修改命令后，不仅会将命令写入aof_buf缓冲区，还会写入重写aof_buf缓冲区。当新的AOF文件生成完毕后，子进程父进程发送信号，父进程将重写aof_buf缓冲区的修改命令写入新的AOF文件，写入完毕后，对新的AOF文件进行改名，原子地（atomic）地替换旧的AOF文件。</p>\n<p updated=\"20220712103446\"><strong>BGREWRITEAOF命令</strong></p>\n<p updated=\"20220712103446\">BGREWRITEAOF命令用于异步执行一个 AOF 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。</p>\n<p updated=\"20220712103446\">即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。</p>\n<p updated=\"20220712103446\"><strong>注意：</strong><br />\n从 Redis 2.4 开始， AOF 重写由 Redis 自行触发， BGREWRITEAOF 仅仅用于手动触发重写操作。</p>\n<h4 id=\"AOF文件追加阻塞-\">AOF文件追加阻塞？</h4>\n<p updated=\"20220712103446\">修改命令添加到aof_buf之后，如果配置是everysec那么会每秒执行fsync操作，调用write写入磁盘一次，但是如果硬盘负载过高，fsync操作可能会超过1s，Redis主线程持续高速向aof_buf写入命令，硬盘的负载可能会越来越大，IO资源消耗更快，所以Redis的处理逻辑是会对比上次fsync成功的时间，如果超过2s，则主线程阻塞直到fsync同步完成，所以最多可能丢失2s的数据，而不是1s。</p>\n<h1 id=\"RDB持久化\">RDB持久化</h1>\n<p updated=\"20220712103446\">RDB持久化指的是在满足一定的触发条件时（在一个的时间间隔内执行修改命令达到一定的数量，或者手动执行SAVE和BGSAVE命令），对这个时间点的数据库所有键值对信息生成一个压缩文件dump.rdb，然后将旧的删除，进行替换。</p>\n<h4 id=\"执行流程-\">执行流程</h4>\n<p updated=\"20220712103446\">实现原理是fork一个子进程，然后对键值对进行遍历，生成rdb文件，在生成过程中，父进程会继续处理客户端发送的请求，当父进程要对数据进行修改时，会对相关的内存页进行拷贝，修改的是拷贝后的数据。（也就是COPY ON WRITE，写时复制技术，就是当多个调用者同时请求同一个资源，如内存或磁盘上的数据存储，他们会共用同一个指向资源的指针，指向相同的资源，只有当一个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给这个调用者，其他调用者还是使用最初的资源,在CopyOnWriteArrayList的实现中，也有用到，添加或者插入一个新元素时过程是，加锁，对原数组进行复制，然后添加新元素，然后替代旧数组，解锁）</p>\n<p updated=\"20220712103446\"><span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022911660.png\" alt=\"img\" /></span></p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">    //CopyOnWriteArrayList的添加元素的方法\npublic boolean add(E e) {\n  final ReentrantLock lock = this.lock;\n  lock.lock();\n  try {\n    Object[] elements = getArray();\n    int len = elements.length;\n    Object[] newElements = Arrays.copyOf(elements, len + 1);\n    newElements[len] = e;\n    setArray(newElements);\n    return true;\n  } finally {\n    lock.unlock();\n  }\n}\n</code></pre>\n<h1 id=\"混合持久化-Redis4-0--\">混合持久化（Redis4.0+）</h1>\n<h2 id=\"执行流程--\">执行流程</h2>\n<p updated=\"20220712103446\">混合持久化同样也是通过<strong>bgrewriteaof</strong>命令完成的，不同的是当开启混合持久化时，fork出的子进程先将当前内存中的键值对信息全量的以RDB方式写入aof文件，然后在将重写缓冲区的增量命令以AOF方式写入到文件，写入完成后通知主进程更新统计信息，并将新的含有RDB格式和AOF格式的AOF文件替换旧的的AOF文件。</p>\n<p updated=\"20220712103446\">简单的说：新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据。</p>\n<h1 id=\"Redis的数据恢复策略\">Redis的数据恢复策略</h1>\n<p updated=\"20220712103446\">优先级:<br />\n混合持久化 &gt; AOF &gt; RDB</p>\n<ol updated=\"20220712103446\">\n<li id=\"20220712103446-jigaov1\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">如果配置了混合持久化，那么根据混合持久化文件进行恢复数据。（Redis4.0+）</p>\n</li>\n<li id=\"20220712103446-bnqcnwc\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">只配置 AOF ，重启时加载 AOF 文件恢复数据。</p>\n</li>\n<li id=\"20220712103446-n7wkv0v\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">同时配置了 RDB 和 AOF ，启动时只加载 AOF文件恢复数据，如果AOF文件损坏，那么根据RDB文件恢复数据。</p>\n</li>\n<li id=\"20220712103446-sgxzd2a\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">只配置 RDB，启动时加载RDB持久化文件恢复数据</p>\n</li>\n</ol>\n<h1 id=\"Redis持久化策略该如何进行选择\">Redis持久化策略该如何进行选择</h1>\n<p updated=\"20220712103446\">（因为混合持久化是Redis 4.0之后支持的，目前一般生成环境使用的Redis版本可能都还较低，所以这里的策略选择主要是针对AOF持久和RDB持久化进行技术选型。）</p>\n<p updated=\"20220712103446\">以下是几种持久化方案选择的场景：</p>\n<h4 id=\"1-不需要考虑数据丢失的情况\">1.不需要考虑数据丢失的情况</h4>\n<p updated=\"20220712103446\">那么不需要考虑持久化。</p>\n<h4 id=\"2-单机实例情况下\">2.单机实例情况下</h4>\n<p updated=\"20220712103446\">可以接受丢失十几分钟及更长时间的数据，可以选择RDB持久化，对性能影响小，如果只能接受秒级的数据丢失，只能选择AOF持久化。</p>\n<h4 id=\"3-在主从环境下\">3.在主从环境下</h4>\n<p updated=\"20220712103446\">因为主服务器在执行修改命令后，会将命令发送给从服务器，从服务进行执行后，与主服务器保持数据同步，实现数据热备份，在master宕掉后继续提供服务。同时也可以进行读写分离，分担Redis的读请求。</p>\n<h5 id=\"那么在从服务器进行数据热备份的情况下-是否还需要持久化呢-\">那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？</h5>\n<p updated=\"20220712103446\">需要持久化，因为不进行持久化，主服务器，从服务器同时出现故障时，会导致数据丢失。（例如：机房全部机器断电）。如果系统中有自动拉起机制（即检测到服务停止后重启该服务）将master自动重启，由于没有持久化文件，那么master重启后数据是空的，slave同步数据也变成了空的。应尽量避免“自动拉起机制”和“不做持久化”同时出现。</p>\n<p updated=\"20220712103446\">所以一般可以采用以下方案：</p>\n<p updated=\"20220712103446\">主服务器不开启持久化，使得主服务器性能更好。</p>\n<p updated=\"20220712103446\">从服务器开启AOF持久化，关闭RDB持久化，并且定时对AOF文件进行备份，以及在凌晨执行bgaofrewrite命令来进行AOF文件重写，减小AOF文件大小。（当然如果对数据丢失容忍度高也可以开启RDB持久化，关闭AOF持久化）</p>\n<h5 id=\"4-异地灾备\">4.异地灾备</h5>\n<p updated=\"20220712103446\">一般性的故障（停电，关机）不会影响到磁盘，但是一些灾难性的故障（地震，洪水）会影响到磁盘，所以需要定时把单机上或从服务器上的AOF文件，RDB文件备份到其他地区的机房。</p>\n","articleNode":{"field":{"contentType":"topic","topic":"redis"},"frontmatter":{"id":"/topic/redis/Redis集群/redis持久化","title":"redis持久化","date":"2022-04-28 14:17","absolute_path":"/topic/redis/Redis集群/redis持久化"},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"redis持久化"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为Redis是一个内存数据库，所有的数据都保存在内存里面，一旦发生关机或者重启，内存中的数据都会丢失，所以为了重启的时候能够及时的恢复数据，redis提供了持久化机制。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在运行正常期间根据策略生成持久化文件，在机器重启后，能够根据持久化文件恢复内存中的数据。即使redis有主从同步的模式，主节点挂掉之后可以让从节点变成主节点，但是如果整个机房都发生停电，那么从节点和从节点内存中的数据都会丢失。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"策略"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"持久化策略"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"大概原理"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"优缺点"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"配置方法"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"AOF"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"记录所有的操作命令，"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"并以文本的形式追加到文件中"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"文件大，恢复慢，性能影响大，但实时性高，丢失数据最少,持久化保存的数据更加完整"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"默认关闭"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"redis.conf中appendonly设置为true"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"RDB"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"当前进程数据生成快照保存到硬盘"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"文件小，恢复快，不影响性能，实时性低，兼容性差(老版本redis不兼容新版本的RDB文件)"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"默认开启，满足一定条件就会触发RDB文件的生成"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"也可以执行SAVE和BGSAVE手动触发"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"混合持久化"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"(Redis 4.0 之后新增)"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"再将后续的操作命令以 AOF 的格式存入文件"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"Redis 可以更快的启动，同时结合 AOF 的优点，又减低了大量数据丢失的风险。"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"AOF 文件中添加了 RDB 格式的内容，会使得 AOF 文件的可读性会很差，不容易阅读"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"默认关闭，通过redis.conf中的aof-use-rdb-preamble开启"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"AOF持久化"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022911658.jpeg","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"执行流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"AOF的持久化主要是在Redis执行命令之后，将命令添加到aof_buf的末尾,然后在每次事件结束时根据appendfsync的配置，来决定是否将aof_buf缓冲区的内容写入和保存到AOF文件中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"基于性能考虑一般生产环境的配置都是everysec"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"appendfsync 参数有三个选项："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"always：每处理一个命令都将 aof_buf 缓冲区中的所有内容写入并同步到AOF 文件，即每个命令都刷盘。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"everysec：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件，如果上次同步 AOF 文件的时间距离现在超过一秒钟， 那么再次对 AOF 文件进行同步， 并且这个同步操作是异步的，由一个后台线程专门负责执行，即每秒刷盘1次。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"no：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 但并不对 AOF 文件进行同步， 何时同步由操作系统来决定。即不执行刷盘，让操作系统自己执行刷盘。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"怎么防止AOF文件越来越大？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为了防止AOF文件越来越大，可以通过执行BGREWRITEAOF命令，会fork子进程出来，读取当前数据库的键值对信息，生成所需的写命令，写入新的AOF文件。在生成期间，父进程继续正常处理请求，执行修改命令后，不仅会将命令写入aof_buf缓冲区，还会写入重写aof_buf缓冲区。当新的AOF文件生成完毕后，子进程父进程发送信号，父进程将重写aof_buf缓冲区的修改命令写入新的AOF文件，写入完毕后，对新的AOF文件进行改名，原子地（atomic）地替换旧的AOF文件。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"BGREWRITEAOF命令"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"BGREWRITEAOF命令用于异步执行一个 AOF 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"注意："}]},{"type":"text","value":"\n从 Redis 2.4 开始， AOF 重写由 Redis 自行触发， BGREWRITEAOF 仅仅用于手动触发重写操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"AOF文件追加阻塞？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"修改命令添加到aof_buf之后，如果配置是everysec那么会每秒执行fsync操作，调用write写入磁盘一次，但是如果硬盘负载过高，fsync操作可能会超过1s，Redis主线程持续高速向aof_buf写入命令，硬盘的负载可能会越来越大，IO资源消耗更快，所以Redis的处理逻辑是会对比上次fsync成功的时间，如果超过2s，则主线程阻塞直到fsync同步完成，所以最多可能丢失2s的数据，而不是1s。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"RDB持久化"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"RDB持久化指的是在满足一定的触发条件时（在一个的时间间隔内执行修改命令达到一定的数量，或者手动执行SAVE和BGSAVE命令），对这个时间点的数据库所有键值对信息生成一个压缩文件dump.rdb，然后将旧的删除，进行替换。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"执行流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"实现原理是fork一个子进程，然后对键值对进行遍历，生成rdb文件，在生成过程中，父进程会继续处理客户端发送的请求，当父进程要对数据进行修改时，会对相关的内存页进行拷贝，修改的是拷贝后的数据。（也就是COPY ON WRITE，写时复制技术，就是当多个调用者同时请求同一个资源，如内存或磁盘上的数据存储，他们会共用同一个指向资源的指针，指向相同的资源，只有当一个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给这个调用者，其他调用者还是使用最初的资源,在CopyOnWriteArrayList的实现中，也有用到，添加或者插入一个新元素时过程是，加锁，对原数组进行复制，然后添加新元素，然后替代旧数组，解锁）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022911660.png","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"0"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk3"]},"children":[{"type":"text","value":"//CopyOnWriteArrayList的添加元素的方法"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"boolean"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"add"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" e) {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"final"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"ReentrantLock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"this"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"try"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Object"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"[] "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"elements"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"getArray"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"len"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"elements"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"length"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Object"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"[] "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"newElements"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" = "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"Arrays"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"copyOf"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"(elements, len + "}]},{"type":"element","tagName":"span","properties":{"className":["mtk7"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":");"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    newElements[len] = e;"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"setArray"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"(newElements);"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"true"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  } "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"finally"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"lock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"unlock"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"();"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"  }"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"混合持久化（Redis4.0+）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"执行流程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"混合持久化同样也是通过"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"bgrewriteaof"}]},{"type":"text","value":"命令完成的，不同的是当开启混合持久化时，fork出的子进程先将当前内存中的键值对信息全量的以RDB方式写入aof文件，然后在将重写缓冲区的增量命令以AOF方式写入到文件，写入完成后通知主进程更新统计信息，并将新的含有RDB格式和AOF格式的AOF文件替换旧的的AOF文件。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"简单的说：新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Redis的数据恢复策略"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"优先级:\n混合持久化 > AOF > RDB"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果配置了混合持久化，那么根据混合持久化文件进行恢复数据。（Redis4.0+）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"只配置 AOF ，重启时加载 AOF 文件恢复数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"同时配置了 RDB 和 AOF ，启动时只加载 AOF文件恢复数据，如果AOF文件损坏，那么根据RDB文件恢复数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"只配置 RDB，启动时加载RDB持久化文件恢复数据"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Redis持久化策略该如何进行选择"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"（因为混合持久化是Redis 4.0之后支持的，目前一般生成环境使用的Redis版本可能都还较低，所以这里的策略选择主要是针对AOF持久和RDB持久化进行技术选型。）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以下是几种持久化方案选择的场景："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1.不需要考虑数据丢失的情况"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么不需要考虑持久化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2.单机实例情况下"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以接受丢失十几分钟及更长时间的数据，可以选择RDB持久化，对性能影响小，如果只能接受秒级的数据丢失，只能选择AOF持久化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3.在主从环境下"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为主服务器在执行修改命令后，会将命令发送给从服务器，从服务进行执行后，与主服务器保持数据同步，实现数据热备份，在master宕掉后继续提供服务。同时也可以进行读写分离，分担Redis的读请求。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要持久化，因为不进行持久化，主服务器，从服务器同时出现故障时，会导致数据丢失。（例如：机房全部机器断电）。如果系统中有自动拉起机制（即检测到服务停止后重启该服务）将master自动重启，由于没有持久化文件，那么master重启后数据是空的，slave同步数据也变成了空的。应尽量避免“自动拉起机制”和“不做持久化”同时出现。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以一般可以采用以下方案："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"主服务器不开启持久化，使得主服务器性能更好。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从服务器开启AOF持久化，关闭RDB持久化，并且定时对AOF文件进行备份，以及在凌晨执行bgaofrewrite命令来进行AOF文件重写，减小AOF文件大小。（当然如果对数据丢失容忍度高也可以开启RDB持久化，关闭AOF持久化）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h5","properties":{},"children":[{"type":"text","value":"4.异地灾备"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一般性的故障（停电，关机）不会影响到磁盘，但是一些灾难性的故障（地震，洪水）会影响到磁盘，所以需要定时把单机上或从服务器上的AOF文件，RDB文件备份到其他地区的机房。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n"}]}],"data":{"quirksMode":false}},"html":"<h1 id=\"redis持久化\">redis持久化</h1>\n<p updated=\"20220712103446\">因为Redis是一个内存数据库，所有的数据都保存在内存里面，一旦发生关机或者重启，内存中的数据都会丢失，所以为了重启的时候能够及时的恢复数据，redis提供了持久化机制。</p>\n<p updated=\"20220712103446\">在运行正常期间根据策略生成持久化文件，在机器重启后，能够根据持久化文件恢复内存中的数据。即使redis有主从同步的模式，主节点挂掉之后可以让从节点变成主节点，但是如果整个机房都发生停电，那么从节点和从节点内存中的数据都会丢失。</p>\n<h1 id=\"策略\">策略</h1>\n<table updated=\"20220712103446\">\n<thead>\n<tr>\n<th align=\"center\">持久化策略</th>\n<th align=\"center\">大概原理</th>\n<th align=\"center\">优缺点</th>\n<th align=\"center\">配置方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">AOF</td>\n<td align=\"center\">记录所有的操作命令，<br />并以文本的形式追加到文件中</td>\n<td align=\"center\">文件大，恢复慢，性能影响大，但实时性高，丢失数据最少,持久化保存的数据更加完整</td>\n<td align=\"center\">默认关闭<br />redis.conf中appendonly设置为true</td>\n</tr>\n<tr>\n<td align=\"center\">RDB</td>\n<td align=\"center\">当前进程数据生成快照保存到硬盘</td>\n<td align=\"center\">文件小，恢复快，不影响性能，实时性低，兼容性差(老版本redis不兼容新版本的RDB文件)</td>\n<td align=\"center\">默认开启，满足一定条件就会触发RDB文件的生成<br />也可以执行SAVE和BGSAVE手动触发</td>\n</tr>\n<tr>\n<td align=\"center\">混合持久化<br />(Redis 4.0 之后新增)</td>\n<td align=\"center\">在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，<br />再将后续的操作命令以 AOF 的格式存入文件</td>\n<td align=\"center\">Redis 可以更快的启动，同时结合 AOF 的优点，又减低了大量数据丢失的风险。<br />AOF 文件中添加了 RDB 格式的内容，会使得 AOF 文件的可读性会很差，不容易阅读</td>\n<td align=\"center\">默认关闭，通过redis.conf中的aof-use-rdb-preamble开启</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"AOF持久化\">AOF持久化</h1>\n<p updated=\"20220712103446\"><span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022911658.jpeg\" alt=\"img\" /></span></p>\n<h2 id=\"执行流程\">执行流程</h2>\n<p updated=\"20220712103446\">AOF的持久化主要是在Redis执行命令之后，将命令添加到aof_buf的末尾,然后在每次事件结束时根据appendfsync的配置，来决定是否将aof_buf缓冲区的内容写入和保存到AOF文件中。</p>\n<p updated=\"20220712103446\">基于性能考虑一般生产环境的配置都是everysec</p>\n<p updated=\"20220712103446\"><strong>appendfsync 参数有三个选项：</strong></p>\n<ol updated=\"20220712103446\">\n<li id=\"20220712103446-rkh0l90\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">always：每处理一个命令都将 aof_buf 缓冲区中的所有内容写入并同步到AOF 文件，即每个命令都刷盘。</p>\n</li>\n<li id=\"20220712103446-jt7xix3\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">everysec：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件，如果上次同步 AOF 文件的时间距离现在超过一秒钟， 那么再次对 AOF 文件进行同步， 并且这个同步操作是异步的，由一个后台线程专门负责执行，即每秒刷盘1次。</p>\n</li>\n<li id=\"20220712103446-q7wayxz\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">no：将 aof_buf 缓冲区中的所有内容写入到 AOF 文件， 但并不对 AOF 文件进行同步， 何时同步由操作系统来决定。即不执行刷盘，让操作系统自己执行刷盘。</p>\n</li>\n</ol>\n<h2 id=\"怎么防止AOF文件越来越大-\">怎么防止AOF文件越来越大？</h2>\n<p updated=\"20220712103446\">为了防止AOF文件越来越大，可以通过执行BGREWRITEAOF命令，会fork子进程出来，读取当前数据库的键值对信息，生成所需的写命令，写入新的AOF文件。在生成期间，父进程继续正常处理请求，执行修改命令后，不仅会将命令写入aof_buf缓冲区，还会写入重写aof_buf缓冲区。当新的AOF文件生成完毕后，子进程父进程发送信号，父进程将重写aof_buf缓冲区的修改命令写入新的AOF文件，写入完毕后，对新的AOF文件进行改名，原子地（atomic）地替换旧的AOF文件。</p>\n<p updated=\"20220712103446\"><strong>BGREWRITEAOF命令</strong></p>\n<p updated=\"20220712103446\">BGREWRITEAOF命令用于异步执行一个 AOF 文件重写操作。重写会创建一个当前 AOF 文件的体积优化版本。</p>\n<p updated=\"20220712103446\">即使 Bgrewriteaof 执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。</p>\n<p updated=\"20220712103446\"><strong>注意：</strong><br />\n从 Redis 2.4 开始， AOF 重写由 Redis 自行触发， BGREWRITEAOF 仅仅用于手动触发重写操作。</p>\n<h4 id=\"AOF文件追加阻塞-\">AOF文件追加阻塞？</h4>\n<p updated=\"20220712103446\">修改命令添加到aof_buf之后，如果配置是everysec那么会每秒执行fsync操作，调用write写入磁盘一次，但是如果硬盘负载过高，fsync操作可能会超过1s，Redis主线程持续高速向aof_buf写入命令，硬盘的负载可能会越来越大，IO资源消耗更快，所以Redis的处理逻辑是会对比上次fsync成功的时间，如果超过2s，则主线程阻塞直到fsync同步完成，所以最多可能丢失2s的数据，而不是1s。</p>\n<h1 id=\"RDB持久化\">RDB持久化</h1>\n<p updated=\"20220712103446\">RDB持久化指的是在满足一定的触发条件时（在一个的时间间隔内执行修改命令达到一定的数量，或者手动执行SAVE和BGSAVE命令），对这个时间点的数据库所有键值对信息生成一个压缩文件dump.rdb，然后将旧的删除，进行替换。</p>\n<h4 id=\"执行流程-\">执行流程</h4>\n<p updated=\"20220712103446\">实现原理是fork一个子进程，然后对键值对进行遍历，生成rdb文件，在生成过程中，父进程会继续处理客户端发送的请求，当父进程要对数据进行修改时，会对相关的内存页进行拷贝，修改的是拷贝后的数据。（也就是COPY ON WRITE，写时复制技术，就是当多个调用者同时请求同一个资源，如内存或磁盘上的数据存储，他们会共用同一个指向资源的指针，指向相同的资源，只有当一个调用者试图修改资源的内容时，系统才会真正复制一份专用副本给这个调用者，其他调用者还是使用最初的资源,在CopyOnWriteArrayList的实现中，也有用到，添加或者插入一个新元素时过程是，加锁，对原数组进行复制，然后添加新元素，然后替代旧数组，解锁）</p>\n<p updated=\"20220712103446\"><span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022911660.png\" alt=\"img\" /></span></p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">    //CopyOnWriteArrayList的添加元素的方法\npublic boolean add(E e) {\n  final ReentrantLock lock = this.lock;\n  lock.lock();\n  try {\n    Object[] elements = getArray();\n    int len = elements.length;\n    Object[] newElements = Arrays.copyOf(elements, len + 1);\n    newElements[len] = e;\n    setArray(newElements);\n    return true;\n  } finally {\n    lock.unlock();\n  }\n}\n</code></pre>\n<h1 id=\"混合持久化-Redis4-0--\">混合持久化（Redis4.0+）</h1>\n<h2 id=\"执行流程--\">执行流程</h2>\n<p updated=\"20220712103446\">混合持久化同样也是通过<strong>bgrewriteaof</strong>命令完成的，不同的是当开启混合持久化时，fork出的子进程先将当前内存中的键值对信息全量的以RDB方式写入aof文件，然后在将重写缓冲区的增量命令以AOF方式写入到文件，写入完成后通知主进程更新统计信息，并将新的含有RDB格式和AOF格式的AOF文件替换旧的的AOF文件。</p>\n<p updated=\"20220712103446\">简单的说：新的AOF文件前半段是RDB格式的全量数据后半段是AOF格式的增量数据。</p>\n<h1 id=\"Redis的数据恢复策略\">Redis的数据恢复策略</h1>\n<p updated=\"20220712103446\">优先级:<br />\n混合持久化 &gt; AOF &gt; RDB</p>\n<ol updated=\"20220712103446\">\n<li id=\"20220712103446-jigaov1\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">如果配置了混合持久化，那么根据混合持久化文件进行恢复数据。（Redis4.0+）</p>\n</li>\n<li id=\"20220712103446-bnqcnwc\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">只配置 AOF ，重启时加载 AOF 文件恢复数据。</p>\n</li>\n<li id=\"20220712103446-n7wkv0v\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">同时配置了 RDB 和 AOF ，启动时只加载 AOF文件恢复数据，如果AOF文件损坏，那么根据RDB文件恢复数据。</p>\n</li>\n<li id=\"20220712103446-sgxzd2a\" updated=\"20220712103446\">\n<p updated=\"20220712103446\">只配置 RDB，启动时加载RDB持久化文件恢复数据</p>\n</li>\n</ol>\n<h1 id=\"Redis持久化策略该如何进行选择\">Redis持久化策略该如何进行选择</h1>\n<p updated=\"20220712103446\">（因为混合持久化是Redis 4.0之后支持的，目前一般生成环境使用的Redis版本可能都还较低，所以这里的策略选择主要是针对AOF持久和RDB持久化进行技术选型。）</p>\n<p updated=\"20220712103446\">以下是几种持久化方案选择的场景：</p>\n<h4 id=\"1-不需要考虑数据丢失的情况\">1.不需要考虑数据丢失的情况</h4>\n<p updated=\"20220712103446\">那么不需要考虑持久化。</p>\n<h4 id=\"2-单机实例情况下\">2.单机实例情况下</h4>\n<p updated=\"20220712103446\">可以接受丢失十几分钟及更长时间的数据，可以选择RDB持久化，对性能影响小，如果只能接受秒级的数据丢失，只能选择AOF持久化。</p>\n<h4 id=\"3-在主从环境下\">3.在主从环境下</h4>\n<p updated=\"20220712103446\">因为主服务器在执行修改命令后，会将命令发送给从服务器，从服务进行执行后，与主服务器保持数据同步，实现数据热备份，在master宕掉后继续提供服务。同时也可以进行读写分离，分担Redis的读请求。</p>\n<h5 id=\"那么在从服务器进行数据热备份的情况下-是否还需要持久化呢-\">那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？</h5>\n<p updated=\"20220712103446\">需要持久化，因为不进行持久化，主服务器，从服务器同时出现故障时，会导致数据丢失。（例如：机房全部机器断电）。如果系统中有自动拉起机制（即检测到服务停止后重启该服务）将master自动重启，由于没有持久化文件，那么master重启后数据是空的，slave同步数据也变成了空的。应尽量避免“自动拉起机制”和“不做持久化”同时出现。</p>\n<p updated=\"20220712103446\">所以一般可以采用以下方案：</p>\n<p updated=\"20220712103446\">主服务器不开启持久化，使得主服务器性能更好。</p>\n<p updated=\"20220712103446\">从服务器开启AOF持久化，关闭RDB持久化，并且定时对AOF文件进行备份，以及在凌晨执行bgaofrewrite命令来进行AOF文件重写，减小AOF文件大小。（当然如果对数据丢失容忍度高也可以开启RDB持久化，关闭AOF持久化）</p>\n<h5 id=\"4-异地灾备\">4.异地灾备</h5>\n<p updated=\"20220712103446\">一般性的故障（停电，关机）不会影响到磁盘，但是一些灾难性的故障（地震，洪水）会影响到磁盘，所以需要定时把单机上或从服务器上的AOF文件，RDB文件备份到其他地区的机房。</p>\n","headings":[{"depth":1,"value":"redis持久化"},{"depth":1,"value":"策略"},{"depth":1,"value":"AOF持久化"},{"depth":2,"value":"执行流程"},{"depth":2,"value":"怎么防止AOF文件越来越大？"},{"depth":4,"value":"AOF文件追加阻塞？"},{"depth":1,"value":"RDB持久化"},{"depth":4,"value":"执行流程"},{"depth":1,"value":"混合持久化（Redis4.0+）"},{"depth":2,"value":"执行流程"},{"depth":1,"value":"Redis的数据恢复策略"},{"depth":1,"value":"Redis持久化策略该如何进行选择"},{"depth":4,"value":"1.不需要考虑数据丢失的情况"},{"depth":4,"value":"2.单机实例情况下"},{"depth":4,"value":"3.在主从环境下"},{"depth":5,"value":"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？"},{"depth":5,"value":"4.异地灾备"}],"path":"/topic/redis/Redis集群/redis持久化"},"tree":{"title":"redis","id":"20220428141727-a3p03i0","parentId":"","href":"/topic/redis","path":"/topic/redis","children":[{"title":"Redis为什么这么快","id":"20220428141727-jbyo2wp","type":"d","href":"/topic/redis/Redis为什么这么快","parentId":"","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","sort":1,"children":[{"title":"完全基于内存","id":"20220428141727-m8thckv","type":"h","href":"/topic/redis/Redis为什么这么快#完全基于内存","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"数据结构简单","id":"20220428141727-0532nq9","type":"h","href":"/topic/redis/Redis为什么这么快#数据结构简单","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"工作线程采用单线程，避免了线程上下文切换所带来的损耗","id":"20220428141727-kw7bg9v","type":"h","href":"/topic/redis/Redis为什么这么快#工作线程采用单线程，避免了线程上下文切换所带来的损耗","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"对于客户端的连接采用多路复用和非阻塞I/O","id":"20220428141727-m7ruuk1","type":"h","href":"/topic/redis/Redis为什么这么快#对于客户端的连接采用多路复用和非阻塞I/O","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"redis单线程的问题","id":"20220428141728-w6wf4kq","type":"d","href":"/topic/redis/Redis为什么这么快/redis单线程的问题","parentId":"","path":"/topic/redis/Redis为什么这么快/redis单线程的问题","parentPath":"/topic/redis/Redis为什么这么快","sort":11,"children":[],"level":2}],"level":1},{"title":"Redis基本数据结构","id":"20220428141727-imsmasu","type":"d","href":"/topic/redis/Redis基本数据结构","parentId":"","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","sort":2,"children":[{"title":"常用的","id":"20220428141727-1gclyg6","type":"h","href":"/topic/redis/Redis基本数据结构#常用的","parentId":"20220428141727-imsmasu","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[{"title":"string","id":"20220428141727-u2m7nzt","type":"h","href":"/topic/redis/Redis基本数据结构#string","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"hash","id":"20220428141727-po0l8p4","type":"h","href":"/topic/redis/Redis基本数据结构#hash","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"list","id":"20220428141727-nyjx5v1","type":"h","href":"/topic/redis/Redis基本数据结构#list","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"set","id":"20220428141727-ujl3jkq","type":"h","href":"/topic/redis/Redis基本数据结构#set","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"zset","id":"20220428141727-8lh8dqt","type":"h","href":"/topic/redis/Redis基本数据结构#zset","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"扩展结构","id":"20220428141727-9xu8ei1","type":"h","href":"/topic/redis/Redis基本数据结构#扩展结构","parentId":"20220428141727-imsmasu","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[{"title":"bitmap","id":"20220428141727-89gt7iy","type":"h","href":"/topic/redis/Redis基本数据结构#bitmap","parentId":"20220428141727-9xu8ei1","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"hyperloglog","id":"20220428141727-08upaib","type":"h","href":"/topic/redis/Redis基本数据结构#hyperloglog","parentId":"20220428141727-9xu8ei1","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"GEO","id":"20220428141727-6z03dvm","type":"h","href":"/topic/redis/Redis基本数据结构#GEO","parentId":"20220428141727-9xu8ei1","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"扩展功能","id":"20220428141727-x5n4s7y","type":"h","href":"/topic/redis/Redis基本数据结构#扩展功能","parentId":"20220428141727-imsmasu","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[{"title":"pub/sub","id":"20220428141727-zay76x9","type":"h","href":"/topic/redis/Redis基本数据结构#pub/sub","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"pipeline","id":"20220428141727-m3750uw","type":"h","href":"/topic/redis/Redis基本数据结构#pipeline","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"Lua 脚本","id":"20220428141727-6rc0qt7","type":"h","href":"/topic/redis/Redis基本数据结构#Lua 脚本","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"事务","id":"20220428141727-8i9gpxn","type":"h","href":"/topic/redis/Redis基本数据结构#事务","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"String的底层实现","id":"20220428141728-d2hmuxd","type":"d","href":"/topic/redis/Redis基本数据结构/String的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":1,"children":[{"title":"SDS 结构","id":"20220428141728-y2039os","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#SDS 结构","parentId":"20220428141728-d2hmuxd","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3},{"title":"相对于C语言的优势","id":"20220428141728-8t63ohh","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#相对于C语言的优势","parentId":"20220428141728-d2hmuxd","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[{"title":"统计长度时间复杂度 O(1)","id":"20220428141728-xeqpgol","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#统计长度时间复杂度 O(1)","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4},{"title":"数据溢出","id":"20220428141728-coew455","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#数据溢出","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4},{"title":"内存重分配策略","id":"20220428141728-mbwnou1","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#内存重分配策略","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4},{"title":"数据格式多样性","id":"20220428141728-5h2se0u","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#数据格式多样性","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4}],"level":3},{"title":"三大编码","id":"20220428141728-t4votze","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#三大编码","parentId":"20220428141728-d2hmuxd","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3}],"level":2},{"title":"List的底层实现","id":"20220428141727-skh553t","type":"d","href":"/topic/redis/Redis基本数据结构/List的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/List的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":2,"children":[],"level":2},{"title":"Hash的底层实现","id":"20220428141727-g51ewzt","type":"d","href":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":3,"children":[{"title":"ZipList编码的哈希对象","id":"20220428141727-fo8pixs","type":"h","href":"/topic/redis/Redis基本数据结构/Hash的底层实现#ZipList编码的哈希对象","parentId":"20220428141727-g51ewzt","path":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3},{"title":"hashtable对象","id":"20220428141727-f7zok8f","type":"h","href":"/topic/redis/Redis基本数据结构/Hash的底层实现#hashtable对象","parentId":"20220428141727-g51ewzt","path":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3}],"level":2},{"title":"Set的底层实现","id":"20220428141728-5c6e914","type":"d","href":"/topic/redis/Redis基本数据结构/Set的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/Set的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":4,"children":[],"level":2},{"title":"ZSet的底层实现","id":"20220428141728-58eined","type":"d","href":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":5,"children":[{"title":"跳表是什么?","id":"20220428141728-9by553n","type":"h","href":"/topic/redis/Redis基本数据结构/ZSet的底层实现#跳表是什么?","parentId":"20220428141728-58eined","path":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[{"title":"优缺点","id":"20220428141728-rvbr2il","type":"h","href":"/topic/redis/Redis基本数据结构/ZSet的底层实现#优缺点","parentId":"20220428141728-9by553n","path":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4}],"level":3}],"level":2}],"level":1},{"title":"Redis分布式缓存","id":"20220428141727-3x1i5zp","type":"d","href":"/topic/redis/Redis分布式缓存","parentId":"","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","sort":3,"children":[{"title":"双写一致性","id":"20220428141727-zahxna7","type":"h","href":"/topic/redis/Redis分布式缓存#双写一致性","parentId":"20220428141727-3x1i5zp","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":2},{"title":"缓存更新策略","id":"20220428141727-iqgn80l","type":"h","href":"/topic/redis/Redis分布式缓存#缓存更新策略","parentId":"20220428141727-3x1i5zp","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"最常见的策略","id":"20220428141727-45wxv7a","type":"h","href":"/topic/redis/Redis分布式缓存#最常见的策略","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"优点剖析","id":"20220428141727-tfanvhu","type":"h","href":"/topic/redis/Redis分布式缓存#优点剖析","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"1. “先淘汰缓存，再写数据库” 合理","id":"20220428141727-vzyp7bi","type":"h","href":"/topic/redis/Redis分布式缓存#1. “先淘汰缓存，再写数据库” 合理","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"2. 异步刷新，补缺补漏","id":"20220428141727-kbueoxr","type":"h","href":"/topic/redis/Redis分布式缓存#2. 异步刷新，补缺补漏","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"缺点剖析","id":"20220428141727-sd1lbh3","type":"h","href":"/topic/redis/Redis分布式缓存#缺点剖析","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"1. 容灾不足","id":"20220428141727-aff14q4","type":"h","href":"/topic/redis/Redis分布式缓存#1. 容灾不足","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"2. 并发问题","id":"20220428141727-7kjhtfn","type":"h","href":"/topic/redis/Redis分布式缓存#2. 并发问题","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"方案总结","id":"20220428141727-5w2loli","type":"h","href":"/topic/redis/Redis分布式缓存#方案总结","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"写流程：","id":"20220428141727-s959uv0","type":"h","href":"/topic/redis/Redis分布式缓存#写流程：","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"读流程：","id":"20220428141727-sceljri","type":"h","href":"/topic/redis/Redis分布式缓存#读流程：","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4}],"level":3},{"title":"方案分析","id":"20220428141727-7flpl0m","type":"h","href":"/topic/redis/Redis分布式缓存#方案分析","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"优点剖析","id":"20220428141727-1cqjx66","type":"h","href":"/topic/redis/Redis分布式缓存#优点剖析","parentId":"20220428141727-7flpl0m","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 容灾","id":"20220428141727-w9bvsqf","type":"h","href":"/topic/redis/Redis分布式缓存#1. 容灾","parentId":"20220428141727-1cqjx66","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4},{"title":"缺点剖析","id":"20220428141727-n1twxfd","type":"h","href":"/topic/redis/Redis分布式缓存#缺点剖析","parentId":"20220428141727-7flpl0m","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 只适合简单业务，复杂业务容易发生并发问题","id":"20220428141727-t5kobxh","type":"h","href":"/topic/redis/Redis分布式缓存#1. 只适合简单业务，复杂业务容易发生并发问题","parentId":"20220428141727-n1twxfd","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"缺点1的改进","id":"20220428141727-bz5ta88","type":"h","href":"/topic/redis/Redis分布式缓存#缺点1的改进","parentId":"20220428141727-t5kobxh","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":6}],"level":5},{"title":"2. 依然是并发问题","id":"20220428141727-gysgmg1","type":"h","href":"/topic/redis/Redis分布式缓存#2. 依然是并发问题","parentId":"20220428141727-n1twxfd","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4}],"level":3},{"title":"方案总结","id":"20220428141727-01sdgjy","type":"h","href":"/topic/redis/Redis分布式缓存#方案总结","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"写流程：","id":"20220428141727-eglmgkf","type":"h","href":"/topic/redis/Redis分布式缓存#写流程：","parentId":"20220428141727-01sdgjy","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"读流程：","id":"20220428141727-1vywbk4","type":"h","href":"/topic/redis/Redis分布式缓存#读流程：","parentId":"20220428141727-01sdgjy","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4}],"level":3},{"title":"方案分析","id":"20220428141727-137lw2k","type":"h","href":"/topic/redis/Redis分布式缓存#方案分析","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"优点剖析","id":"20220428141727-p0zad1o","type":"h","href":"/topic/redis/Redis分布式缓存#优点剖析","parentId":"20220428141727-137lw2k","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 容灾完善","id":"20220428141727-cawius6","type":"h","href":"/topic/redis/Redis分布式缓存#1. 容灾完善","parentId":"20220428141727-p0zad1o","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"写流程容灾分析","id":"20220428141727-2d2z7fz","type":"h","href":"/topic/redis/Redis分布式缓存#写流程容灾分析","parentId":"20220428141727-cawius6","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":6},{"title":"读流程容灾分析","id":"20220428141727-4hr5okn","type":"h","href":"/topic/redis/Redis分布式缓存#读流程容灾分析","parentId":"20220428141727-cawius6","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":6}],"level":5},{"title":"2. 无并发问题","id":"20220428141727-uvwj2ga","type":"h","href":"/topic/redis/Redis分布式缓存#2. 无并发问题","parentId":"20220428141727-p0zad1o","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4},{"title":"缺点剖析","id":"20220428141727-fmiz5zl","type":"h","href":"/topic/redis/Redis分布式缓存#缺点剖析","parentId":"20220428141727-137lw2k","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 增加Cache_0强依赖","id":"20220428141727-hr6lxu9","type":"h","href":"/topic/redis/Redis分布式缓存#1. 增加Cache_0强依赖","parentId":"20220428141727-fmiz5zl","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5},{"title":"2. 复杂度是比较高的","id":"20220428141727-vbiftey","type":"h","href":"/topic/redis/Redis分布式缓存#2. 复杂度是比较高的","parentId":"20220428141727-fmiz5zl","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4}],"level":3},{"title":"方案总结","id":"20220428141727-0an20z6","type":"h","href":"/topic/redis/Redis分布式缓存#方案总结","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"缓存击穿","id":"20220428141728-p93afgy","type":"d","href":"/topic/redis/Redis分布式缓存/缓存击穿","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","sort":1,"children":[{"title":"解决方案","id":"20220428141728-27esyuz","type":"h","href":"/topic/redis/Redis分布式缓存/缓存击穿#解决方案","parentId":"20220428141728-p93afgy","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","children":[{"title":"不过期","id":"20220428141728-foxjedm","type":"h","href":"/topic/redis/Redis分布式缓存/缓存击穿#不过期","parentId":"20220428141728-27esyuz","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":4},{"title":"互斥锁","id":"20220428141728-68zg08m","type":"h","href":"/topic/redis/Redis分布式缓存/缓存击穿#互斥锁","parentId":"20220428141728-27esyuz","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":4}],"level":3}],"level":2},{"title":"缓存穿透","id":"20220428141728-64iljj5","type":"d","href":"/topic/redis/Redis分布式缓存/缓存穿透","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","sort":3,"children":[{"title":"接口校验","id":"20220428141728-wny00tb","type":"h","href":"/topic/redis/Redis分布式缓存/缓存穿透#接口校验","parentId":"20220428141728-64iljj5","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":3},{"title":"空对象缓存或者缺省值","id":"20220428141728-6wjc642","type":"h","href":"/topic/redis/Redis分布式缓存/缓存穿透#空对象缓存或者缺省值","parentId":"20220428141728-64iljj5","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":3},{"title":"布隆过滤器","id":"20220428141728-r9yad28","type":"h","href":"/topic/redis/Redis分布式缓存/缓存穿透#布隆过滤器","parentId":"20220428141728-64iljj5","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":3}],"level":2},{"title":"缓存雪崩","id":"20220428141728-9ti4duq","type":"d","href":"/topic/redis/Redis分布式缓存/缓存雪崩","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存雪崩","parentPath":"/topic/redis/Redis分布式缓存","sort":4,"children":[{"title":"解决方案","id":"20220428141728-zu9jxq3","type":"h","href":"/topic/redis/Redis分布式缓存/缓存雪崩#解决方案","parentId":"20220428141728-9ti4duq","path":"/topic/redis/Redis分布式缓存/缓存雪崩","parentPath":"/topic/redis/Redis分布式缓存","children":[{"title":"三步骤","id":"20220428141728-0vnf8gp","type":"h","href":"/topic/redis/Redis分布式缓存/缓存雪崩#三步骤","parentId":"20220428141728-zu9jxq3","path":"/topic/redis/Redis分布式缓存/缓存雪崩","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":4}],"level":3}],"level":2},{"title":"缓存预热","id":"20220428141728-fz10tn2","type":"d","href":"/topic/redis/Redis分布式缓存/缓存预热","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存预热","parentPath":"/topic/redis/Redis分布式缓存","sort":7,"children":[],"level":2}],"level":1},{"title":"Redis的分布式锁","id":"20220428141727-sgydg0x","type":"d","href":"/topic/redis/Redis的分布式锁","parentId":"","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","sort":4,"children":[{"title":"利用redis实现分布式锁","id":"20220428141727-e4nwnv1","type":"h","href":"/topic/redis/Redis的分布式锁#利用redis实现分布式锁","parentId":"20220428141727-sgydg0x","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[{"title":"三个重要因素","id":"20220428141727-zthzzjq","type":"h","href":"/topic/redis/Redis的分布式锁#三个重要因素","parentId":"20220428141727-e4nwnv1","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3},{"title":"涉及命令","id":"20220428141727-hs1yg88","type":"h","href":"/topic/redis/Redis的分布式锁#涉及命令","parentId":"20220428141727-e4nwnv1","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"实现思想","id":"20220428141727-5jo3h6s","type":"h","href":"/topic/redis/Redis的分布式锁#实现思想","parentId":"20220428141727-sgydg0x","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[{"title":"业务执行的时间大于redis锁过期的时间","id":"20220428141727-q83o36l","type":"h","href":"/topic/redis/Redis的分布式锁#业务执行的时间大于redis锁过期的时间","parentId":"20220428141727-5jo3h6s","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3},{"title":"redis部署模式的影响","id":"20220428141727-9xczwbf","type":"h","href":"/topic/redis/Redis的分布式锁#redis部署模式的影响","parentId":"20220428141727-5jo3h6s","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3},{"title":"原子性问题","id":"20220428141727-u4jomll","type":"h","href":"/topic/redis/Redis的分布式锁#原子性问题","parentId":"20220428141727-5jo3h6s","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"看门狗模式","id":"20220428141728-gdeeql2","type":"d","href":"/topic/redis/Redis的分布式锁/看门狗模式","parentId":"","path":"/topic/redis/Redis的分布式锁/看门狗模式","parentPath":"/topic/redis/Redis的分布式锁","sort":1,"children":[],"level":2},{"title":"Redlock","id":"20220428141728-qbzn1tc","type":"d","href":"/topic/redis/Redis的分布式锁/Redlock","parentId":"","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","sort":2,"children":[{"title":"问题1","id":"20220428141728-lg0r797","type":"h","href":"/topic/redis/Redis的分布式锁/Redlock#问题1","parentId":"20220428141728-qbzn1tc","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","children":[],"level":3},{"title":"问题2","id":"20220428141728-nhr8fen","type":"h","href":"/topic/redis/Redis的分布式锁/Redlock#问题2","parentId":"20220428141728-qbzn1tc","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","children":[],"level":3},{"title":"问题3","id":"20220428141728-5jc3ave","type":"h","href":"/topic/redis/Redis的分布式锁/Redlock#问题3","parentId":"20220428141728-qbzn1tc","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","children":[],"level":3}],"level":2}],"level":1},{"title":"Redis集群","id":"20220428141727-awm7yu5","type":"d","href":"/topic/redis/Redis集群","parentId":"","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","sort":6,"children":[{"title":"三种集群方案","id":"20220428141727-id6w37y","type":"h","href":"/topic/redis/Redis集群#三种集群方案","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":2},{"title":"主从复制模式","id":"20220428141727-01yokji","type":"h","href":"/topic/redis/Redis集群#主从复制模式","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[{"title":"原理","id":"20220428141727-2xgqon2","type":"h","href":"/topic/redis/Redis集群#原理","parentId":"20220428141727-01yokji","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"redis主从复制的坑","id":"20220428141727-h04f0fa","type":"h","href":"/topic/redis/Redis集群#redis主从复制的坑","parentId":"20220428141727-01yokji","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"哨兵模式","id":"20220428141727-jxcatge","type":"h","href":"/topic/redis/Redis集群#哨兵模式","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[{"title":"哨兵模式的作用","id":"20220428141727-3jb6vil","type":"h","href":"/topic/redis/Redis集群#哨兵模式的作用","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"故障切换的过程","id":"20220428141727-uscl9hh","type":"h","href":"/topic/redis/Redis集群#故障切换的过程","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"哨兵模式的工作方式：","id":"20220428141727-fe5liq6","type":"h","href":"/topic/redis/Redis集群#哨兵模式的工作方式：","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"哨兵模式的优缺点","id":"20220428141727-fq18erp","type":"h","href":"/topic/redis/Redis集群#哨兵模式的优缺点","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"Cluster 集群模式（Redis官方）","id":"20220428141727-z0udk1o","type":"h","href":"/topic/redis/Redis集群#Cluster 集群模式（Redis官方）","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[{"title":"集群的数据分片","id":"20220428141727-zez6jhc","type":"h","href":"/topic/redis/Redis集群#集群的数据分片","parentId":"20220428141727-z0udk1o","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"Redis 集群的主从复制模型","id":"20220428141727-guu9h2l","type":"h","href":"/topic/redis/Redis集群#Redis 集群的主从复制模型","parentId":"20220428141727-z0udk1o","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"集群的特点","id":"20220428141727-a9a9ogo","type":"h","href":"/topic/redis/Redis集群#集群的特点","parentId":"20220428141727-z0udk1o","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"Redis数据淘汰策略","id":"20220428141727-oaw8wmd","type":"d","href":"/topic/redis/Redis集群/Redis数据淘汰策略","parentId":"","path":"/topic/redis/Redis集群/Redis数据淘汰策略","parentPath":"/topic/redis/Redis集群","sort":5,"children":[{"title":"Redis的内存淘汰策略，有以下几种","id":"20220428141727-aort8cn","type":"h","href":"/topic/redis/Redis集群/Redis数据淘汰策略#Redis的内存淘汰策略，有以下几种","parentId":"20220428141727-oaw8wmd","path":"/topic/redis/Redis集群/Redis数据淘汰策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据","id":"20220428141727-egla613","type":"h","href":"/topic/redis/Redis集群/Redis数据淘汰策略#数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据","parentId":"20220428141727-oaw8wmd","path":"/topic/redis/Redis集群/Redis数据淘汰策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3}],"level":2},{"title":"redis持久化","id":"20220428141728-ahu8hnn","type":"d","href":"/topic/redis/Redis集群/redis持久化","parentId":"","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","sort":8,"children":[{"title":"策略","id":"20220428141728-h8spnbe","type":"h","href":"/topic/redis/Redis集群/redis持久化#策略","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"AOF持久化","id":"20220428141728-8sb3e90","type":"h","href":"/topic/redis/Redis集群/redis持久化#AOF持久化","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"执行流程","id":"20220428141728-xdy9wq3","type":"h","href":"/topic/redis/Redis集群/redis持久化#执行流程","parentId":"20220428141728-8sb3e90","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"怎么防止AOF文件越来越大？","id":"20220428141728-2fjjnsi","type":"h","href":"/topic/redis/Redis集群/redis持久化#怎么防止AOF文件越来越大？","parentId":"20220428141728-8sb3e90","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"AOF文件追加阻塞？","id":"20220428141728-jggnla6","type":"h","href":"/topic/redis/Redis集群/redis持久化#AOF文件追加阻塞？","parentId":"20220428141728-2fjjnsi","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":5}],"level":4}],"level":3},{"title":"RDB持久化","id":"20220428141728-3uk1dzb","type":"h","href":"/topic/redis/Redis集群/redis持久化#RDB持久化","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"执行流程","id":"20220428141728-b6xujxs","type":"h","href":"/topic/redis/Redis集群/redis持久化#执行流程","parentId":"20220428141728-3uk1dzb","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3},{"title":"混合持久化（Redis4.0+）","id":"20220428141728-z9bdsb4","type":"h","href":"/topic/redis/Redis集群/redis持久化#混合持久化（Redis4.0+）","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"执行流程","id":"20220428141728-flzi42f","type":"h","href":"/topic/redis/Redis集群/redis持久化#执行流程","parentId":"20220428141728-z9bdsb4","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3},{"title":"Redis的数据恢复策略","id":"20220428141728-x9y47t6","type":"h","href":"/topic/redis/Redis集群/redis持久化#Redis的数据恢复策略","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"Redis持久化策略该如何进行选择","id":"20220428141728-54y3bdq","type":"h","href":"/topic/redis/Redis集群/redis持久化#Redis持久化策略该如何进行选择","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"1.不需要考虑数据丢失的情况","id":"20220428141728-ujbrmwt","type":"h","href":"/topic/redis/Redis集群/redis持久化#1.不需要考虑数据丢失的情况","parentId":"20220428141728-54y3bdq","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"2.单机实例情况下","id":"20220428141728-zahznfw","type":"h","href":"/topic/redis/Redis集群/redis持久化#2.单机实例情况下","parentId":"20220428141728-54y3bdq","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"3.在主从环境下","id":"20220428141728-jbd8vij","type":"h","href":"/topic/redis/Redis集群/redis持久化#3.在主从环境下","parentId":"20220428141728-54y3bdq","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？","id":"20220428141728-sjs8krt","type":"h","href":"/topic/redis/Redis集群/redis持久化#那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？","parentId":"20220428141728-jbd8vij","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":5},{"title":"4.异地灾备","id":"20220428141728-aryf17w","type":"h","href":"/topic/redis/Redis集群/redis持久化#4.异地灾备","parentId":"20220428141728-jbd8vij","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":5}],"level":4}],"level":3}],"level":2},{"title":"Redis数据删除策略","id":"20220428141727-pvzi1zo","type":"d","href":"/topic/redis/Redis集群/Redis数据删除策略","parentId":"","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","sort":13,"children":[{"title":"惰性删除","id":"20220428141727-o0rija8","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#惰性删除","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"定期删除","id":"20220428141727-wq9axfb","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#定期删除","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"AOF、RDB 和复制功能对过期键的处理","id":"20220428141727-gr8a4lk","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#AOF、RDB 和复制功能对过期键的处理","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[{"title":"RDB","id":"20220428141727-xhxrdyf","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#RDB","parentId":"20220428141727-gr8a4lk","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"AOF","id":"20220428141727-z7l5azb","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#AOF","parentId":"20220428141727-gr8a4lk","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"复制","id":"20220428141727-vdap5h4","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#复制","parentId":"20220428141727-gr8a4lk","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3},{"title":"疑问点？","id":"20220428141727-5x39avu","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#疑问点？","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[{"title":"如果主从服务器链接断开怎么办？","id":"20220428141727-4505lb0","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#如果主从服务器链接断开怎么办？","parentId":"20220428141727-5x39avu","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"如果发生网络抖动，主服务器发送的 del 命令没有传递到从服务器怎么办？","id":"20220428141727-4x9rpfk","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#如果发生网络抖动，主服务器发送的 del 命令没有传递到从服务器怎么办？","parentId":"20220428141727-5x39avu","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3}],"level":2}],"level":1}],"level":0},"headings":[{"depth":1,"value":"redis持久化","slug":"redis持久化"},{"depth":1,"value":"策略","slug":"策略"},{"depth":1,"value":"AOF持久化","slug":"aof持久化"},{"depth":2,"value":"执行流程","slug":"执行流程"},{"depth":2,"value":"怎么防止AOF文件越来越大？","slug":"怎么防止aof文件越来越大"},{"depth":4,"value":"AOF文件追加阻塞？","slug":"aof文件追加阻塞"},{"depth":1,"value":"RDB持久化","slug":"rdb持久化"},{"depth":4,"value":"执行流程","slug":"执行流程-1"},{"depth":1,"value":"混合持久化（Redis4.0+）","slug":"混合持久化redis40"},{"depth":2,"value":"执行流程","slug":"执行流程-2"},{"depth":1,"value":"Redis的数据恢复策略","slug":"redis的数据恢复策略"},{"depth":1,"value":"Redis持久化策略该如何进行选择","slug":"redis持久化策略该如何进行选择"},{"depth":4,"value":"1.不需要考虑数据丢失的情况","slug":"1不需要考虑数据丢失的情况"},{"depth":4,"value":"2.单机实例情况下","slug":"2单机实例情况下"},{"depth":4,"value":"3.在主从环境下","slug":"3在主从环境下"},{"depth":5,"value":"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？","slug":"那么在从服务器进行数据热备份的情况下是否还需要持久化呢"},{"depth":5,"value":"4.异地灾备","slug":"4异地灾备"}]}},
    "staticQueryHashes": ["630634786","928362550"]}