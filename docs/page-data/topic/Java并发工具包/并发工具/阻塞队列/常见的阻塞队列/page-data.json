{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列",
    "result": {"pageContext":{"id":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"常见的阻塞队列"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ArrayBlockingQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ArrayBlockingQueue 是最典型的"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"有界队列"}]},{"type":"text","value":"，其内部是用数组存储元素的，利用 ReentrantLock 实现线程安全。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们在创建它的时候就需要指定它的容量，之后也不可以再扩容了，在构造函数中我们同样可以指定是否是公平的，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"0"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"第一个参数是容量，第二个参数是是否公平。"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"ArrayBlockingQueue"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" capacity, "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"boolean"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" fair)"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正如 ReentrantLock 一样:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果 ArrayBlockingQueue 被设置为非公平的，那么就存在插队的可能；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果设置为公平的，那么等待了最长时间的线程会被优先处理，其他线程不允许插队，不过这样的公平策略同时会带来一定的性能损耗，因为非公平的吞吐量通常会高于公平的情况。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"LinkedBlockingQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正如名字所示，这是一个内部用链表实现的 BlockingQueue。如果我们不指定它的初始容量，那么它容量默认就为整型的最大值 Integer.MAX_VALUE，由于这个数非常大，我们通常不可能放入这么多的数据，所以 LinkedBlockingQueue 也被称作无界队列，代表它几乎没有界限。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"SynchronousQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/Cgq2xl4lhhSAZIuZAABMMZW2RVk163.png","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如图所示，SynchronousQueue 最大的不同之处在于，它的容量为 0，所以没有一个地方来暂存元素，导致每次取数据都要先阻塞，直到有数据被放入；同理，每次放数据的时候也会阻塞，直到有消费者来取。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要注意的是，SynchronousQueue 的容量不是 1 而是 0，因为 SynchronousQueue 不需要去持有元素，它所做的就是直接传递（direct handoff）。由于每当需要传递的时候，SynchronousQueue 会把元素直接从生产者传给消费者，在此期间并不需要做存储，所以如果运用得当，它的效率是很高的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外，由于它的容量为 0，所以相比于一般的阻塞队列，SynchronousQueue 的很多方法的实现是很有意思的，我们来举几个例子："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SynchronousQueue 的 peek 方法永远返回 null，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"1"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"peek"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"() {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为 peek 方法的含义是取出头结点，但是 SynchronousQueue 的容量是 0，所以连头结点都没有，peek 方法也就没有意义，所以始终返回 null。同理，element 始终会抛出 NoSuchElementException 异常。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"而 SynchronousQueue 的 size 方法始终返回 0，因为它内部并没有容量，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"2"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"() {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk7"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"直接 return 0，同理，isEmpty 方法始终返回 true："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"3"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"boolean"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"isEmpty"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"() {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"true"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为它始终都是空的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"PriorityBlockingQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Priority: 优先级的意思"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"前面我们所说的 ArrayBlockingQueue 和 LinkedBlockingQueue 都是采用先进先出的顺序进行排序，可是如果有的时候我们需要自定义排序怎么办呢？这时就需要使用 PriorityBlockingQueue。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"PriorityBlockingQueue 是一个支持优先级的无界阻塞队列，可以通过自定义类实现 compareTo() 方法来指定元素排序规则，或者初始化时通过构造器参数 Comparator 来指定排序规则。同时，插入队列的对象必须是可比较大小的，也就是 Comparable 的，否则会抛出 ClassCastException 异常。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"它的 take 方法在队列为空的时候会阻塞，但是正因为它是无界队列，而且会自动扩容，所以它的队列永远不会满，所以它的 put 方法永远不会阻塞，添加操作始终都会成功，也正因为如此，它的成员变量里只有一个 Condition："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"4"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"private"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"final"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Condition"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"notEmpty"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这和之前的 ArrayBlockingQueue 拥有两个 Condition（分别是 notEmpty 和 notFull）形成了鲜明的对比，我们的 PriorityBlockingQueue 不需要 notFull，因为它永远都不会满，真是“有空间就可以任性”。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"DelayQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DelayQueue 这个队列比较特殊，具有“延迟”的功能。我们可以设定让队列中的任务延迟多久之后执行，比如 10 秒钟之后执行，这在例如“30 分钟后未付款自动取消订单”等需要延迟执行的场景中被大量使用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"它是无界队列，放入的元素必须实现 Delayed 接口，而 Delayed 接口又继承了 Comparable 接口，所以自然就拥有了比较和排序的能力，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"5"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"interface"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Delayed"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"extends"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Delayed"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"> {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"long"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"getDelay"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"TimeUnit"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"unit"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":");"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以看出这个 Delayed 接口继承自 Comparable，里面有一个需要实现的方法，就是 getDelay。这里的 getDelay 方法返回的是“还剩下多长的延迟时间才会被执行”，如果返回 0 或者负数则代表任务已过期。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"元素会根据延迟时间的长短被放到队列的不同位置，越靠近队列头代表越早过期。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DelayQueue 内部使用了 PriorityQueue 的能力来进行排序，而不是自己从头编写，我们在工作中可以学习这种思想，对已有的功能进行复用，不但可以减少开发量，同时避免了“重复造轮子”，更重要的是，对学到的知识进行合理的运用，让知识变得更灵活，做到触类旁通。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"如何选择"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"线程池对于阻塞队列的选择"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"线程池"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"实现队列"}]},{"type":"element","tagName":"th","properties":{},"children":[{"type":"text","value":"特性"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"FixedThreadPool"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"LinkedBlockingQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"没有额外线程，只存在核心线程，而且核心线程没有超时机制，而且任务队列没有长度的限制"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"SingleThreadExecutor"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"LinkedBlockingQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"CachedThreadPool"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"SynchronousQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"只有非核心线程，并且其最大线程数为Integer.MAX_VALUE"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"ScheduledThreadPool"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"SingleThreadScheduledExecutor"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"DelayedWorkQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面我们来看线程池的选择要诀。上面表格左侧是线程池，右侧为它们对应的阻塞队列，你可以看到 5 种线程池只对应了 3 种阻塞队列，下面我们对它们进行逐一的介绍。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"FixedThreadPool（SingleThreadExecutor 同理）选取的是 LinkedBlockingQueue"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为 LinkedBlockingQueue 不同于 ArrayBlockingQueue，ArrayBlockingQueue 的容量是有限的，而 LinkedBlockingQueue 是链表长度默认是可以无限延长的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于 FixedThreadPool 的线程数是固定的，在任务激增的时候，它无法增加更多的线程来帮忙处理 Task，所以需要像 LinkedBlockingQueue 这样没有容量上限的 Queue 来存储那些还没处理的 Task。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果所有的 corePoolSize 线程都正在忙，那么新任务将会进入阻塞队列等待，由于队列是没有容量上限的，队列永远不会被填满，这样就保证了对于线程池 FixedThreadPool 和 SingleThreadExecutor 而言，不会拒绝新任务的提交，也不会丢失数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"CachedThreadPool 选取的是 SynchronousQueue"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于 CachedThreadPool 而言，为了避免新提交的任务被拒绝，它选择了无限制的 maximumPoolSize（在专栏中，maxPoolSize 等同于 maximumPoolSize），所以既然它的线程的最大数量是无限的，也就意味着它的线程数不会受到限制，那么它就不需要一个额外的空间来存储那些 Task，因为每个任务都可以通过新建线程来处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SynchronousQueue 会直接把任务交给线程，而不需要另外保存它们，效率更高，所以 CachedThreadPool 使用的 Queue 是 SynchronousQueue。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ScheduledThreadPool（SingleThreadScheduledExecutor同理）选取的是延迟队列"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于 ScheduledThreadPool 而言，它使用的是 DelayedWorkQueue。延迟队列的特点是：不是先进先出，而是会按照延迟时间的长短来排序，下一个即将执行的任务会排到队列的最前面。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们来举个例子：例如我们往这个队列中，放一个延迟 10 分钟执行的任务，然后再放一个延迟 10 秒钟执行的任务。通常而言，如果不是延迟队列，那么按照先进先出的排列规则，也就是延迟 10 分钟执行的那个任务是第一个放置的，会放在最前面。但是由于我们此时使用的是阻塞队列，阻塞队列在排放各个任务的位置的时候，会根据延迟时间的长短来排放。所以，我们第二个放置的延迟 10 秒钟执行的那个任务，反而会排在延迟 10 分钟的任务的前面，因为它的执行时间更早。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们选择使用延迟队列的原因是，ScheduledThreadPool 处理的是基于时间而执行的 Task，而延迟队列有能力把 Task 按照执行时间的先后进行排序，这正是我们所需要的功能。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ArrayBlockingQueue"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"除了线程池选择的 3 种阻塞队列外，还有一种常用的阻塞队列叫作 ArrayBlockingQueue，它也经常被用于我们手动创建的线程池中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种阻塞队列内部是用数组实现的，在新建对象的时候要求传入容量值，且后期不能扩容，所以 ArrayBlockingQueue的最大特点就是容量是有限且固定的。这样一来，使用 ArrayBlockingQueue 且设置了合理大小的最大线程数的线程池，在任务队列放满了以后，如果线程数也已经达到了最大值，那么线程池根据规则就会拒绝新提交的任务，而不会无限增加任务或者线程数导致内存不足，可以非常有效地防止资源耗尽的情况发生。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"归纳"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们可以从以下 5 个角度考虑，来选择合适的阻塞队列："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"功能"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 1 个需要考虑的就是功能层面，比如是否需要阻塞队列帮我们排序，如优先级排序、延迟执行等。如果有这个需要，我们就必须选择类似于 PriorityBlockingQueue 之类的有排序能力的阻塞队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"容量"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 2 个需要考虑的是容量，或者说是否有存储的要求，还是只需要“直接传递”。在考虑这一点的时候，我们知道前面介绍的那几种阻塞队列，有的是容量固定的，如 ArrayBlockingQueue；有的默认是容量无限的，如 LinkedBlockingQueue；而有的里面没有任何容量，如 SynchronousQueue；而对于 DelayQueue 而言，它的容量固定就是 Integer.MAX_VALUE。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以不同阻塞队列的容量是千差万别的，我们需要根据任务数量来推算出合适的容量，从而去选取合适的 BlockingQueue。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"能否扩容"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 3 个需要考虑的是能否扩容。因为有时我们并不能在初始的时候很好的准确估计队列的大小，因为业务可能有高峰期、低谷期。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果一开始就固定一个容量，可能无法应对所有的情况，也是不合适的，有可能需要动态扩容。如果我们需要动态扩容的话，那么就不能选择 ArrayBlockingQueue ，因为它的容量在创建时就确定了，无法扩容。相反，PriorityBlockingQueue 即使在指定了初始容量之后，后续如果有需要，也可以自动扩容。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以我们可以根据是否需要扩容来选取合适的队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"内存结构"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 4 个需要考虑的点就是内存结构。在上一课时我们分析过 ArrayBlockingQueue 的源码，看到了它的内部结构是“数组”的形式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"和它不同的是，LinkedBlockingQueue 的内部是用链表实现的，所以这里就需要我们考虑到，ArrayBlockingQueue 没有链表所需要的“节点”，空间利用率更高。所以如果我们对性能有要求可以从内存的结构角度去考虑这个问题。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"性能"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 5 点就是从性能的角度去考虑。比如 LinkedBlockingQueue 由于拥有两把锁，它的操作粒度更细，在并发程度高的时候，相对于只有一把锁的 ArrayBlockingQueue 性能会更好。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外，SynchronousQueue 性能往往优于其他实现，因为它只需要“直接传递”，而不需要存储的过程。如果我们的场景需要直接传递的话，可以优先考虑 SynchronousQueue。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n"}]}],"data":{"quirksMode":false}},"html":"<h1 id=\"常见的阻塞队列\">常见的阻塞队列</h1>\n<h2 id=\"ArrayBlockingQueue\">ArrayBlockingQueue</h2>\n<p updated=\"20220630093303\">ArrayBlockingQueue 是最典型的<strong>有界队列</strong>，其内部是用数组存储元素的，利用 ReentrantLock 实现线程安全。</p>\n<p updated=\"20220630093303\">我们在创建它的时候就需要指定它的容量，之后也不可以再扩容了，在构造函数中我们同样可以指定是否是公平的，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">第一个参数是容量，第二个参数是是否公平。\nArrayBlockingQueue(int capacity, boolean fair)\n</code></pre>\n<p updated=\"20220630093303\">正如 ReentrantLock 一样:</p>\n<blockquote updated=\"20220630093303\">\n<p updated=\"20220630093303\">如果 ArrayBlockingQueue 被设置为非公平的，那么就存在插队的可能；</p>\n<p updated=\"20220630093303\">如果设置为公平的，那么等待了最长时间的线程会被优先处理，其他线程不允许插队，不过这样的公平策略同时会带来一定的性能损耗，因为非公平的吞吐量通常会高于公平的情况。</p>\n</blockquote>\n<h2 id=\"LinkedBlockingQueue\">LinkedBlockingQueue</h2>\n<p updated=\"20220630093303\">正如名字所示，这是一个内部用链表实现的 BlockingQueue。如果我们不指定它的初始容量，那么它容量默认就为整型的最大值 Integer.MAX_VALUE，由于这个数非常大，我们通常不可能放入这么多的数据，所以 LinkedBlockingQueue 也被称作无界队列，代表它几乎没有界限。</p>\n<h2 id=\"SynchronousQueue\">SynchronousQueue</h2>\n<p updated=\"20220630093303\"><span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/Cgq2xl4lhhSAZIuZAABMMZW2RVk163.png\" alt=\"img\" /></span></p>\n<p updated=\"20220630093303\">如图所示，SynchronousQueue 最大的不同之处在于，它的容量为 0，所以没有一个地方来暂存元素，导致每次取数据都要先阻塞，直到有数据被放入；同理，每次放数据的时候也会阻塞，直到有消费者来取。</p>\n<p updated=\"20220630093303\">需要注意的是，SynchronousQueue 的容量不是 1 而是 0，因为 SynchronousQueue 不需要去持有元素，它所做的就是直接传递（direct handoff）。由于每当需要传递的时候，SynchronousQueue 会把元素直接从生产者传给消费者，在此期间并不需要做存储，所以如果运用得当，它的效率是很高的。</p>\n<p updated=\"20220630093303\">另外，由于它的容量为 0，所以相比于一般的阻塞队列，SynchronousQueue 的很多方法的实现是很有意思的，我们来举几个例子：</p>\n<p updated=\"20220630093303\">SynchronousQueue 的 peek 方法永远返回 null，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public E peek() {\n    return null;\n}\n</code></pre>\n<p updated=\"20220630093303\">因为 peek 方法的含义是取出头结点，但是 SynchronousQueue 的容量是 0，所以连头结点都没有，peek 方法也就没有意义，所以始终返回 null。同理，element 始终会抛出 NoSuchElementException 异常。</p>\n<p updated=\"20220630093303\">而 SynchronousQueue 的 size 方法始终返回 0，因为它内部并没有容量，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public int size() {\n    return 0;\n}\n</code></pre>\n<p updated=\"20220630093303\">直接 return 0，同理，isEmpty 方法始终返回 true：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public boolean isEmpty() {\n    return true;\n}\n</code></pre>\n<p updated=\"20220630093303\">因为它始终都是空的。</p>\n<h2 id=\"PriorityBlockingQueue\">PriorityBlockingQueue</h2>\n<p updated=\"20220630093303\">Priority: 优先级的意思</p>\n<p updated=\"20220630093303\">前面我们所说的 ArrayBlockingQueue 和 LinkedBlockingQueue 都是采用先进先出的顺序进行排序，可是如果有的时候我们需要自定义排序怎么办呢？这时就需要使用 PriorityBlockingQueue。</p>\n<p updated=\"20220630093303\">PriorityBlockingQueue 是一个支持优先级的无界阻塞队列，可以通过自定义类实现 compareTo() 方法来指定元素排序规则，或者初始化时通过构造器参数 Comparator 来指定排序规则。同时，插入队列的对象必须是可比较大小的，也就是 Comparable 的，否则会抛出 ClassCastException 异常。</p>\n<p updated=\"20220630093303\">它的 take 方法在队列为空的时候会阻塞，但是正因为它是无界队列，而且会自动扩容，所以它的队列永远不会满，所以它的 put 方法永远不会阻塞，添加操作始终都会成功，也正因为如此，它的成员变量里只有一个 Condition：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">private final Condition notEmpty;\n</code></pre>\n<p updated=\"20220630093303\">这和之前的 ArrayBlockingQueue 拥有两个 Condition（分别是 notEmpty 和 notFull）形成了鲜明的对比，我们的 PriorityBlockingQueue 不需要 notFull，因为它永远都不会满，真是“有空间就可以任性”。</p>\n<h2 id=\"DelayQueue\">DelayQueue</h2>\n<p updated=\"20220630093303\">DelayQueue 这个队列比较特殊，具有“延迟”的功能。我们可以设定让队列中的任务延迟多久之后执行，比如 10 秒钟之后执行，这在例如“30 分钟后未付款自动取消订单”等需要延迟执行的场景中被大量使用。</p>\n<p updated=\"20220630093303\">它是无界队列，放入的元素必须实现 Delayed 接口，而 Delayed 接口又继承了 Comparable 接口，所以自然就拥有了比较和排序的能力，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public interface Delayed extends Comparable&lt;Delayed&gt; {\n    long getDelay(TimeUnit unit);\n}\n</code></pre>\n<p updated=\"20220630093303\">可以看出这个 Delayed 接口继承自 Comparable，里面有一个需要实现的方法，就是 getDelay。这里的 getDelay 方法返回的是“还剩下多长的延迟时间才会被执行”，如果返回 0 或者负数则代表任务已过期。</p>\n<p updated=\"20220630093303\">元素会根据延迟时间的长短被放到队列的不同位置，越靠近队列头代表越早过期。</p>\n<p updated=\"20220630093303\">DelayQueue 内部使用了 PriorityQueue 的能力来进行排序，而不是自己从头编写，我们在工作中可以学习这种思想，对已有的功能进行复用，不但可以减少开发量，同时避免了“重复造轮子”，更重要的是，对学到的知识进行合理的运用，让知识变得更灵活，做到触类旁通。</p>\n<h2 id=\"如何选择\">如何选择</h2>\n<h3 id=\"线程池对于阻塞队列的选择\">线程池对于阻塞队列的选择</h3>\n<table updated=\"20220630093303\">\n<thead>\n<tr>\n<th align=\"center\">线程池</th>\n<th align=\"center\">实现队列</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">FixedThreadPool</td>\n<td align=\"center\">LinkedBlockingQueue</td>\n<td>没有额外线程，只存在核心线程，而且核心线程没有超时机制，而且任务队列没有长度的限制</td>\n</tr>\n<tr>\n<td align=\"center\">SingleThreadExecutor</td>\n<td align=\"center\">LinkedBlockingQueue</td>\n<td>内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。</td>\n</tr>\n<tr>\n<td align=\"center\">CachedThreadPool</td>\n<td align=\"center\">SynchronousQueue</td>\n<td>只有非核心线程，并且其最大线程数为Integer.MAX_VALUE</td>\n</tr>\n<tr>\n<td align=\"center\">ScheduledThreadPool&lt;br&gt;SingleThreadScheduledExecutor</td>\n<td align=\"center\">DelayedWorkQueue</td>\n<td>按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构</td>\n</tr>\n</tbody>\n</table>\n<p updated=\"20220630093303\">下面我们来看线程池的选择要诀。上面表格左侧是线程池，右侧为它们对应的阻塞队列，你可以看到 5 种线程池只对应了 3 种阻塞队列，下面我们对它们进行逐一的介绍。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-61nap5y\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>FixedThreadPool（SingleThreadExecutor 同理）选取的是 LinkedBlockingQueue</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">因为 LinkedBlockingQueue 不同于 ArrayBlockingQueue，ArrayBlockingQueue 的容量是有限的，而 LinkedBlockingQueue 是链表长度默认是可以无限延长的。</p>\n<p updated=\"20220630093303\">由于 FixedThreadPool 的线程数是固定的，在任务激增的时候，它无法增加更多的线程来帮忙处理 Task，所以需要像 LinkedBlockingQueue 这样没有容量上限的 Queue 来存储那些还没处理的 Task。</p>\n<p updated=\"20220630093303\">如果所有的 corePoolSize 线程都正在忙，那么新任务将会进入阻塞队列等待，由于队列是没有容量上限的，队列永远不会被填满，这样就保证了对于线程池 FixedThreadPool 和 SingleThreadExecutor 而言，不会拒绝新任务的提交，也不会丢失数据。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-lz3jad2\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>CachedThreadPool 选取的是 SynchronousQueue</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">对于 CachedThreadPool 而言，为了避免新提交的任务被拒绝，它选择了无限制的 maximumPoolSize（在专栏中，maxPoolSize 等同于 maximumPoolSize），所以既然它的线程的最大数量是无限的，也就意味着它的线程数不会受到限制，那么它就不需要一个额外的空间来存储那些 Task，因为每个任务都可以通过新建线程来处理。</p>\n<p updated=\"20220630093303\">SynchronousQueue 会直接把任务交给线程，而不需要另外保存它们，效率更高，所以 CachedThreadPool 使用的 Queue 是 SynchronousQueue。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-bary1hj\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>ScheduledThreadPool（SingleThreadScheduledExecutor同理）选取的是延迟队列</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">对于 ScheduledThreadPool 而言，它使用的是 DelayedWorkQueue。延迟队列的特点是：不是先进先出，而是会按照延迟时间的长短来排序，下一个即将执行的任务会排到队列的最前面。</p>\n<p updated=\"20220630093303\">我们来举个例子：例如我们往这个队列中，放一个延迟 10 分钟执行的任务，然后再放一个延迟 10 秒钟执行的任务。通常而言，如果不是延迟队列，那么按照先进先出的排列规则，也就是延迟 10 分钟执行的那个任务是第一个放置的，会放在最前面。但是由于我们此时使用的是阻塞队列，阻塞队列在排放各个任务的位置的时候，会根据延迟时间的长短来排放。所以，我们第二个放置的延迟 10 秒钟执行的那个任务，反而会排在延迟 10 分钟的任务的前面，因为它的执行时间更早。</p>\n<p updated=\"20220630093303\">我们选择使用延迟队列的原因是，ScheduledThreadPool 处理的是基于时间而执行的 Task，而延迟队列有能力把 Task 按照执行时间的先后进行排序，这正是我们所需要的功能。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-wsvt8yn\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>ArrayBlockingQueue</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">除了线程池选择的 3 种阻塞队列外，还有一种常用的阻塞队列叫作 ArrayBlockingQueue，它也经常被用于我们手动创建的线程池中。</p>\n<p updated=\"20220630093303\">这种阻塞队列内部是用数组实现的，在新建对象的时候要求传入容量值，且后期不能扩容，所以 ArrayBlockingQueue的最大特点就是容量是有限且固定的。这样一来，使用 ArrayBlockingQueue 且设置了合理大小的最大线程数的线程池，在任务队列放满了以后，如果线程数也已经达到了最大值，那么线程池根据规则就会拒绝新提交的任务，而不会无限增加任务或者线程数导致内存不足，可以非常有效地防止资源耗尽的情况发生。</p>\n<h3 id=\"归纳\">归纳</h3>\n<p updated=\"20220630093303\">我们可以从以下 5 个角度考虑，来选择合适的阻塞队列：</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-o5gfe67\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">功能</p>\n<p updated=\"20220630093303\">第 1 个需要考虑的就是功能层面，比如是否需要阻塞队列帮我们排序，如优先级排序、延迟执行等。如果有这个需要，我们就必须选择类似于 PriorityBlockingQueue 之类的有排序能力的阻塞队列。</p>\n</li>\n<li id=\"20220630093303-9knysnp\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">容量</p>\n<p updated=\"20220630093303\">第 2 个需要考虑的是容量，或者说是否有存储的要求，还是只需要“直接传递”。在考虑这一点的时候，我们知道前面介绍的那几种阻塞队列，有的是容量固定的，如 ArrayBlockingQueue；有的默认是容量无限的，如 LinkedBlockingQueue；而有的里面没有任何容量，如 SynchronousQueue；而对于 DelayQueue 而言，它的容量固定就是 Integer.MAX_VALUE。</p>\n<p updated=\"20220630093303\">所以不同阻塞队列的容量是千差万别的，我们需要根据任务数量来推算出合适的容量，从而去选取合适的 BlockingQueue。</p>\n</li>\n<li id=\"20220630093303-5ov2z06\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">能否扩容</p>\n<p updated=\"20220630093303\">第 3 个需要考虑的是能否扩容。因为有时我们并不能在初始的时候很好的准确估计队列的大小，因为业务可能有高峰期、低谷期。</p>\n<p updated=\"20220630093303\">如果一开始就固定一个容量，可能无法应对所有的情况，也是不合适的，有可能需要动态扩容。如果我们需要动态扩容的话，那么就不能选择 ArrayBlockingQueue ，因为它的容量在创建时就确定了，无法扩容。相反，PriorityBlockingQueue 即使在指定了初始容量之后，后续如果有需要，也可以自动扩容。</p>\n<p updated=\"20220630093303\">所以我们可以根据是否需要扩容来选取合适的队列。</p>\n</li>\n<li id=\"20220630093303-7gnx3z1\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">内存结构</p>\n<p updated=\"20220630093303\">第 4 个需要考虑的点就是内存结构。在上一课时我们分析过 ArrayBlockingQueue 的源码，看到了它的内部结构是“数组”的形式。</p>\n<p updated=\"20220630093303\">和它不同的是，LinkedBlockingQueue 的内部是用链表实现的，所以这里就需要我们考虑到，ArrayBlockingQueue 没有链表所需要的“节点”，空间利用率更高。所以如果我们对性能有要求可以从内存的结构角度去考虑这个问题。</p>\n</li>\n<li id=\"20220630093303-k7qbelx\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">性能</p>\n<p updated=\"20220630093303\">第 5 点就是从性能的角度去考虑。比如 LinkedBlockingQueue 由于拥有两把锁，它的操作粒度更细，在并发程度高的时候，相对于只有一把锁的 ArrayBlockingQueue 性能会更好。</p>\n<p updated=\"20220630093303\">另外，SynchronousQueue 性能往往优于其他实现，因为它只需要“直接传递”，而不需要存储的过程。如果我们的场景需要直接传递的话，可以优先考虑 SynchronousQueue。</p>\n</li>\n</ul>\n","articleNode":{"field":{"contentType":"topic","topic":"Java并发工具包"},"frontmatter":{"id":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","title":"常见的阻塞队列","date":"2022-04-21 19:40","absolute_path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列"},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"常见的阻塞队列"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"ArrayBlockingQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ArrayBlockingQueue 是最典型的"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"有界队列"}]},{"type":"text","value":"，其内部是用数组存储元素的，利用 ReentrantLock 实现线程安全。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们在创建它的时候就需要指定它的容量，之后也不可以再扩容了，在构造函数中我们同样可以指定是否是公平的，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"0"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"第一个参数是容量，第二个参数是是否公平。"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"ArrayBlockingQueue"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" capacity, "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"boolean"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" fair)"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正如 ReentrantLock 一样:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果 ArrayBlockingQueue 被设置为非公平的，那么就存在插队的可能；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果设置为公平的，那么等待了最长时间的线程会被优先处理，其他线程不允许插队，不过这样的公平策略同时会带来一定的性能损耗，因为非公平的吞吐量通常会高于公平的情况。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"LinkedBlockingQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正如名字所示，这是一个内部用链表实现的 BlockingQueue。如果我们不指定它的初始容量，那么它容量默认就为整型的最大值 Integer.MAX_VALUE，由于这个数非常大，我们通常不可能放入这么多的数据，所以 LinkedBlockingQueue 也被称作无界队列，代表它几乎没有界限。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"SynchronousQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/Cgq2xl4lhhSAZIuZAABMMZW2RVk163.png","alt":"img"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如图所示，SynchronousQueue 最大的不同之处在于，它的容量为 0，所以没有一个地方来暂存元素，导致每次取数据都要先阻塞，直到有数据被放入；同理，每次放数据的时候也会阻塞，直到有消费者来取。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要注意的是，SynchronousQueue 的容量不是 1 而是 0，因为 SynchronousQueue 不需要去持有元素，它所做的就是直接传递（direct handoff）。由于每当需要传递的时候，SynchronousQueue 会把元素直接从生产者传给消费者，在此期间并不需要做存储，所以如果运用得当，它的效率是很高的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外，由于它的容量为 0，所以相比于一般的阻塞队列，SynchronousQueue 的很多方法的实现是很有意思的，我们来举几个例子："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SynchronousQueue 的 peek 方法永远返回 null，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"1"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"E"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"peek"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"() {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"null"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为 peek 方法的含义是取出头结点，但是 SynchronousQueue 的容量是 0，所以连头结点都没有，peek 方法也就没有意义，所以始终返回 null。同理，element 始终会抛出 NoSuchElementException 异常。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"而 SynchronousQueue 的 size 方法始终返回 0，因为它内部并没有容量，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"2"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"int"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"size"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"() {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk7"]},"children":[{"type":"text","value":"0"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"直接 return 0，同理，isEmpty 方法始终返回 true："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"3"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"boolean"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"isEmpty"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"() {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk15"]},"children":[{"type":"text","value":"return"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"true"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为它始终都是空的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"PriorityBlockingQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Priority: 优先级的意思"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"前面我们所说的 ArrayBlockingQueue 和 LinkedBlockingQueue 都是采用先进先出的顺序进行排序，可是如果有的时候我们需要自定义排序怎么办呢？这时就需要使用 PriorityBlockingQueue。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"PriorityBlockingQueue 是一个支持优先级的无界阻塞队列，可以通过自定义类实现 compareTo() 方法来指定元素排序规则，或者初始化时通过构造器参数 Comparator 来指定排序规则。同时，插入队列的对象必须是可比较大小的，也就是 Comparable 的，否则会抛出 ClassCastException 异常。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"它的 take 方法在队列为空的时候会阻塞，但是正因为它是无界队列，而且会自动扩容，所以它的队列永远不会满，所以它的 put 方法永远不会阻塞，添加操作始终都会成功，也正因为如此，它的成员变量里只有一个 Condition："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"4"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"private"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"final"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Condition"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"notEmpty"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":";"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这和之前的 ArrayBlockingQueue 拥有两个 Condition（分别是 notEmpty 和 notFull）形成了鲜明的对比，我们的 PriorityBlockingQueue 不需要 notFull，因为它永远都不会满，真是“有空间就可以任性”。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"DelayQueue"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DelayQueue 这个队列比较特殊，具有“延迟”的功能。我们可以设定让队列中的任务延迟多久之后执行，比如 10 秒钟之后执行，这在例如“30 分钟后未付款自动取消订单”等需要延迟执行的场景中被大量使用。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"它是无界队列，放入的元素必须实现 Delayed 接口，而 Delayed 接口又继承了 Comparable 接口，所以自然就拥有了比较和排序的能力，代码如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{"className":["grvsc-container","dark-default-dark"],"dataLanguage":"java","dataIndex":"5"},"children":[{"type":"element","tagName":"code","properties":{"className":["grvsc-code"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"public"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"interface"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Delayed"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk4"]},"children":[{"type":"text","value":"extends"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Comparable"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"Delayed"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"> {"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"    "}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"long"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk11"]},"children":[{"type":"text","value":"getDelay"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["mtk10"]},"children":[{"type":"text","value":"TimeUnit"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":" "}]},{"type":"element","tagName":"span","properties":{"className":["mtk12"]},"children":[{"type":"text","value":"unit"}]},{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":");"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["grvsc-line"]},"children":[{"type":"element","tagName":"span","properties":{"className":["grvsc-source"]},"children":[{"type":"element","tagName":"span","properties":{"className":["mtk1"]},"children":[{"type":"text","value":"}"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"可以看出这个 Delayed 接口继承自 Comparable，里面有一个需要实现的方法，就是 getDelay。这里的 getDelay 方法返回的是“还剩下多长的延迟时间才会被执行”，如果返回 0 或者负数则代表任务已过期。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"元素会根据延迟时间的长短被放到队列的不同位置，越靠近队列头代表越早过期。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DelayQueue 内部使用了 PriorityQueue 的能力来进行排序，而不是自己从头编写，我们在工作中可以学习这种思想，对已有的功能进行复用，不但可以减少开发量，同时避免了“重复造轮子”，更重要的是，对学到的知识进行合理的运用，让知识变得更灵活，做到触类旁通。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"如何选择"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"线程池对于阻塞队列的选择"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"线程池"}]},{"type":"element","tagName":"th","properties":{"align":"center"},"children":[{"type":"text","value":"实现队列"}]},{"type":"element","tagName":"th","properties":{},"children":[{"type":"text","value":"特性"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"FixedThreadPool"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"LinkedBlockingQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"没有额外线程，只存在核心线程，而且核心线程没有超时机制，而且任务队列没有长度的限制"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"SingleThreadExecutor"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"LinkedBlockingQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"CachedThreadPool"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"SynchronousQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"只有非核心线程，并且其最大线程数为Integer.MAX_VALUE"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"ScheduledThreadPool"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"SingleThreadScheduledExecutor"}]},{"type":"element","tagName":"td","properties":{"align":"center"},"children":[{"type":"text","value":"DelayedWorkQueue"}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"text","value":"按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构"}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面我们来看线程池的选择要诀。上面表格左侧是线程池，右侧为它们对应的阻塞队列，你可以看到 5 种线程池只对应了 3 种阻塞队列，下面我们对它们进行逐一的介绍。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"FixedThreadPool（SingleThreadExecutor 同理）选取的是 LinkedBlockingQueue"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为 LinkedBlockingQueue 不同于 ArrayBlockingQueue，ArrayBlockingQueue 的容量是有限的，而 LinkedBlockingQueue 是链表长度默认是可以无限延长的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于 FixedThreadPool 的线程数是固定的，在任务激增的时候，它无法增加更多的线程来帮忙处理 Task，所以需要像 LinkedBlockingQueue 这样没有容量上限的 Queue 来存储那些还没处理的 Task。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果所有的 corePoolSize 线程都正在忙，那么新任务将会进入阻塞队列等待，由于队列是没有容量上限的，队列永远不会被填满，这样就保证了对于线程池 FixedThreadPool 和 SingleThreadExecutor 而言，不会拒绝新任务的提交，也不会丢失数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"CachedThreadPool 选取的是 SynchronousQueue"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于 CachedThreadPool 而言，为了避免新提交的任务被拒绝，它选择了无限制的 maximumPoolSize（在专栏中，maxPoolSize 等同于 maximumPoolSize），所以既然它的线程的最大数量是无限的，也就意味着它的线程数不会受到限制，那么它就不需要一个额外的空间来存储那些 Task，因为每个任务都可以通过新建线程来处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"SynchronousQueue 会直接把任务交给线程，而不需要另外保存它们，效率更高，所以 CachedThreadPool 使用的 Queue 是 SynchronousQueue。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ScheduledThreadPool（SingleThreadScheduledExecutor同理）选取的是延迟队列"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于 ScheduledThreadPool 而言，它使用的是 DelayedWorkQueue。延迟队列的特点是：不是先进先出，而是会按照延迟时间的长短来排序，下一个即将执行的任务会排到队列的最前面。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们来举个例子：例如我们往这个队列中，放一个延迟 10 分钟执行的任务，然后再放一个延迟 10 秒钟执行的任务。通常而言，如果不是延迟队列，那么按照先进先出的排列规则，也就是延迟 10 分钟执行的那个任务是第一个放置的，会放在最前面。但是由于我们此时使用的是阻塞队列，阻塞队列在排放各个任务的位置的时候，会根据延迟时间的长短来排放。所以，我们第二个放置的延迟 10 秒钟执行的那个任务，反而会排在延迟 10 分钟的任务的前面，因为它的执行时间更早。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们选择使用延迟队列的原因是，ScheduledThreadPool 处理的是基于时间而执行的 Task，而延迟队列有能力把 Task 按照执行时间的先后进行排序，这正是我们所需要的功能。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"ArrayBlockingQueue"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"除了线程池选择的 3 种阻塞队列外，还有一种常用的阻塞队列叫作 ArrayBlockingQueue，它也经常被用于我们手动创建的线程池中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种阻塞队列内部是用数组实现的，在新建对象的时候要求传入容量值，且后期不能扩容，所以 ArrayBlockingQueue的最大特点就是容量是有限且固定的。这样一来，使用 ArrayBlockingQueue 且设置了合理大小的最大线程数的线程池，在任务队列放满了以后，如果线程数也已经达到了最大值，那么线程池根据规则就会拒绝新提交的任务，而不会无限增加任务或者线程数导致内存不足，可以非常有效地防止资源耗尽的情况发生。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"归纳"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们可以从以下 5 个角度考虑，来选择合适的阻塞队列："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"功能"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 1 个需要考虑的就是功能层面，比如是否需要阻塞队列帮我们排序，如优先级排序、延迟执行等。如果有这个需要，我们就必须选择类似于 PriorityBlockingQueue 之类的有排序能力的阻塞队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"容量"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 2 个需要考虑的是容量，或者说是否有存储的要求，还是只需要“直接传递”。在考虑这一点的时候，我们知道前面介绍的那几种阻塞队列，有的是容量固定的，如 ArrayBlockingQueue；有的默认是容量无限的，如 LinkedBlockingQueue；而有的里面没有任何容量，如 SynchronousQueue；而对于 DelayQueue 而言，它的容量固定就是 Integer.MAX_VALUE。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以不同阻塞队列的容量是千差万别的，我们需要根据任务数量来推算出合适的容量，从而去选取合适的 BlockingQueue。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"能否扩容"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 3 个需要考虑的是能否扩容。因为有时我们并不能在初始的时候很好的准确估计队列的大小，因为业务可能有高峰期、低谷期。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果一开始就固定一个容量，可能无法应对所有的情况，也是不合适的，有可能需要动态扩容。如果我们需要动态扩容的话，那么就不能选择 ArrayBlockingQueue ，因为它的容量在创建时就确定了，无法扩容。相反，PriorityBlockingQueue 即使在指定了初始容量之后，后续如果有需要，也可以自动扩容。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以我们可以根据是否需要扩容来选取合适的队列。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"内存结构"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 4 个需要考虑的点就是内存结构。在上一课时我们分析过 ArrayBlockingQueue 的源码，看到了它的内部结构是“数组”的形式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"和它不同的是，LinkedBlockingQueue 的内部是用链表实现的，所以这里就需要我们考虑到，ArrayBlockingQueue 没有链表所需要的“节点”，空间利用率更高。所以如果我们对性能有要求可以从内存的结构角度去考虑这个问题。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"性能"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"第 5 点就是从性能的角度去考虑。比如 LinkedBlockingQueue 由于拥有两把锁，它的操作粒度更细，在并发程度高的时候，相对于只有一把锁的 ArrayBlockingQueue 性能会更好。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"另外，SynchronousQueue 性能往往优于其他实现，因为它只需要“直接传递”，而不需要存储的过程。如果我们的场景需要直接传递的话，可以优先考虑 SynchronousQueue。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n"}]}],"data":{"quirksMode":false}},"html":"<h1 id=\"常见的阻塞队列\">常见的阻塞队列</h1>\n<h2 id=\"ArrayBlockingQueue\">ArrayBlockingQueue</h2>\n<p updated=\"20220630093303\">ArrayBlockingQueue 是最典型的<strong>有界队列</strong>，其内部是用数组存储元素的，利用 ReentrantLock 实现线程安全。</p>\n<p updated=\"20220630093303\">我们在创建它的时候就需要指定它的容量，之后也不可以再扩容了，在构造函数中我们同样可以指定是否是公平的，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">第一个参数是容量，第二个参数是是否公平。\nArrayBlockingQueue(int capacity, boolean fair)\n</code></pre>\n<p updated=\"20220630093303\">正如 ReentrantLock 一样:</p>\n<blockquote updated=\"20220630093303\">\n<p updated=\"20220630093303\">如果 ArrayBlockingQueue 被设置为非公平的，那么就存在插队的可能；</p>\n<p updated=\"20220630093303\">如果设置为公平的，那么等待了最长时间的线程会被优先处理，其他线程不允许插队，不过这样的公平策略同时会带来一定的性能损耗，因为非公平的吞吐量通常会高于公平的情况。</p>\n</blockquote>\n<h2 id=\"LinkedBlockingQueue\">LinkedBlockingQueue</h2>\n<p updated=\"20220630093303\">正如名字所示，这是一个内部用链表实现的 BlockingQueue。如果我们不指定它的初始容量，那么它容量默认就为整型的最大值 Integer.MAX_VALUE，由于这个数非常大，我们通常不可能放入这么多的数据，所以 LinkedBlockingQueue 也被称作无界队列，代表它几乎没有界限。</p>\n<h2 id=\"SynchronousQueue\">SynchronousQueue</h2>\n<p updated=\"20220630093303\"><span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/Cgq2xl4lhhSAZIuZAABMMZW2RVk163.png\" alt=\"img\" /></span></p>\n<p updated=\"20220630093303\">如图所示，SynchronousQueue 最大的不同之处在于，它的容量为 0，所以没有一个地方来暂存元素，导致每次取数据都要先阻塞，直到有数据被放入；同理，每次放数据的时候也会阻塞，直到有消费者来取。</p>\n<p updated=\"20220630093303\">需要注意的是，SynchronousQueue 的容量不是 1 而是 0，因为 SynchronousQueue 不需要去持有元素，它所做的就是直接传递（direct handoff）。由于每当需要传递的时候，SynchronousQueue 会把元素直接从生产者传给消费者，在此期间并不需要做存储，所以如果运用得当，它的效率是很高的。</p>\n<p updated=\"20220630093303\">另外，由于它的容量为 0，所以相比于一般的阻塞队列，SynchronousQueue 的很多方法的实现是很有意思的，我们来举几个例子：</p>\n<p updated=\"20220630093303\">SynchronousQueue 的 peek 方法永远返回 null，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public E peek() {\n    return null;\n}\n</code></pre>\n<p updated=\"20220630093303\">因为 peek 方法的含义是取出头结点，但是 SynchronousQueue 的容量是 0，所以连头结点都没有，peek 方法也就没有意义，所以始终返回 null。同理，element 始终会抛出 NoSuchElementException 异常。</p>\n<p updated=\"20220630093303\">而 SynchronousQueue 的 size 方法始终返回 0，因为它内部并没有容量，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public int size() {\n    return 0;\n}\n</code></pre>\n<p updated=\"20220630093303\">直接 return 0，同理，isEmpty 方法始终返回 true：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public boolean isEmpty() {\n    return true;\n}\n</code></pre>\n<p updated=\"20220630093303\">因为它始终都是空的。</p>\n<h2 id=\"PriorityBlockingQueue\">PriorityBlockingQueue</h2>\n<p updated=\"20220630093303\">Priority: 优先级的意思</p>\n<p updated=\"20220630093303\">前面我们所说的 ArrayBlockingQueue 和 LinkedBlockingQueue 都是采用先进先出的顺序进行排序，可是如果有的时候我们需要自定义排序怎么办呢？这时就需要使用 PriorityBlockingQueue。</p>\n<p updated=\"20220630093303\">PriorityBlockingQueue 是一个支持优先级的无界阻塞队列，可以通过自定义类实现 compareTo() 方法来指定元素排序规则，或者初始化时通过构造器参数 Comparator 来指定排序规则。同时，插入队列的对象必须是可比较大小的，也就是 Comparable 的，否则会抛出 ClassCastException 异常。</p>\n<p updated=\"20220630093303\">它的 take 方法在队列为空的时候会阻塞，但是正因为它是无界队列，而且会自动扩容，所以它的队列永远不会满，所以它的 put 方法永远不会阻塞，添加操作始终都会成功，也正因为如此，它的成员变量里只有一个 Condition：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">private final Condition notEmpty;\n</code></pre>\n<p updated=\"20220630093303\">这和之前的 ArrayBlockingQueue 拥有两个 Condition（分别是 notEmpty 和 notFull）形成了鲜明的对比，我们的 PriorityBlockingQueue 不需要 notFull，因为它永远都不会满，真是“有空间就可以任性”。</p>\n<h2 id=\"DelayQueue\">DelayQueue</h2>\n<p updated=\"20220630093303\">DelayQueue 这个队列比较特殊，具有“延迟”的功能。我们可以设定让队列中的任务延迟多久之后执行，比如 10 秒钟之后执行，这在例如“30 分钟后未付款自动取消订单”等需要延迟执行的场景中被大量使用。</p>\n<p updated=\"20220630093303\">它是无界队列，放入的元素必须实现 Delayed 接口，而 Delayed 接口又继承了 Comparable 接口，所以自然就拥有了比较和排序的能力，代码如下：</p>\n<pre class=\"code-block\" data-language=\"java\"><code class=\"hljs\">public interface Delayed extends Comparable&lt;Delayed&gt; {\n    long getDelay(TimeUnit unit);\n}\n</code></pre>\n<p updated=\"20220630093303\">可以看出这个 Delayed 接口继承自 Comparable，里面有一个需要实现的方法，就是 getDelay。这里的 getDelay 方法返回的是“还剩下多长的延迟时间才会被执行”，如果返回 0 或者负数则代表任务已过期。</p>\n<p updated=\"20220630093303\">元素会根据延迟时间的长短被放到队列的不同位置，越靠近队列头代表越早过期。</p>\n<p updated=\"20220630093303\">DelayQueue 内部使用了 PriorityQueue 的能力来进行排序，而不是自己从头编写，我们在工作中可以学习这种思想，对已有的功能进行复用，不但可以减少开发量，同时避免了“重复造轮子”，更重要的是，对学到的知识进行合理的运用，让知识变得更灵活，做到触类旁通。</p>\n<h2 id=\"如何选择\">如何选择</h2>\n<h3 id=\"线程池对于阻塞队列的选择\">线程池对于阻塞队列的选择</h3>\n<table updated=\"20220630093303\">\n<thead>\n<tr>\n<th align=\"center\">线程池</th>\n<th align=\"center\">实现队列</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">FixedThreadPool</td>\n<td align=\"center\">LinkedBlockingQueue</td>\n<td>没有额外线程，只存在核心线程，而且核心线程没有超时机制，而且任务队列没有长度的限制</td>\n</tr>\n<tr>\n<td align=\"center\">SingleThreadExecutor</td>\n<td align=\"center\">LinkedBlockingQueue</td>\n<td>内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。</td>\n</tr>\n<tr>\n<td align=\"center\">CachedThreadPool</td>\n<td align=\"center\">SynchronousQueue</td>\n<td>只有非核心线程，并且其最大线程数为Integer.MAX_VALUE</td>\n</tr>\n<tr>\n<td align=\"center\">ScheduledThreadPool&lt;br&gt;SingleThreadScheduledExecutor</td>\n<td align=\"center\">DelayedWorkQueue</td>\n<td>按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构</td>\n</tr>\n</tbody>\n</table>\n<p updated=\"20220630093303\">下面我们来看线程池的选择要诀。上面表格左侧是线程池，右侧为它们对应的阻塞队列，你可以看到 5 种线程池只对应了 3 种阻塞队列，下面我们对它们进行逐一的介绍。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-61nap5y\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>FixedThreadPool（SingleThreadExecutor 同理）选取的是 LinkedBlockingQueue</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">因为 LinkedBlockingQueue 不同于 ArrayBlockingQueue，ArrayBlockingQueue 的容量是有限的，而 LinkedBlockingQueue 是链表长度默认是可以无限延长的。</p>\n<p updated=\"20220630093303\">由于 FixedThreadPool 的线程数是固定的，在任务激增的时候，它无法增加更多的线程来帮忙处理 Task，所以需要像 LinkedBlockingQueue 这样没有容量上限的 Queue 来存储那些还没处理的 Task。</p>\n<p updated=\"20220630093303\">如果所有的 corePoolSize 线程都正在忙，那么新任务将会进入阻塞队列等待，由于队列是没有容量上限的，队列永远不会被填满，这样就保证了对于线程池 FixedThreadPool 和 SingleThreadExecutor 而言，不会拒绝新任务的提交，也不会丢失数据。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-lz3jad2\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>CachedThreadPool 选取的是 SynchronousQueue</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">对于 CachedThreadPool 而言，为了避免新提交的任务被拒绝，它选择了无限制的 maximumPoolSize（在专栏中，maxPoolSize 等同于 maximumPoolSize），所以既然它的线程的最大数量是无限的，也就意味着它的线程数不会受到限制，那么它就不需要一个额外的空间来存储那些 Task，因为每个任务都可以通过新建线程来处理。</p>\n<p updated=\"20220630093303\">SynchronousQueue 会直接把任务交给线程，而不需要另外保存它们，效率更高，所以 CachedThreadPool 使用的 Queue 是 SynchronousQueue。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-bary1hj\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>ScheduledThreadPool（SingleThreadScheduledExecutor同理）选取的是延迟队列</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">对于 ScheduledThreadPool 而言，它使用的是 DelayedWorkQueue。延迟队列的特点是：不是先进先出，而是会按照延迟时间的长短来排序，下一个即将执行的任务会排到队列的最前面。</p>\n<p updated=\"20220630093303\">我们来举个例子：例如我们往这个队列中，放一个延迟 10 分钟执行的任务，然后再放一个延迟 10 秒钟执行的任务。通常而言，如果不是延迟队列，那么按照先进先出的排列规则，也就是延迟 10 分钟执行的那个任务是第一个放置的，会放在最前面。但是由于我们此时使用的是阻塞队列，阻塞队列在排放各个任务的位置的时候，会根据延迟时间的长短来排放。所以，我们第二个放置的延迟 10 秒钟执行的那个任务，反而会排在延迟 10 分钟的任务的前面，因为它的执行时间更早。</p>\n<p updated=\"20220630093303\">我们选择使用延迟队列的原因是，ScheduledThreadPool 处理的是基于时间而执行的 Task，而延迟队列有能力把 Task 按照执行时间的先后进行排序，这正是我们所需要的功能。</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-wsvt8yn\" updated=\"20220630093303\">\n<p updated=\"20220630093303\"><strong>ArrayBlockingQueue</strong></p>\n</li>\n</ul>\n<p updated=\"20220630093303\">除了线程池选择的 3 种阻塞队列外，还有一种常用的阻塞队列叫作 ArrayBlockingQueue，它也经常被用于我们手动创建的线程池中。</p>\n<p updated=\"20220630093303\">这种阻塞队列内部是用数组实现的，在新建对象的时候要求传入容量值，且后期不能扩容，所以 ArrayBlockingQueue的最大特点就是容量是有限且固定的。这样一来，使用 ArrayBlockingQueue 且设置了合理大小的最大线程数的线程池，在任务队列放满了以后，如果线程数也已经达到了最大值，那么线程池根据规则就会拒绝新提交的任务，而不会无限增加任务或者线程数导致内存不足，可以非常有效地防止资源耗尽的情况发生。</p>\n<h3 id=\"归纳\">归纳</h3>\n<p updated=\"20220630093303\">我们可以从以下 5 个角度考虑，来选择合适的阻塞队列：</p>\n<ul updated=\"20220630093303\">\n<li id=\"20220630093303-o5gfe67\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">功能</p>\n<p updated=\"20220630093303\">第 1 个需要考虑的就是功能层面，比如是否需要阻塞队列帮我们排序，如优先级排序、延迟执行等。如果有这个需要，我们就必须选择类似于 PriorityBlockingQueue 之类的有排序能力的阻塞队列。</p>\n</li>\n<li id=\"20220630093303-9knysnp\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">容量</p>\n<p updated=\"20220630093303\">第 2 个需要考虑的是容量，或者说是否有存储的要求，还是只需要“直接传递”。在考虑这一点的时候，我们知道前面介绍的那几种阻塞队列，有的是容量固定的，如 ArrayBlockingQueue；有的默认是容量无限的，如 LinkedBlockingQueue；而有的里面没有任何容量，如 SynchronousQueue；而对于 DelayQueue 而言，它的容量固定就是 Integer.MAX_VALUE。</p>\n<p updated=\"20220630093303\">所以不同阻塞队列的容量是千差万别的，我们需要根据任务数量来推算出合适的容量，从而去选取合适的 BlockingQueue。</p>\n</li>\n<li id=\"20220630093303-5ov2z06\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">能否扩容</p>\n<p updated=\"20220630093303\">第 3 个需要考虑的是能否扩容。因为有时我们并不能在初始的时候很好的准确估计队列的大小，因为业务可能有高峰期、低谷期。</p>\n<p updated=\"20220630093303\">如果一开始就固定一个容量，可能无法应对所有的情况，也是不合适的，有可能需要动态扩容。如果我们需要动态扩容的话，那么就不能选择 ArrayBlockingQueue ，因为它的容量在创建时就确定了，无法扩容。相反，PriorityBlockingQueue 即使在指定了初始容量之后，后续如果有需要，也可以自动扩容。</p>\n<p updated=\"20220630093303\">所以我们可以根据是否需要扩容来选取合适的队列。</p>\n</li>\n<li id=\"20220630093303-7gnx3z1\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">内存结构</p>\n<p updated=\"20220630093303\">第 4 个需要考虑的点就是内存结构。在上一课时我们分析过 ArrayBlockingQueue 的源码，看到了它的内部结构是“数组”的形式。</p>\n<p updated=\"20220630093303\">和它不同的是，LinkedBlockingQueue 的内部是用链表实现的，所以这里就需要我们考虑到，ArrayBlockingQueue 没有链表所需要的“节点”，空间利用率更高。所以如果我们对性能有要求可以从内存的结构角度去考虑这个问题。</p>\n</li>\n<li id=\"20220630093303-k7qbelx\" updated=\"20220630093303\">\n<p updated=\"20220630093303\">性能</p>\n<p updated=\"20220630093303\">第 5 点就是从性能的角度去考虑。比如 LinkedBlockingQueue 由于拥有两把锁，它的操作粒度更细，在并发程度高的时候，相对于只有一把锁的 ArrayBlockingQueue 性能会更好。</p>\n<p updated=\"20220630093303\">另外，SynchronousQueue 性能往往优于其他实现，因为它只需要“直接传递”，而不需要存储的过程。如果我们的场景需要直接传递的话，可以优先考虑 SynchronousQueue。</p>\n</li>\n</ul>\n","headings":[{"depth":1,"value":"常见的阻塞队列"},{"depth":2,"value":"ArrayBlockingQueue"},{"depth":2,"value":"LinkedBlockingQueue"},{"depth":2,"value":"SynchronousQueue"},{"depth":2,"value":"PriorityBlockingQueue"},{"depth":2,"value":"DelayQueue"},{"depth":2,"value":"如何选择"},{"depth":3,"value":"线程池对于阻塞队列的选择"},{"depth":3,"value":"归纳"}],"path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列"},"tree":{"title":"Java并发工具包","id":"20220421194022-szu21fl","parentId":"","href":"/topic/Java并发工具包","path":"/topic/Java并发工具包","children":[{"title":"并发基础","id":"20220421224325-jcq08lp","type":"d","href":"/topic/Java并发工具包/并发基础","parentId":"","path":"/topic/Java并发工具包/并发基础","parentPath":"/topic/Java并发工具包","sort":1,"children":[{"title":"线程基础","id":"20220421224347-8pq9978","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础","parentPath":"/topic/Java并发工具包/并发基础","sort":1,"children":[{"title":"Thread的状态","id":"20220421194023-ol9lplx","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","sort":1,"children":[{"title":"New","id":"20220421194023-mz6u7e3","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态#New","parentId":"20220421194023-ol9lplx","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"Runable","id":"20220421194023-i5j5kt4","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态#Runable","parentId":"20220421194023-ol9lplx","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"阻塞态","id":"20220421194023-tboo24c","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态#阻塞态","parentId":"20220421194023-ol9lplx","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[{"title":"Block","id":"20220421194023-ffozdtq","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态#Block","parentId":"20220421194023-tboo24c","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":5},{"title":"Timed Watting","id":"20220421194023-8wsfgft","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态#Timed Watting","parentId":"20220421194023-tboo24c","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":5}],"level":4},{"title":"Watting","id":"20220421194023-dlwp21r","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态#Watting","parentId":"20220421194023-ol9lplx","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的状态","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4}],"level":3},{"title":"进程与线程","id":"20220421194024-2gxhyjq","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础/进程与线程","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础/进程与线程","parentPath":"/topic/Java并发工具包/并发基础/线程基础","sort":2,"children":[{"title":"概述","id":"20220421194024-ch040n5","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/进程与线程#概述","parentId":"20220421194024-2gxhyjq","path":"/topic/Java并发工具包/并发基础/线程基础/进程与线程","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4}],"level":3},{"title":"正确停止线程的方式","id":"20220421194024-frmfw7a","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","sort":3,"children":[{"title":"废弃的停止方式","id":"20220421194024-ghx55hh","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#废弃的停止方式","parentId":"20220421194024-frmfw7a","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[{"title":"Thread.stop和suspend被废弃的原因","id":"20220421194024-c7u9s2m","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#Thread.stop和suspend被废弃的原因","parentId":"20220421194024-ghx55hh","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":5},{"title":"volatile标记停止位的错误","id":"20220421194024-9ucarn0","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#volatile标记停止位的错误","parentId":"20220421194024-ghx55hh","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":5}],"level":4},{"title":"正确的停止方式","id":"20220421194024-0r7ntu4","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#正确的停止方式","parentId":"20220421194024-frmfw7a","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[{"title":"通过interrupt方式停止","id":"20220421194024-98z6tro","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#通过interrupt方式停止","parentId":"20220421194024-0r7ntu4","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":5}],"level":4},{"title":"所以Java中如何正确的停止线程","id":"20220421194024-stvj48i","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#所以Java中如何正确的停止线程","parentId":"20220421194024-frmfw7a","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[{"title":"答题思路","id":"20220421194024-w3nwz6h","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式#答题思路","parentId":"20220421194024-stvj48i","path":"/topic/Java并发工具包/并发基础/线程基础/正确停止线程的方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":5}],"level":4}],"level":3},{"title":"Thread的实现方式","id":"20220421194023-v6obecl","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","sort":4,"children":[{"title":"实现Runable接口","id":"20220421194023-vrnazbw","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式#实现Runable接口","parentId":"20220421194023-v6obecl","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"直接继承Thread","id":"20220421194023-id80wie","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式#直接继承Thread","parentId":"20220421194023-v6obecl","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"用线程池创建线程","id":"20220421194023-7pse6e4","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式#用线程池创建线程","parentId":"20220421194023-v6obecl","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"使用Callable方式创建","id":"20220421194023-w1w9u8x","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式#使用Callable方式创建","parentId":"20220421194023-v6obecl","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"使用Timer","id":"20220421194023-pgfiig8","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式#使用Timer","parentId":"20220421194023-v6obecl","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"本质?","id":"20220421194023-k7hn4oq","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式#本质?","parentId":"20220421194023-v6obecl","path":"/topic/Java并发工具包/并发基础/线程基础/Thread的实现方式","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4}],"level":3},{"title":"waitnotifynotifyAll","id":"20220421194023-1yi0nux","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll","parentPath":"/topic/Java并发工具包/并发基础/线程基础","sort":5,"children":[{"title":"为什么wait必须在synchronized保护的代码中使用","id":"20220421194023-giwl4bj","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll#为什么wait必须在synchronized保护的代码中使用","parentId":"20220421194023-1yi0nux","path":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"为什么 wait/notify/notifyAll 被定义在 Object 类中，而 sleep 定义在 Thread 类中？","id":"20220421194023-xaxtdxr","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll#为什么 wait/notify/notifyAll 被定义在 Object 类中，而 sleep 定义在 Thread 类中？","parentId":"20220421194023-1yi0nux","path":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"wait/notify 和 sleep 方法的异同？","id":"20220421194023-6kelqj2","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll#wait/notify 和 sleep 方法的异同？","parentId":"20220421194023-1yi0nux","path":"/topic/Java并发工具包/并发基础/线程基础/waitnotifynotifyAll","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4}],"level":3},{"title":"生产者消费者模型","id":"20220421194024-s4r7b6l","type":"d","href":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型","parentId":"","path":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型","parentPath":"/topic/Java并发工具包/并发基础/线程基础","sort":6,"children":[{"title":"生产者消费者模式","id":"20220421194024-85fpsgz","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型#生产者消费者模式","parentId":"20220421194024-s4r7b6l","path":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"使用 BlockingQueue 实现生产者消费者模式","id":"20220421194024-xhyv35y","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型#使用 BlockingQueue 实现生产者消费者模式","parentId":"20220421194024-s4r7b6l","path":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"使用 Condition 实现生产者消费者模式","id":"20220421194024-l0y6haz","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型#使用 Condition 实现生产者消费者模式","parentId":"20220421194024-s4r7b6l","path":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4},{"title":"使用 wait/notify 实现生产者消费者模式","id":"20220421194024-41f5dyn","type":"h","href":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型#使用 wait/notify 实现生产者消费者模式","parentId":"20220421194024-s4r7b6l","path":"/topic/Java并发工具包/并发基础/线程基础/生产者消费者模型","parentPath":"/topic/Java并发工具包/并发基础/线程基础","children":[],"level":4}],"level":3}],"level":2},{"title":"线程安全","id":"20220421224600-95safof","type":"d","href":"/topic/Java并发工具包/并发基础/线程安全","parentId":"","path":"/topic/Java并发工具包/并发基础/线程安全","parentPath":"/topic/Java并发工具包/并发基础","sort":2,"children":[{"title":"线程不安全","id":"20220421194024-ixgv706","type":"d","href":"/topic/Java并发工具包/并发基础/线程安全/线程不安全","parentId":"","path":"/topic/Java并发工具包/并发基础/线程安全/线程不安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","sort":1,"children":[{"title":"线程不安全示例","id":"20220421194024-pu2r1id","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程不安全#线程不安全示例","parentId":"20220421194024-ixgv706","path":"/topic/Java并发工具包/并发基础/线程安全/线程不安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":4}],"level":3},{"title":"线程安全","id":"20220421194024-p4q4kvp","type":"d","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentId":"","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","sort":7,"children":[{"title":"什么是线程安全问题","id":"20220421194024-s2yzr20","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#什么是线程安全问题","parentId":"20220421194024-p4q4kvp","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":4},{"title":"为何会出现线程安全问题","id":"20220421194024-qq259d6","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#为何会出现线程安全问题","parentId":"20220421194024-p4q4kvp","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[{"title":"可见性: CPU缓存引起","id":"20220421194024-1hqax8a","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#可见性: CPU缓存引起","parentId":"20220421194024-qq259d6","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":5},{"title":"原子性: 分时复用引起","id":"20220421194024-vr80zol","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#原子性: 分时复用引起","parentId":"20220421194024-qq259d6","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":5},{"title":"有序性: 重排序引起","id":"20220421194024-uv6bi5r","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#有序性: 重排序引起","parentId":"20220421194024-qq259d6","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":5}],"level":4},{"title":"一共有哪三类线程安全问题","id":"20220421194024-qv6fwxn","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#一共有哪三类线程安全问题","parentId":"20220421194024-p4q4kvp","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[{"title":"运行结果错误","id":"20220421194024-zg45j9j","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#运行结果错误","parentId":"20220421194024-qv6fwxn","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":5},{"title":"发布和初始化导致线程安全问题","id":"20220421194024-82nb2py","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#发布和初始化导致线程安全问题","parentId":"20220421194024-qv6fwxn","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":5},{"title":"活跃性问题","id":"20220421194024-l06bdd0","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#活跃性问题","parentId":"20220421194024-qv6fwxn","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[{"title":"死锁","id":"20220421194024-xzamyko","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#死锁","parentId":"20220421194024-l06bdd0","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[{"title":"产生死锁的原因主要是：","id":"20220421194024-jg853ka","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#产生死锁的原因主要是：","parentId":"20220421194024-xzamyko","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":7},{"title":"产生死锁的四个必要条件：","id":"20220421194024-tka1tzp","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#产生死锁的四个必要条件：","parentId":"20220421194024-xzamyko","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":7},{"title":"死锁的解除与预防：","id":"20220421194024-g4hr3e1","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#死锁的解除与预防：","parentId":"20220421194024-xzamyko","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":7}],"level":6},{"title":"活锁","id":"20220421194024-e63z48p","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#活锁","parentId":"20220421194024-l06bdd0","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":6},{"title":"饥饿","id":"20220421194024-48utpac","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/线程安全#饥饿","parentId":"20220421194024-l06bdd0","path":"/topic/Java并发工具包/并发基础/线程安全/线程安全","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":6}],"level":5}],"level":4}],"level":3},{"title":"需要注意线程安全问题的情况","id":"20220421194024-rijyr8z","type":"d","href":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况","parentId":"","path":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况","parentPath":"/topic/Java并发工具包/并发基础/线程安全","sort":17,"children":[{"title":"访问共享变量或资源","id":"20220421194024-qsnh4er","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况#访问共享变量或资源","parentId":"20220421194024-rijyr8z","path":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":4},{"title":"依赖时序的操作","id":"20220421194024-r428t3a","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况#依赖时序的操作","parentId":"20220421194024-rijyr8z","path":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":4},{"title":"对方没有声明自己是线程安全的","id":"20220421194024-rkeg2mj","type":"h","href":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况#对方没有声明自己是线程安全的","parentId":"20220421194024-rijyr8z","path":"/topic/Java并发工具包/并发基础/线程安全/需要注意线程安全问题的情况","parentPath":"/topic/Java并发工具包/并发基础/线程安全","children":[],"level":4}],"level":3}],"level":2}],"level":1},{"title":"并发工具","id":"20220421224648-bow8i92","type":"d","href":"/topic/Java并发工具包/并发工具","parentId":"","path":"/topic/Java并发工具包/并发工具","parentPath":"/topic/Java并发工具包","sort":2,"children":[{"title":"线程协作","id":"20220421225409-vum430h","type":"d","href":"/topic/Java并发工具包/并发工具/线程协作","parentId":"","path":"/topic/Java并发工具包/并发工具/线程协作","parentPath":"/topic/Java并发工具包/并发工具","sort":1,"children":[{"title":"Semaphore信号量","id":"20220421194023-zk5fktn","type":"d","href":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量","parentId":"","path":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量","parentPath":"/topic/Java并发工具包/并发工具/线程协作","sort":2,"children":[{"title":"介绍","id":"20220421194023-6x46it5","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量#介绍","parentId":"20220421194023-zk5fktn","path":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4},{"title":"限流实现","id":"20220421194023-zkr7ktt","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量#限流实现","parentId":"20220421194023-zk5fktn","path":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4},{"title":"思考: FixedThreadPool可以替代Semaphore么?","id":"20220421194023-cffzkvl","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量#思考: FixedThreadPool可以替代Semaphore么?","parentId":"20220421194023-zk5fktn","path":"/topic/Java并发工具包/并发工具/线程协作/Semaphore信号量","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4}],"level":3},{"title":"CountDownLatch详解","id":"20220421194023-m0tc081","type":"d","href":"/topic/Java并发工具包/并发工具/线程协作/CountDownLatch详解","parentId":"","path":"/topic/Java并发工具包/并发工具/线程协作/CountDownLatch详解","parentPath":"/topic/Java并发工具包/并发工具/线程协作","sort":16,"children":[{"title":"介绍","id":"20220421194023-kbbcxbl","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/CountDownLatch详解#介绍","parentId":"20220421194023-m0tc081","path":"/topic/Java并发工具包/并发工具/线程协作/CountDownLatch详解","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4}],"level":3},{"title":"使用CompletableFuture解决旅游平台问题","id":"20220421194023-7xbmrhw","type":"d","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentId":"","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","sort":27,"children":[{"title":"旅游平台问题介绍","id":"20220421194023-7f92nei","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题#旅游平台问题介绍","parentId":"20220421194023-7xbmrhw","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[{"title":"串行获取","id":"20220421194023-xtl2a45","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题#串行获取","parentId":"20220421194023-7f92nei","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":5},{"title":"并行获取","id":"20220421194023-kuctn4p","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题#并行获取","parentId":"20220421194023-7f92nei","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":5}],"level":4},{"title":"使用线程池实现","id":"20220421194023-ipafk28","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题#使用线程池实现","parentId":"20220421194023-7xbmrhw","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4},{"title":"CountDownLatch","id":"20220421194023-yhiuvd1","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题#CountDownLatch","parentId":"20220421194023-7xbmrhw","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4},{"title":"CompletableFuture","id":"20220421194023-uyxclzb","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题#CompletableFuture","parentId":"20220421194023-7xbmrhw","path":"/topic/Java并发工具包/并发工具/线程协作/使用CompletableFuture解决旅游平台问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4}],"level":3},{"title":"使用CyclicBarrier解决团建问题","id":"20220421194023-2t11ew0","type":"d","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentId":"","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","sort":30,"children":[{"title":"团建问题介绍","id":"20220421194023-eubfypd","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#团建问题介绍","parentId":"20220421194023-2t11ew0","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4},{"title":"模拟场景","id":"20220421194023-ths6hk3","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#模拟场景","parentId":"20220421194023-2t11ew0","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":4},{"title":"CyclicBarrier 和 CountDownLatch 的异同","id":"20220421194023-w7mli0h","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#CyclicBarrier 和 CountDownLatch 的异同","parentId":"20220421194023-2t11ew0","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[{"title":"相同点","id":"20220421194023-ha0hs5i","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#相同点","parentId":"20220421194023-w7mli0h","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":5},{"title":"不同点","id":"20220421194023-5khi9b8","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#不同点","parentId":"20220421194023-w7mli0h","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[{"title":"作用对象不同","id":"20220421194023-6ka48ra","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#作用对象不同","parentId":"20220421194023-5khi9b8","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":6},{"title":"可重用性不同","id":"20220421194023-hpyerj6","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#可重用性不同","parentId":"20220421194023-5khi9b8","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":6},{"title":"执行动作不同","id":"20220421194023-xpadrxw","type":"h","href":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题#执行动作不同","parentId":"20220421194023-5khi9b8","path":"/topic/Java并发工具包/并发工具/线程协作/使用CyclicBarrier解决团建问题","parentPath":"/topic/Java并发工具包/并发工具/线程协作","children":[],"level":6}],"level":5}],"level":4}],"level":3}],"level":2},{"title":"Future","id":"20220421225357-mgk8fm8","type":"d","href":"/topic/Java并发工具包/并发工具/Future","parentId":"","path":"/topic/Java并发工具包/并发工具/Future","parentPath":"/topic/Java并发工具包/并发工具","sort":2,"children":[{"title":"Future主要功能","id":"20220421194023-tc7cnvu","type":"d","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentId":"","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","sort":2,"children":[{"title":"Future接口","id":"20220421194023-vy1iaus","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#Future接口","parentId":"20220421194023-tc7cnvu","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[{"title":"cancel方法: 取消任务执行","id":"20220421194023-2p9j49p","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#cancel方法: 取消任务执行","parentId":"20220421194023-vy1iaus","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":5},{"title":"isCancelled() 方法:判断是否被取消","id":"20220421194023-abekw76","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#isCancelled() 方法:判断是否被取消","parentId":"20220421194023-vy1iaus","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":5},{"title":"isDown():判断是否执行完毕","id":"20220421194023-n3gtv77","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#isDown():判断是否执行完毕","parentId":"20220421194023-vy1iaus","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":5},{"title":"get(): 获取结果","id":"20220421194023-4rsknhp","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#get(): 获取结果","parentId":"20220421194023-vy1iaus","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":5}],"level":4},{"title":"基础实现","id":"20220421194023-vd9seqp","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#基础实现","parentId":"20220421194023-tc7cnvu","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[{"title":"FutureTask示例","id":"20220421194023-gptncr7","type":"h","href":"/topic/Java并发工具包/并发工具/Future/Future主要功能#FutureTask示例","parentId":"20220421194023-vd9seqp","path":"/topic/Java并发工具包/并发工具/Future/Future主要功能","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":5}],"level":4}],"level":3},{"title":"FutureTask源码分析","id":"20220421194023-lcf6hel","type":"d","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentId":"","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","sort":3,"children":[{"title":"核心属性","id":"20220421194023-b1jl1as","type":"h","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析#核心属性","parentId":"20220421194023-lcf6hel","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":4},{"title":"构造函数","id":"20220421194023-6ga3tdq","type":"h","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析#构造函数","parentId":"20220421194023-lcf6hel","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":4},{"title":"核心方法：Run()","id":"20220421194023-wmuyfw2","type":"h","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析#核心方法：Run()","parentId":"20220421194023-lcf6hel","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":4},{"title":"核心方法:get()","id":"20220421194023-hqg3oz2","type":"h","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析#核心方法:get()","parentId":"20220421194023-lcf6hel","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":4},{"title":"核心方法:awaitDone(boolean timed,long nanos)","id":"20220421194023-5kudbjb","type":"h","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析#核心方法:awaitDone(boolean timed,long nanos)","parentId":"20220421194023-lcf6hel","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":4},{"title":"核心方法:Cancel()","id":"20220421194023-z9yspi4","type":"h","href":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析#核心方法:Cancel()","parentId":"20220421194023-lcf6hel","path":"/topic/Java并发工具包/并发工具/Future/FutureTask源码分析","parentPath":"/topic/Java并发工具包/并发工具/Future","children":[],"level":4}],"level":3}],"level":2},{"title":"ThreadLocal","id":"20220421225340-rez89hu","type":"d","href":"/topic/Java并发工具包/并发工具/ThreadLocal","parentId":"","path":"/topic/Java并发工具包/并发工具/ThreadLocal","parentPath":"/topic/Java并发工具包/并发工具","sort":3,"children":[{"title":"ThreadLocal内存泄漏","id":"20220421194023-skqpi80","type":"d","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal内存泄漏","parentId":"","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal内存泄漏","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","sort":18,"children":[{"title":"ThreadLocal的实现原理","id":"20220421194023-8fje0qn","type":"h","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal内存泄漏#ThreadLocal的实现原理","parentId":"20220421194023-skqpi80","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal内存泄漏","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","children":[],"level":4},{"title":"内存泄漏的案例","id":"20220421194023-kzn89ie","type":"h","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal内存泄漏#内存泄漏的案例","parentId":"20220421194023-skqpi80","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal内存泄漏","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","children":[],"level":4}],"level":3},{"title":"ThreadLocal使用场景","id":"20220421194023-5y0rwt1","type":"d","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景","parentId":"","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","sort":28,"children":[{"title":"保存线程不安全的工具类","id":"20220421194023-ip2bddc","type":"h","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景#保存线程不安全的工具类","parentId":"20220421194023-5y0rwt1","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","children":[],"level":4},{"title":"传递全局变量","id":"20220421194023-4h7hbuz","type":"h","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景#传递全局变量","parentId":"20220421194023-5y0rwt1","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","children":[],"level":4},{"title":"面试题: ThreadLocal是用来解决共享资源的多线程访问吗?","id":"20220421194023-jbeie1n","type":"h","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景#面试题: ThreadLocal是用来解决共享资源的多线程访问吗?","parentId":"20220421194023-5y0rwt1","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","children":[{"title":"ThreadLocal 和 synchronized 是什么关系","id":"20220421194023-9j0pf34","type":"h","href":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景#ThreadLocal 和 synchronized 是什么关系","parentId":"20220421194023-jbeie1n","path":"/topic/Java并发工具包/并发工具/ThreadLocal/ThreadLocal使用场景","parentPath":"/topic/Java并发工具包/并发工具/ThreadLocal","children":[],"level":5}],"level":4}],"level":3}],"level":2},{"title":"原子类","id":"20220421225252-idqz1wx","type":"d","href":"/topic/Java并发工具包/并发工具/原子类","parentId":"","path":"/topic/Java并发工具包/并发工具/原子类","parentPath":"/topic/Java并发工具包/并发工具","sort":4,"children":[{"title":"原子类的作用概览","id":"20220421194024-q0d2887","type":"d","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentId":"","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","sort":1,"children":[{"title":"什么是原子类，有什么作用","id":"20220421194024-i2dwj9d","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#什么是原子类，有什么作用","parentId":"20220421194024-q0d2887","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":4},{"title":"原子类概览","id":"20220421194024-pbmtb0x","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#原子类概览","parentId":"20220421194024-q0d2887","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[{"title":"原子更新基本类型","id":"20220421194024-bkoixwz","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#原子更新基本类型","parentId":"20220421194024-pbmtb0x","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":5},{"title":"原子更新数组","id":"20220421194024-3llb9j7","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#原子更新数组","parentId":"20220421194024-pbmtb0x","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":5},{"title":"原子更新引用类型","id":"20220421194024-3iezmq2","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#原子更新引用类型","parentId":"20220421194024-pbmtb0x","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":5},{"title":"原子更新字段","id":"20220421194024-1vf6ovf","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#原子更新字段","parentId":"20220421194024-pbmtb0x","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":5},{"title":"Adder 加法器和Accumulator积累器","id":"20220421194024-uit0km0","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#Adder 加法器和Accumulator积累器","parentId":"20220421194024-pbmtb0x","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[{"title":"Adder介绍","id":"20220421194024-h82jb7t","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#Adder介绍","parentId":"20220421194024-uit0km0","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":6},{"title":"Accumulator介绍","id":"20220421194024-8fqd15u","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#Accumulator介绍","parentId":"20220421194024-uit0km0","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":6},{"title":"拓展功能","id":"20220421194024-dym8r6k","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#拓展功能","parentId":"20220421194024-uit0km0","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":6},{"title":"适用场景","id":"20220421194024-y140gog","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览#适用场景","parentId":"20220421194024-uit0km0","path":"/topic/Java并发工具包/并发工具/原子类/原子类的作用概览","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":6}],"level":5}],"level":4}],"level":3},{"title":"原子类的性能分析","id":"20220421194024-x4a73dp","type":"d","href":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentId":"","path":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentPath":"/topic/Java并发工具包/并发工具/原子类","sort":5,"children":[{"title":"AtomicLong的问题","id":"20220421194024-23koi5c","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析#AtomicLong的问题","parentId":"20220421194024-x4a73dp","path":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":4},{"title":"升级版LongAdder","id":"20220421194024-up05t2j","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析#升级版LongAdder","parentId":"20220421194024-x4a73dp","path":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":4},{"title":"如何选择","id":"20220421194024-zsum368","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析#如何选择","parentId":"20220421194024-x4a73dp","path":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[{"title":"AtomicLong 可否被 LongAdder 替代？","id":"20220421194024-1dx3jlm","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析#AtomicLong 可否被 LongAdder 替代？","parentId":"20220421194024-zsum368","path":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":5}],"level":4},{"title":"结论","id":"20220421194024-ifiji7o","type":"h","href":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析#结论","parentId":"20220421194024-x4a73dp","path":"/topic/Java并发工具包/并发工具/原子类/原子类的性能分析","parentPath":"/topic/Java并发工具包/并发工具/原子类","children":[],"level":4}],"level":3}],"level":2},{"title":"阻塞队列","id":"20220421225150-nu224ql","type":"d","href":"/topic/Java并发工具包/并发工具/阻塞队列","parentId":"","path":"/topic/Java并发工具包/并发工具/阻塞队列","parentPath":"/topic/Java并发工具包/并发工具","sort":5,"children":[{"title":"常见的阻塞队列","id":"20220421194024-9ltr7q3","type":"d","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentId":"","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","sort":1,"children":[{"title":"ArrayBlockingQueue","id":"20220421194024-5nxnstz","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#ArrayBlockingQueue","parentId":"20220421194024-9ltr7q3","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"LinkedBlockingQueue","id":"20220421194024-2anxh67","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#LinkedBlockingQueue","parentId":"20220421194024-9ltr7q3","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"SynchronousQueue","id":"20220421194024-5dmd94t","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#SynchronousQueue","parentId":"20220421194024-9ltr7q3","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"PriorityBlockingQueue","id":"20220421194024-0qkwqym","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#PriorityBlockingQueue","parentId":"20220421194024-9ltr7q3","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"DelayQueue","id":"20220421194024-gwhbp1l","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#DelayQueue","parentId":"20220421194024-9ltr7q3","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"如何选择","id":"20220421194024-bbafwco","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#如何选择","parentId":"20220421194024-9ltr7q3","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[{"title":"线程池对于阻塞队列的选择","id":"20220421194024-wfrhink","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#线程池对于阻塞队列的选择","parentId":"20220421194024-bbafwco","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"归纳","id":"20220421194024-oncdnpz","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列#归纳","parentId":"20220421194024-bbafwco","path":"/topic/Java并发工具包/并发工具/阻塞队列/常见的阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5}],"level":4}],"level":3},{"title":"阻塞队列的常用方法","id":"20220421194024-f1qdcm3","type":"d","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentId":"","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","sort":2,"children":[{"title":"第一组：add、remove、element","id":"20220421194024-6fq31g5","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#第一组：add、remove、element","parentId":"20220421194024-f1qdcm3","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[{"title":"add 方法","id":"20220421194024-hw2svfq","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#add 方法","parentId":"20220421194024-6fq31g5","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"remove 方法","id":"20220421194024-1vkhstt","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#remove 方法","parentId":"20220421194024-6fq31g5","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"element 方法","id":"20220421194024-5kr6svs","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#element 方法","parentId":"20220421194024-6fq31g5","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5}],"level":4},{"title":"第二组：offer、poll、peek","id":"20220421194024-cel6bgj","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#第二组：offer、poll、peek","parentId":"20220421194024-f1qdcm3","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[{"title":"offer 方法","id":"20220421194024-5wzpseg","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#offer 方法","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"poll 方法","id":"20220421194024-818miy8","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#poll 方法","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"peek 方法","id":"20220421194024-ym52mns","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#peek 方法","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"带超时时间的 offer 和 poll","id":"20220421194024-zlxgydf","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#带超时时间的 offer 和 poll","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"第三组：put、take","id":"20220421194024-s1x6qky","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#第三组：put、take","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"put 方法","id":"20220421194024-udcplfa","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#put 方法","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5},{"title":"take 方法","id":"20220421194024-zinhklk","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#take 方法","parentId":"20220421194024-cel6bgj","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5}],"level":4},{"title":"总结","id":"20220421194024-egm4xgr","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法#总结","parentId":"20220421194024-f1qdcm3","path":"/topic/Java并发工具包/并发工具/阻塞队列/阻塞队列的常用方法","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4}],"level":3},{"title":"什么是阻塞队列","id":"20220421194023-4d0fgjl","type":"d","href":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列","parentId":"","path":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","sort":29,"children":[{"title":"阻塞队列的作用","id":"20220421194023-ct89u9n","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列#阻塞队列的作用","parentId":"20220421194023-4d0fgjl","path":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"主要并发队列关系图","id":"20220421194023-4gdg5oq","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列#主要并发队列关系图","parentId":"20220421194023-4d0fgjl","path":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":4},{"title":"阻塞队列的特点","id":"20220421194023-yvfdoea","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列#阻塞队列的特点","parentId":"20220421194023-4d0fgjl","path":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[{"title":"是否有界（容量有多大）","id":"20220421194023-thwd1kf","type":"h","href":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列#是否有界（容量有多大）","parentId":"20220421194023-yvfdoea","path":"/topic/Java并发工具包/并发工具/阻塞队列/什么是阻塞队列","parentPath":"/topic/Java并发工具包/并发工具/阻塞队列","children":[],"level":5}],"level":4}],"level":3}],"level":2},{"title":"并发容器","id":"20220421225042-g34phsd","type":"d","href":"/topic/Java并发工具包/并发工具/并发容器","parentId":"","path":"/topic/Java并发工具包/并发工具/并发容器","parentPath":"/topic/Java并发工具包/并发工具","sort":6,"children":[{"title":"HashMap","id":"20220421194023-chqzo14","type":"d","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentId":"","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","sort":1,"children":[{"title":"HashMap实现原理","id":"20220421194023-kqco0df","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#HashMap实现原理","parentId":"20220421194023-chqzo14","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":4},{"title":"功能实现","id":"20220421194023-c7q57es","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#功能实现","parentId":"20220421194023-chqzo14","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"1. 确定哈希桶数组索引位置","id":"20220421194023-pna9o0r","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#1. 确定哈希桶数组索引位置","parentId":"20220421194023-c7q57es","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"2. 分析HashMap的put方法","id":"20220421194023-r988dwu","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#2. 分析HashMap的put方法","parentId":"20220421194023-pna9o0r","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":6}],"level":5},{"title":"3. 扩容机制","id":"20220421194023-x0skg7v","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#3. 扩容机制","parentId":"20220421194023-c7q57es","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"为什么hashmap的在链表元素数量超过8时改为红黑树?","id":"20220421194023-6azroph","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#为什么hashmap的在链表元素数量超过8时改为红黑树?","parentId":"20220421194023-c7q57es","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4},{"title":"线程安全性","id":"20220421194023-hc9vfve","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/HashMap#线程安全性","parentId":"20220421194023-chqzo14","path":"/topic/Java并发工具包/并发工具/并发容器/HashMap","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":4}],"level":3},{"title":"CopyOnWriteArrayList","id":"20220421194022-gkzupas","type":"d","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentId":"","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","sort":34,"children":[{"title":"特点","id":"20220421194022-xhc42v3","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#特点","parentId":"20220421194022-gkzupas","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":4},{"title":"复制修改","id":"20220421194022-f6dagmk","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#复制修改","parentId":"20220421194022-gkzupas","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"迭代期间允许修改集合内容","id":"20220421194022-8p51kd9","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#迭代期间允许修改集合内容","parentId":"20220421194022-f6dagmk","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4},{"title":"缺点","id":"20220421194022-wei24tc","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#缺点","parentId":"20220421194022-gkzupas","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"内存占用大","id":"20220421194022-vt8lr1s","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#内存占用大","parentId":"20220421194022-wei24tc","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"元素较多或者复杂的情况下，复制的开销大","id":"20220421194022-1i2c7pa","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#元素较多或者复杂的情况下，复制的开销大","parentId":"20220421194022-wei24tc","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"数据一致性无法保证","id":"20220421194022-ap6n3fh","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#数据一致性无法保证","parentId":"20220421194022-wei24tc","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"只适合读多写少的场景","id":"20220421194022-sc0eogs","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#只适合读多写少的场景","parentId":"20220421194022-wei24tc","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4},{"title":"源码分析","id":"20220421194022-rp1fvlk","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#源码分析","parentId":"20220421194022-gkzupas","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"数据结构","id":"20220421194022-ols3w10","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#数据结构","parentId":"20220421194022-rp1fvlk","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"add方法","id":"20220421194022-jfyru3k","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#add方法","parentId":"20220421194022-rp1fvlk","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"get操作","id":"20220421194022-0i2nkyh","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#get操作","parentId":"20220421194022-rp1fvlk","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"迭代器COWIterator类","id":"20220421194022-8cd7t0h","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList#迭代器COWIterator类","parentId":"20220421194022-rp1fvlk","path":"/topic/Java并发工具包/并发工具/并发容器/CopyOnWriteArrayList","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4}],"level":3},{"title":"ConcurrentHashMap详解","id":"20220421194022-5ml6ohm","type":"d","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentId":"","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","sort":35,"children":[{"title":"ConcurrentHashMap_JDK7","id":"20220421194022-6zgzl9m","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#ConcurrentHashMap_JDK7","parentId":"20220421194022-5ml6ohm","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"数据结构","id":"20220421194022-sk8dfnt","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#数据结构","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"初始化","id":"20220421194022-g7elxkv","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#初始化","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"初始化","id":"20220421194022-yxirnxp","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#初始化","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"put过程分析","id":"20220421194022-9gz36tc","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#put过程分析","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"初始化槽: ensureSegment","id":"20220421194022-rneyw0q","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#初始化槽: ensureSegment","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"获取写入锁-scanandlockforput","id":"20220421194022-s2nr2es","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#获取写入锁-scanandlockforput","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"扩容-rehash","id":"20220421194022-yqejgid","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#扩容-rehash","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"get 过程分析","id":"20220421194022-b31z8ro","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#get 过程分析","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"并发问题分析","id":"20220421194022-3aiwwre","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#并发问题分析","parentId":"20220421194022-6zgzl9m","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4},{"title":"ConcurrentHashMap_JDK8","id":"20220421194022-9m25zzz","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#ConcurrentHashMap_JDK8","parentId":"20220421194022-5ml6ohm","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"put 方法源码分析","id":"20220421194022-n3u48ll","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#put 方法源码分析","parentId":"20220421194022-9m25zzz","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"get 方法源码分析","id":"20220421194022-snon8lc","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#get 方法源码分析","parentId":"20220421194022-9m25zzz","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4},{"title":"对比Java7 和Java8 的异同和优缺点","id":"20220421194022-5t06zk3","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#对比Java7 和Java8 的异同和优缺点","parentId":"20220421194022-5ml6ohm","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[{"title":"并发度","id":"20220421194022-56z19kf","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#并发度","parentId":"20220421194022-5t06zk3","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"保证并发安全的原理","id":"20220421194022-unwfvqu","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#保证并发安全的原理","parentId":"20220421194022-5t06zk3","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"遇到 Hash 碰撞","id":"20220421194022-k1yvu6g","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#遇到 Hash 碰撞","parentId":"20220421194022-5t06zk3","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5},{"title":"查询时间复杂度","id":"20220421194022-k703vus","type":"h","href":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解#查询时间复杂度","parentId":"20220421194022-5t06zk3","path":"/topic/Java并发工具包/并发工具/并发容器/ConcurrentHashMap详解","parentPath":"/topic/Java并发工具包/并发工具/并发容器","children":[],"level":5}],"level":4}],"level":3}],"level":2},{"title":"线程池","id":"20220421224850-czk1iq2","type":"d","href":"/topic/Java并发工具包/并发工具/线程池","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池","parentPath":"/topic/Java并发工具包/并发工具","sort":7,"children":[{"title":"为什么多线程会带来性能问题","id":"20220421194023-n21nz3d","type":"d","href":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题","parentPath":"/topic/Java并发工具包/并发工具/线程池","sort":1,"children":[{"title":"线程调度开销","id":"20220421194023-zlthf6f","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题#线程调度开销","parentId":"20220421194023-n21nz3d","path":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[{"title":"上下文切换","id":"20220421194023-ampsejl","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题#上下文切换","parentId":"20220421194023-zlthf6f","path":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"缓存失效","id":"20220421194023-gxegw5b","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题#缓存失效","parentId":"20220421194023-zlthf6f","path":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5}],"level":4},{"title":"协作开销","id":"20220421194023-kqso0jm","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题#协作开销","parentId":"20220421194023-n21nz3d","path":"/topic/Java并发工具包/并发工具/线程池/为什么多线程会带来性能问题","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4}],"level":3},{"title":"线程池的优势","id":"20220421194024-vgrsujq","type":"d","href":"/topic/Java并发工具包/并发工具/线程池/线程池的优势","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池/线程池的优势","parentPath":"/topic/Java并发工具包/并发工具/线程池","sort":2,"children":[{"title":"如何提升运行效率","id":"20220421194024-6y78ao9","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/线程池的优势#如何提升运行效率","parentId":"20220421194024-vgrsujq","path":"/topic/Java并发工具包/并发工具/线程池/线程池的优势","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"使用线程池的好处","id":"20220421194024-x77rkxj","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/线程池的优势#使用线程池的好处","parentId":"20220421194024-vgrsujq","path":"/topic/Java并发工具包/并发工具/线程池/线程池的优势","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"线程池的思想","id":"20220421194024-yyqzh03","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/线程池的优势#线程池的思想","parentId":"20220421194024-vgrsujq","path":"/topic/Java并发工具包/并发工具/线程池/线程池的优势","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4}],"level":3},{"title":"创建线程池的参数","id":"20220421194024-djxcl5s","type":"d","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","sort":3,"children":[{"title":"参数列表","id":"20220421194024-b671uhp","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#参数列表","parentId":"20220421194024-djxcl5s","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"创建时机","id":"20220421194024-7lyw2w7","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#创建时机","parentId":"20220421194024-djxcl5s","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"线程工厂ThreadFactory","id":"20220421194024-nogaxlu","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#线程工厂ThreadFactory","parentId":"20220421194024-djxcl5s","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"工作队列WorkQueue","id":"20220421194024-4kcqxyc","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#工作队列WorkQueue","parentId":"20220421194024-djxcl5s","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"拒绝策略Handler","id":"20220421194024-zl2siby","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#拒绝策略Handler","parentId":"20220421194024-djxcl5s","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[{"title":"DiscardPolicy","id":"20220421194024-vtchp4t","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#DiscardPolicy","parentId":"20220421194024-zl2siby","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"DiscardOldestPolicy","id":"20220421194024-d1a21wu","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#DiscardOldestPolicy","parentId":"20220421194024-zl2siby","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"CallerRunsPolicy","id":"20220421194024-sm0r1i3","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#CallerRunsPolicy","parentId":"20220421194024-zl2siby","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"AbortPolicy","id":"20220421194024-9wiz58a","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数#AbortPolicy","parentId":"20220421194024-zl2siby","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5}],"level":4},{"title":"如何设置线程数","id":"20220429164341-mzc6839","type":"d","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数","parentPath":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","children":[{"title":"现有的解决方案","id":"20220429164831-97mzysk","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数#现有的解决方案","parentId":"20220429164341-mzc6839","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数","parentPath":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","children":[],"level":5},{"title":"动态更新的原理","id":"20220429165540-guqhe26","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数#动态更新的原理","parentId":"20220429164341-mzc6839","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数","parentPath":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","children":[],"level":5},{"title":"面试考点","id":"20220429171440-0qcp4m7","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数#面试考点","parentId":"20220429164341-mzc6839","path":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数/如何设置线程数","parentPath":"/topic/Java并发工具包/并发工具/线程池/创建线程池的参数","children":[],"level":5}],"level":4}],"level":3},{"title":"线程池线程复用原理","id":"20220421194024-csc9ehx","type":"d","href":"/topic/Java并发工具包/并发工具/线程池/线程池线程复用原理","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池/线程池线程复用原理","parentPath":"/topic/Java并发工具包/并发工具/线程池","sort":4,"children":[{"title":"实现方式","id":"20220421194024-vpwln3p","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/线程池线程复用原理#实现方式","parentId":"20220421194024-csc9ehx","path":"/topic/Java并发工具包/并发工具/线程池/线程池线程复用原理","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"总结","id":"20220421194024-717ovf1","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/线程池线程复用原理#总结","parentId":"20220421194024-csc9ehx","path":"/topic/Java并发工具包/并发工具/线程池/线程池线程复用原理","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4}],"level":3},{"title":"ForkJoin框架","id":"20220421194023-elf7igk","type":"d","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentId":"","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","sort":5,"children":[{"title":"案例?","id":"20220421194023-tzg5g35","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#案例?","parentId":"20220421194023-elf7igk","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":4},{"title":"原理","id":"20220421194023-syy1lho","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#原理","parentId":"20220421194023-elf7igk","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[{"title":"work-stealing 工作窃取","id":"20220421194023-av4fqp8","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#work-stealing 工作窃取","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"执行流程","id":"20220421194023-2lsmwfw","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#执行流程","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"步骤分解","id":"20220421194023-ziwpdpr","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#步骤分解","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"外部任务提交","id":"20220421194023-bcns9vl","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#外部任务提交","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"子任务提交","id":"20220421194023-dnjdw7f","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#子任务提交","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"执行任务","id":"20220421194023-xf41cyy","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#执行任务","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5},{"title":"获取任务执行结果","id":"20220421194023-adsuwll","type":"h","href":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架#获取任务执行结果","parentId":"20220421194023-syy1lho","path":"/topic/Java并发工具包/并发工具/线程池/ForkJoin框架","parentPath":"/topic/Java并发工具包/并发工具/线程池","children":[],"level":5}],"level":4}],"level":3}],"level":2},{"title":"各种锁","id":"20220421224921-0q4b1mn","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁","parentPath":"/topic/Java并发工具包/并发工具","sort":9,"children":[{"title":"锁的种类和特点","id":"20220421194024-5l8t6o8","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","sort":2,"children":[{"title":"偏向锁/轻量级锁/重量级锁","id":"20220421194024-h5c55jn","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#偏向锁/轻量级锁/重量级锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"可重入锁/不可重入锁","id":"20220421194024-psvbp68","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#可重入锁/不可重入锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"共享锁/独占锁","id":"20220421194024-huov0bn","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#共享锁/独占锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"公平锁/非公平锁","id":"20220421194024-moj8qbg","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#公平锁/非公平锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"乐观锁/悲观锁","id":"20220421194024-kd10zrr","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#乐观锁/悲观锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"自旋锁/非自旋锁","id":"20220421194024-mxhbm3r","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#自旋锁/非自旋锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"不可中断锁/可中断锁","id":"20220421194024-n17hmsj","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点#不可中断锁/可中断锁","parentId":"20220421194024-5l8t6o8","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"公平锁非公平锁","id":"20220421194024-ysp8l1x","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","sort":1,"children":[{"title":"特点","id":"20220421194024-611w97c","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁#特点","parentId":"20220421194024-ysp8l1x","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"案例","id":"20220421194024-nzgiykj","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁#案例","parentId":"20220421194024-ysp8l1x","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"源码","id":"20220421194024-1bh92oa","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁#源码","parentId":"20220421194024-ysp8l1x","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/公平锁非公平锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5}],"level":4},{"title":"自旋锁非自旋锁","id":"20220421194024-yg8yxap","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","sort":4,"children":[{"title":"对比自旋和非自旋获取锁的流程","id":"20220421194024-xy6eth3","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁#对比自旋和非自旋获取锁的流程","parentId":"20220421194024-yg8yxap","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"自旋锁的好处","id":"20220421194024-p0fl9am","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁#自旋锁的好处","parentId":"20220421194024-yg8yxap","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"自旋锁的缺点","id":"20220421194024-x747q9w","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁#自旋锁的缺点","parentId":"20220421194024-yg8yxap","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"适用场景","id":"20220421194024-ntoqquk","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁#适用场景","parentId":"20220421194024-yg8yxap","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/自旋锁非自旋锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5}],"level":4},{"title":"共享锁独占锁","id":"20220421194024-pfoblt6","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","sort":7,"children":[{"title":"读写锁的规则","id":"20220421194024-inct3ng","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#读写锁的规则","parentId":"20220421194024-pfoblt6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"使用方式","id":"20220421194024-viyhwby","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#使用方式","parentId":"20220421194024-pfoblt6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"加锁原理分析","id":"20220421194024-5584v3u","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#加锁原理分析","parentId":"20220421194024-pfoblt6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"插队逻辑","id":"20220421194024-kzrefev","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#插队逻辑","parentId":"20220421194024-pfoblt6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[{"title":"第一种策略：允许插队","id":"20220421194024-xtt9bo3","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#第一种策略：允许插队","parentId":"20220421194024-kzrefev","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6},{"title":"第二种策略：不允许插队","id":"20220421194024-vab8sxx","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#第二种策略：不允许插队","parentId":"20220421194024-kzrefev","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6}],"level":5},{"title":"锁的升降级","id":"20220421194024-qy1rjr6","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#锁的升降级","parentId":"20220421194024-pfoblt6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[{"title":"降级的过程","id":"20220421194024-agdihem","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#降级的过程","parentId":"20220421194024-qy1rjr6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6},{"title":"为什么需要锁的降级","id":"20220421194024-x3i0wc5","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#为什么需要锁的降级","parentId":"20220421194024-qy1rjr6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6},{"title":"为什么不支持锁的升级？","id":"20220421194024-93vneo7","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#为什么不支持锁的升级？","parentId":"20220421194024-qy1rjr6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6},{"title":"总结","id":"20220421194024-3qkx6j2","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁#总结","parentId":"20220421194024-qy1rjr6","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6}],"level":5}],"level":4},{"title":"乐观锁和悲观锁","id":"20220421194023-puex63d","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","sort":17,"children":[{"title":"悲观锁","id":"20220421194023-7zp2dq3","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁#悲观锁","parentId":"20220421194023-puex63d","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"乐观锁","id":"20220421194023-5cy6qa6","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁#乐观锁","parentId":"20220421194023-puex63d","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5},{"title":"典型案例","id":"20220421194023-i4p0a7q","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁#典型案例","parentId":"20220421194023-puex63d","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[{"title":"“汝之蜜糖,彼之砒霜”","id":"20220421194023-f8m3kwp","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁#“汝之蜜糖,彼之砒霜”","parentId":"20220421194023-i4p0a7q","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":6}],"level":5},{"title":"两种锁各自的使用场景","id":"20220421194023-j635qa4","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁#两种锁各自的使用场景","parentId":"20220421194023-puex63d","path":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/乐观锁和悲观锁","parentPath":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点","children":[],"level":5}],"level":4}],"level":3},{"title":"JVM锁优化","id":"20220421194023-mm3wc10","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentPath":"/topic/Java并发工具包/并发工具/各种锁","sort":3,"children":[{"title":"锁消除","id":"20220421194023-2f7z9mm","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化#锁消除","parentId":"20220421194023-mm3wc10","path":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"锁粗化","id":"20220421194023-fi45rtd","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化#锁粗化","parentId":"20220421194023-mm3wc10","path":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"自适应锁自旋","id":"20220421194023-nvjn9oa","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化#自适应锁自旋","parentId":"20220421194023-mm3wc10","path":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"偏向锁/轻量级锁/重量级锁","id":"20220421194023-vvlkzjy","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化#偏向锁/轻量级锁/重量级锁","parentId":"20220421194023-mm3wc10","path":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"synchronized加锁流程","id":"20220421194023-1sgv6fy","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化#synchronized加锁流程","parentId":"20220421194023-mm3wc10","path":"/topic/Java并发工具包/并发工具/各种锁/JVM锁优化","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4}],"level":3},{"title":"synchronized和Lock的对比","id":"20220421194023-wyopjqc","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","sort":4,"children":[{"title":"相同点","id":"20220421194023-e50jqat","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#相同点","parentId":"20220421194023-wyopjqc","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[{"title":"用来保护资源安全","id":"20220421194023-vhkm2qj","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#用来保护资源安全","parentId":"20220421194023-e50jqat","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"都可以保证可见性","id":"20220421194023-kpu3pnr","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#都可以保证可见性","parentId":"20220421194023-e50jqat","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"都可重入","id":"20220421194023-fj4p7u3","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#都可重入","parentId":"20220421194023-e50jqat","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5}],"level":4},{"title":"不同点","id":"20220421194023-9ocihrd","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#不同点","parentId":"20220421194023-wyopjqc","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[{"title":"用法不同","id":"20220421194023-dl0g00i","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#用法不同","parentId":"20220421194023-9ocihrd","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"加解锁顺序不同","id":"20220421194023-z0uqrwg","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#加解锁顺序不同","parentId":"20220421194023-9ocihrd","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"synchronized锁不够灵活","id":"20220421194023-pmdkjn0","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#synchronized锁不够灵活","parentId":"20220421194023-9ocihrd","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"synchronized锁同时只能被一个线程拥有，Lock没有这个限制","id":"20220421194023-nrovusq","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#synchronized锁同时只能被一个线程拥有，Lock没有这个限制","parentId":"20220421194023-9ocihrd","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"是否可以设置公平锁","id":"20220421194023-jfaipd8","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#是否可以设置公平锁","parentId":"20220421194023-9ocihrd","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5},{"title":"性能区别","id":"20220421194023-sv8z5a5","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#性能区别","parentId":"20220421194023-9ocihrd","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":5}],"level":4},{"title":"如何选择","id":"20220421194023-migtiov","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比#如何选择","parentId":"20220421194023-wyopjqc","path":"/topic/Java并发工具包/并发工具/各种锁/synchronized和Lock的对比","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4}],"level":3},{"title":"lock的常用方法","id":"20220421194023-d5u43he","type":"d","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentId":"","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","sort":33,"children":[{"title":"lock()","id":"20220421194023-09n3cif","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法#lock()","parentId":"20220421194023-d5u43he","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"tryLock()","id":"20220421194023-fi99szk","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法#tryLock()","parentId":"20220421194023-d5u43he","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"tryLock(long time, TimeUnit unit)","id":"20220421194023-s7bytjl","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法#tryLock(long time, TimeUnit unit)","parentId":"20220421194023-d5u43he","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"lockInterruptibly()","id":"20220421194023-npz5jti","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法#lockInterruptibly()","parentId":"20220421194023-d5u43he","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"unlock()","id":"20220421194023-y6p4poo","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法#unlock()","parentId":"20220421194023-d5u43he","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4},{"title":"newCondition()","id":"20220421194023-sughpnb","type":"h","href":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法#newCondition()","parentId":"20220421194023-d5u43he","path":"/topic/Java并发工具包/并发工具/各种锁/lock的常用方法","parentPath":"/topic/Java并发工具包/并发工具/各种锁","children":[],"level":4}],"level":3}],"level":2}],"level":1},{"title":"底层原理","id":"20220421225546-i01zemh","type":"d","href":"/topic/Java并发工具包/底层原理","parentId":"","path":"/topic/Java并发工具包/底层原理","parentPath":"/topic/Java并发工具包","sort":3,"children":[{"title":"CAS原理","id":"20220421194022-1yd15d4","type":"d","href":"/topic/Java并发工具包/底层原理/CAS原理","parentId":"","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","sort":1,"children":[{"title":"CAS介绍","id":"20220421194022-jdia9lk","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#CAS介绍","parentId":"20220421194022-1yd15d4","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"CAS的思路","id":"20220421194022-fyvsc3v","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#CAS的思路","parentId":"20220421194022-1yd15d4","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"使用示例","id":"20220421194022-3x34oxp","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#使用示例","parentId":"20220421194022-1yd15d4","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"CAS的问题","id":"20220421194022-h6qtglq","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#CAS的问题","parentId":"20220421194022-1yd15d4","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[{"title":"ABA问题","id":"20220421194022-bag4cfb","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#ABA问题","parentId":"20220421194022-h6qtglq","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4},{"title":"循环时间长开销大","id":"20220421194022-pttbrtt","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#循环时间长开销大","parentId":"20220421194022-h6qtglq","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4},{"title":"只能保证一个共享变量的原子操作","id":"20220421194022-vta6rxb","type":"h","href":"/topic/Java并发工具包/底层原理/CAS原理#只能保证一个共享变量的原子操作","parentId":"20220421194022-h6qtglq","path":"/topic/Java并发工具包/底层原理/CAS原理","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4}],"level":3}],"level":2},{"title":"AQS框架","id":"20220421194022-1td53tx","type":"d","href":"/topic/Java并发工具包/底层原理/AQS框架","parentId":"","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","sort":2,"children":[{"title":"模拟场景","id":"20220421194022-n0uvyw8","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#模拟场景","parentId":"20220421194022-1td53tx","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"源码分析","id":"20220421194022-7eiw7qv","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#源码分析","parentId":"20220421194022-1td53tx","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"获取锁流程","id":"20220421194022-dtotqd0","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#获取锁流程","parentId":"20220421194022-1td53tx","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[{"title":"用户A加锁","id":"20220421194022-9rqlcvk","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#用户A加锁","parentId":"20220421194022-dtotqd0","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4},{"title":"用户B加锁","id":"20220421194022-9b47tov","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#用户B加锁","parentId":"20220421194022-dtotqd0","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4},{"title":"用户C加锁","id":"20220421194022-b6gyak4","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#用户C加锁","parentId":"20220421194022-dtotqd0","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4}],"level":3},{"title":"释放锁流程","id":"20220421194022-taw90hy","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#释放锁流程","parentId":"20220421194022-1td53tx","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"总结","id":"20220421194022-kghc8ld","type":"h","href":"/topic/Java并发工具包/底层原理/AQS框架#总结","parentId":"20220421194022-1td53tx","path":"/topic/Java并发工具包/底层原理/AQS框架","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3}],"level":2},{"title":"伪共享","id":"20220421194023-jhmtygl","type":"d","href":"/topic/Java并发工具包/底层原理/伪共享","parentId":"","path":"/topic/Java并发工具包/底层原理/伪共享","parentPath":"/topic/Java并发工具包/底层原理","sort":3,"children":[{"title":"什么是伪共享","id":"20220421194023-ctrke5m","type":"h","href":"/topic/Java并发工具包/底层原理/伪共享#什么是伪共享","parentId":"20220421194023-jhmtygl","path":"/topic/Java并发工具包/底层原理/伪共享","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":3},{"title":"JVM中的伪共享","id":"20220421194023-a71m3j6","type":"h","href":"/topic/Java并发工具包/底层原理/伪共享#JVM中的伪共享","parentId":"20220421194023-jhmtygl","path":"/topic/Java并发工具包/底层原理/伪共享","parentPath":"/topic/Java并发工具包/底层原理","children":[{"title":"如何避免","id":"20220421194023-r09nmr8","type":"h","href":"/topic/Java并发工具包/底层原理/伪共享#如何避免","parentId":"20220421194023-a71m3j6","path":"/topic/Java并发工具包/底层原理/伪共享","parentPath":"/topic/Java并发工具包/底层原理","children":[],"level":4}],"level":3}],"level":2},{"title":"java内存模型","id":"20220421225623-ocb0581","type":"d","href":"/topic/Java并发工具包/底层原理/java内存模型","parentId":"","path":"/topic/Java并发工具包/底层原理/java内存模型","parentPath":"/topic/Java并发工具包/底层原理","sort":4,"children":[{"title":"Java内存模型介绍","id":"20220421194023-dz3sn14","type":"d","href":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentId":"","path":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","sort":25,"children":[{"title":"容易混淆的JVM内存结构和Java内存模型","id":"20220421194023-ltidan3","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍#容易混淆的JVM内存结构和Java内存模型","parentId":"20220421194023-dz3sn14","path":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[{"title":"JVM内存结构","id":"20220421194023-hwhuzyc","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍#JVM内存结构","parentId":"20220421194023-ltidan3","path":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"JMM的引入","id":"20220421194023-giug96m","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍#JMM的引入","parentId":"20220421194023-ltidan3","path":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"JMM的含义","id":"20220421194023-k6l0xcb","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍#JMM的含义","parentId":"20220421194023-ltidan3","path":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5}],"level":4},{"title":"JMM与硬件结构的关系","id":"20220421194023-s3ta3ij","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍#JMM与硬件结构的关系","parentId":"20220421194023-dz3sn14","path":"/topic/Java并发工具包/底层原理/java内存模型/Java内存模型介绍","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":4}],"level":3},{"title":"happens-before规则","id":"20220421194023-mz0fp6m","type":"d","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentId":"","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","sort":32,"children":[{"title":"什么是happens_before关系","id":"20220421194023-uxmg6t6","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#什么是happens_before关系","parentId":"20220421194023-mz0fp6m","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":4},{"title":"不具备happens_before的例子","id":"20220421194023-23izup0","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#不具备happens_before的例子","parentId":"20220421194023-mz0fp6m","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":4},{"title":"happens_before的规则有哪些","id":"20220421194023-y3ut2fh","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#happens_before的规则有哪些","parentId":"20220421194023-mz0fp6m","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[{"title":"单线程规则","id":"20220421194023-x980qnq","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#单线程规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"锁操作规则","id":"20220421194023-vgbv8gy","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#锁操作规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"volatile变量规则","id":"20220421194023-ktma0mi","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#volatile变量规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"线程启动规则","id":"20220421194023-gpfpqa2","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#线程启动规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"线程join规则","id":"20220421194023-xuf9tiy","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#线程join规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"中断规则","id":"20220421194023-c2tof50","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#中断规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5},{"title":"并发工具类的规则","id":"20220421194023-n42jz2g","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#并发工具类的规则","parentId":"20220421194023-y3ut2fh","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":5}],"level":4},{"title":"总结","id":"20220421194023-86u79bh","type":"h","href":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则#总结","parentId":"20220421194023-mz0fp6m","path":"/topic/Java并发工具包/底层原理/java内存模型/happens-before规则","parentPath":"/topic/Java并发工具包/底层原理/java内存模型","children":[],"level":4}],"level":3}],"level":2}],"level":1}],"level":0},"headings":[{"depth":1,"value":"常见的阻塞队列","slug":"常见的阻塞队列"},{"depth":2,"value":"ArrayBlockingQueue","slug":"arrayblockingqueue"},{"depth":2,"value":"LinkedBlockingQueue","slug":"linkedblockingqueue"},{"depth":2,"value":"SynchronousQueue","slug":"synchronousqueue"},{"depth":2,"value":"PriorityBlockingQueue","slug":"priorityblockingqueue"},{"depth":2,"value":"DelayQueue","slug":"delayqueue"},{"depth":2,"value":"如何选择","slug":"如何选择"},{"depth":3,"value":"线程池对于阻塞队列的选择","slug":"线程池对于阻塞队列的选择"},{"depth":3,"value":"归纳","slug":"归纳"}]}},
    "staticQueryHashes": ["630634786","928362550"]}