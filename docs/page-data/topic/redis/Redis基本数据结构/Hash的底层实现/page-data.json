{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/redis/Redis基本数据结构/Hash的底层实现",
    "result": {"pageContext":{"id":"/topic/redis/Redis基本数据结构/Hash的底层实现","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Hash的底层实现"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hash的底层编码格式是HashTable和ZipList。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hash底层存储结构HashTable和ZipLit会互相转化。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"控制他们转化的参数:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"hash-max-ziplist-entries,默认512,使用压缩列表保存时哈希集合中的最大元素个数。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"hash-max-ziplist-value,默认64,使用压缩列表保存时哈希集合中单个元素的最大长度。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"redis> config get hash*\n        hash-max-ziplist-entries\n        512\n        hash-max-ziplist-value\n        64\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当哈希对象同时符合下面两个条件时，将使用 ziplist 编码："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"哈希对象保存的所有键值对中，键和值的字符串长度都小于 64 个字节；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"哈希对象保存的键值对数量小于 512 个。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ZipList可以转换到HashTable，一旦从ZipList转为了HashTable，Hash类型就会一直用HashTable进行保存而不会再转回ZipList了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-c"]},"children":[{"type":"text","value":"void hashTypeConvert(robj *o, int enc) {\n     // 原始编码是ZipList才进行转换\n    if (o->encoding == OBJ_ENCODING_ZIPLIST) {\n        hashTypeConvertZiplist(o, enc);\n    } else if (o->encoding == OBJ_ENCODING_HT) {\n        // 无法降级到ZipList\n        serverPanic(\"Not implemented\");\n    } else {\n        serverPanic(\"Unknown hash encoding\");\n    }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"ZipList编码的哈希对象"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"普通的双向链表会有两个指针，在存储数据很小的情况下， 我们存储的实际数据的大小可能还没有指针占用的内存大，得不偿失 。\nziplist是一个特殊的双向链表没有维护双向指针:prev next；而是存储上一个 entry的长度和 当前entry的长度，通过长度推算下一个元素在什么地方。\n牺牲读取的性能，获得高效的存储空间，因为(简短字符串的情况)存储指针比存储entry长度更费内存。这是典型的“时间换空间”。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"链表在内存中一般是不连续的，遍历相对比较慢，而ziplist可以很好的解决这个问题，普通数组的遍历是根据数组里存储的数据类型找到下一个元素的，但是ziplist的每个节点的长度是可以不一样的，而我们面对不同长度的节点又不可能直接sizeof(entry)，所以ziplist只好将一些必要的偏移量信息记录在了每一个节点里，使之能跳到上一个节点或下一个节点。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"头节点里有头节点里同时还有一个参数 len，和string类型提到的 SDS 类似，这里是用来记录链表长度的。因此 获取链表长度时不用再遍历整个链表,直接拿到len值就可以了，这个时间复杂度是 O(1)"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"ZipList的总体布局如下:"},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\n因为压缩列表的操作中涉及到的位运算很多，如果不统一的话会出现混乱。后续的所有位运算都是在小端存储的基础上进行的"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/redis_ziplist_%E7%BB%93%E6%9E%84.png","alt":"redis_ziplist_结构"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"typedef struct zlentry {\n    /**\n     * 前一个节点大小\n     */\n    unsigned int prevrawlensize;\n    /**\n     * 前一个节点长度\n     */\n    unsigned int prevrawlen;\n    /**\n     * 当前节点大小\n     */\n    unsigned int lensize;\n    /**\n     * 当前节点长度\n     */\n    unsigned int len;\n    /**\n     * 当前节点头部信息长度\n     */\n    unsigned int headersize;   \n    /**\n     * 当前节点数据编码  ZIP_STR_* or ZIP_INT_*\n     */\n    unsigned char encoding;  \n    /**\n     * 指向节点的指针 \n     */    \n    unsigned char *p;\n} zlentry;\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"hashtable对象"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"hashtable 被称为字典（dictionary），它是一个数组+链表的结构."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"哈希条目"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"typedef struct dictEntry {\n    void *key;\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n        double d;\n    } v;\n    struct dictEntry *next;\n} dictEntry;\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"字典对象"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-shell"]},"children":[{"type":"text","value":"typedef struct dict {\n    dictType *type;\n    void *privdata;\n    dictht ht[2];\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n    unsigned long iterators; /* number of iterators currently running */\n} dict;\n"}]}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"Hash的底层实现","slug":"hash的底层实现"},{"depth":1,"value":"ZipList编码的哈希对象","slug":"ziplist编码的哈希对象"},{"depth":1,"value":"hashtable对象","slug":"hashtable对象"}]}},
    "staticQueryHashes": ["928362550"]}