{
    "componentChunkName": "component---src-templates-article-page-template-tsx",
    "path": "/posts/七牛云自定义处理图片",
    "result": {"pageContext":{"id":"/posts/七牛云自定义处理图片","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"七牛云自定义处理图片"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于七牛云提供的图片处理服务无法满足业务需求，因此是需要，自定义数据处理服务，对图片进行处理。\n目前支持两种类型的处理:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"将图片置灰 "},{"type":"element","tagName":"ufop","properties":{},"children":[{"type":"text","value":"/grey"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"png图片加上背景颜色 "},{"type":"element","tagName":"ufop","properties":{},"children":[{"type":"text","value":"/background/<颜色16进制代码>"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-go"]},"children":[{"type":"text","value":"package main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"image\"\n\t_ \"image\"\n\t\"image/color\"\n\t\"image/draw\"\n\t\"image/png\"\n\t_ \"image/png\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\turl2 \"net/url\"\n\t\"os\"\n\t\"strings\"\n)\n\n// HTTPGetMaxSize 最大处理的文件长度\nconst HTTPGetMaxSize = 2 * 1024 * 1024\n\nfunc httpGet(url string) (body []byte, err error, res *http.Response) {\n\tres, err = http.Get(url)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"httpGet error: %s\", err), res\n\t}\n\tdefer res.Body.Close()\n\tbody, err = ioutil.ReadAll(http.MaxBytesReader(nil, res.Body, HTTPGetMaxSize))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"httpGet read body error: %s\", err), res\n\t}\n\treturn\n}\n\nfunc handler(rw http.ResponseWriter, req *http.Request) {\n\tlog.Println(\"获取到请求\", req.URL.RawQuery)\n\tprintln(\"获取到请求\", req.URL.RawQuery)\n\tvar err error\n\tdefer func() {\n\t\tif err != nil {\n\t\t\thttp.Error(rw, err.Error(), 500)\n\t\t}\n\t}()\n\n\tdefer req.Body.Close()\n\tvar body []byte\n\tvar res *http.Response\n\n\tcmd, _ := url2.QueryUnescape(req.URL.Query().Get(\"cmd\"))\n\top := strings.Split(cmd, \"/\")\n\n\turl := req.URL.Query().Get(\"url\")\n\tif url != \"\" {\n\t\tbody, err, res = httpGet(url)\n\t\tif err != nil {\n\t\t\tlog.Println(\"handler http get error:\", err.Error())\n\t\t}\n\t} else {\n\t\tbody, err = ioutil.ReadAll(req.Body)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"handler body read error: %s\\n\", err.Error())\n\t\t\treturn\n\t\t}\n\t}\n\n\timg, err := png.Decode(bytes.NewReader(body))\n\tswitch op[1] {\n\t// handler/grey\n\tcase \"grey\":\n\t\timg = greyImage(img)\n\t\tbreak\n\t// handler/background\n\tcase \"background\":\n\t\timg = backGroundImage(img, op[2])\n\t\tbreak\n\n\t}\n\twrite(rw, img, res)\n\n}\n\n/**\n * 给图片增加背景颜色\n */\nfunc backGroundImage(srcImage image.Image, color string) image.Image {\n\tbounds := srcImage.Bounds()\n\tnewRgba := image.NewRGBA(bounds)\n\tc, _ := ParseHexColor(color)\n\tfor x := 0; x < newRgba.Bounds().Dx(); x++ { // 将背景图涂黑\n\t\tfor y := 0; y < newRgba.Bounds().Dy(); y++ {\n\t\t\tnewRgba.Set(x, y, c)\n\t\t}\n\t}\n\t// 在中间贴图\n\tdraw.Draw(newRgba, newRgba.Bounds(), srcImage, image.Pt(0, 0), draw.Over)\n\treturn newRgba\n}\nfunc ParseHexColor(s string) (c color.RGBA, err error) {\n\tc.A = 0xff\n\tswitch len(s) {\n\tcase 6:\n\t\t_, err = fmt.Sscanf(s, \"%02x%02x%02x\", &c.R, &c.G, &c.B)\n\tcase 3:\n\t\t_, err = fmt.Sscanf(s, \"%1x%1x%1x\", &c.R, &c.G, &c.B)\n\t\t// Double the hex digits:\n\t\tc.R *= 17\n\t\tc.G *= 17\n\t\tc.B *= 17\n\tcase 5:\n\t\ts = \"0\" + s\n\t\t_, err = fmt.Sscanf(s, \"%02x%02x%02x\", &c.R, &c.G, &c.B)\n\tdefault:\n\t\terr = fmt.Errorf(\"invalid length, must be 7 or 4\")\n\n\t}\n\treturn\n}\n\n/**\n * 图片灰化处理\n */\nfunc greyImage(m image.Image) *image.RGBA {\n\tbounds := m.Bounds()\n\tdx := bounds.Dx()\n\tdy := bounds.Dy()\n\tnewRgba := image.NewRGBA(bounds)\n\tfor i := 0; i < dx; i++ {\n\t\tfor j := 0; j < dy; j++ {\n\t\t\tcolorRgb := m.At(i, j)\n\t\t\t_, g, _, a := colorRgb.RGBA()\n\t\t\tgUint8 := uint8(g >> 8)\n\t\t\taUint8 := uint8(a >> 8)\n\t\t\tnewRgba.SetRGBA(i, j, color.RGBA{R: gUint8, G: gUint8, B: gUint8, A: aUint8})\n\t\t}\n\t}\n\treturn newRgba\n}\nfunc write(rw http.ResponseWriter, img image.Image, res *http.Response) {\n\tif res != nil {\n\t\trw.Header().Set(\"content-type\", res.Header.Get(\"content-type\"))\n\t\trw.Header().Set(\"Content-Disposition\", res.Header.Get(\"Content-Disposition\"))\n\t}\n\tpng.Encode(rw, img)\n}\n\nfunc health(rw http.ResponseWriter, req *http.Request) {\n\trw.Write([]byte(\"ok\"))\n}\n\nfunc main() {\n\tport := os.Getenv(\"PORT_HTTP\")\n\tif port == \"\" {\n\t\tport = \"9100\"\n\t}\n\thttp.HandleFunc(\"/handler\", handler)\n\thttp.HandleFunc(\"/health\", health)\n\tlog.Fatalln(http.ListenAndServe(\"0.0.0.0:\"+port, nil))\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"github: https://github.com/zxcvbnmzsedr/ufop-golang-demo"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"七牛云自定义处理图片","slug":"七牛云自定义处理图片"}]}},
    "staticQueryHashes": ["928362550"]}