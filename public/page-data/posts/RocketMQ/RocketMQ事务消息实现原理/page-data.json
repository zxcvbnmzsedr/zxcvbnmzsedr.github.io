{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/RocketMQ/RocketMQ事务消息实现原理","result":{"data":{"siYuan":{"excerpt":"RocketMQ提供了事务消息的功能，采用了2PC+事务回查来实现事务，最终能通过RocketMQ提供的事务消息，能够简单方便的实现分布式事务。 概念介绍 事务消息 RocketMQ提供类似XA或Open XA的分布式事务功能，通过Rock...","raw":"RocketMQ提供了事务消息的功能，采用了2PC+事务回查来实现事务，最终能通过RocketMQ提供的事务消息，能够简单方便的实现分布式事务。\n\n# 概念介绍\n\n* 事务消息\n\n  RocketMQ提供类似XA或Open XA的分布式事务功能，通过RocketMQ事务消息能达到分布式事务的最终一致。\n* 半事务消息\n\n  暂不能投递的消息，生产者已经成功地将消息发送到了RocketMQ服务端，但是RocketMQ服务端未收到生产者对该消息的二次确认，此时该消息被标记成“暂不能投递”状态，处于该种状态下的消息即半事务消息。\n* 消息回查\n\n  由于网络闪断、生产者应用重启等原因，导致某条事务消息的二次确认丢失，RocketMQ服务端通过扫描发现某条消息长期处于“半事务消息”时，需要主动向消息生产者询问该消息的最终状态（Commit或是Rollback），该询问过程即消息回查。\n\n## 交互流程\n\n事务消息交互流程如下图所示。\n\n![RSb0i0](https://image.ztianzeng.com/uPic/RSb0i0.jpg)\n\n事务消息发送步骤如下：\n\n1. 生产者将半事务消息发送至RocketMQ服务端。\n2. RocketMQ服务端将消息持久化成功之后，向生产者返回Ack确认消息已经发送成功，此时消息为半事务消息。\n3. 生产者开始执行本地事务逻辑。\n4. 生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下：\n\n    * 二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。\n    * 二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。\n5. 在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。\n\n事务消息回查步骤如下：\n\n1. 生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。\n2. 生产者根据检查得到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。\n\n# 使用限制\n\n1. 事务消息不支持延时消息和批量消息。\n2. 为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为 15 次，但是用户可以通过 Broker 配置文件的 `transactionCheckMax`参数来修改此限制。如果已经检查某条消息超过 N 次的话（ N = `transactionCheckMax` ） 则 Broker 将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写 `AbstractTransactionalMessageCheckListener` 类来修改这个行为。\n3. 事务消息将在 Broker 配置文件中的参数 `transactionTimeout` 这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性 `CHECK_IMMUNITY_TIME_IN_SECONDS` 来改变这个限制，该参数优先于 `transactionTimeout` 参数。\n4. 事务性消息可能不止一次被检查或消费。\n5. 提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过 RocketMQ 本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制。\n6. 事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询、MQ服务器能通过它们的生产者 ID 查询到消费者。\n\n# 原理分析\n\n整个事务消息，分为两大块，发送流程和回查流程: \n\n* 发送流程：发送half message(半消息)，执行本地事务，发送事务执行结果\n* 定时任务回查流程：MQ定时任务扫描半消息，回查本地事务，发送事务执行结果\n\n## Productor发送消息\n\n发送端的代码:\n\n```java\npublic class TransactionProducer {\n   public static void main(String[] args) throws MQClientException, InterruptedException {\n       TransactionListener transactionListener = new TransactionListenerImpl();\n       TransactionMQProducer producer = new TransactionMQProducer(\"please_rename_unique_group_name\");\n       ExecutorService executorService = new ThreadPoolExecutor(2, 5, 100, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2000), new ThreadFactory() {\n           @Override\n           public Thread newThread(Runnable r) {\n               Thread thread = new Thread(r);\n               thread.setName(\"client-transaction-msg-check-thread\");\n               return thread;\n           }\n       });\n       producer.setExecutorService(executorService);\n       producer.setTransactionListener(transactionListener);\n       producer.start();\n       String[] tags = new String[] {\"TagA\", \"TagB\", \"TagC\", \"TagD\", \"TagE\"};\n       for (int i = 0; i < 10; i++) {\n           try {\n               Message msg =\n                   new Message(\"TopicTest1234\", tags[i % tags.length], \"KEY\" + i,\n                       (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET));\n               SendResult sendResult = producer.sendMessageInTransaction(msg, null);\n               System.out.printf(\"%s%n\", sendResult);\n               Thread.sleep(10);\n           } catch (MQClientException | UnsupportedEncodingException e) {\n               e.printStackTrace();\n           }\n       }\n       for (int i = 0; i < 100000; i++) {\n           Thread.sleep(1000);\n       }\n       producer.shutdown();\n   }\n\n\tpublic class TransactionListenerImpl implements TransactionListener {\n\t  private AtomicInteger transactionIndex = new AtomicInteger(0);\n\t  private ConcurrentHashMap<String, Integer> localTrans = new ConcurrentHashMap<>();\n\t  @Override\n\t  public LocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n\t      int value = transactionIndex.getAndIncrement();\n\t      int status = value % 3;\n\t      localTrans.put(msg.getTransactionId(), status);\n\t      return LocalTransactionState.UNKNOW;\n\t  }\n\t  @Override\n\t  public LocalTransactionState checkLocalTransaction(MessageExt msg) {\n\t      Integer status = localTrans.get(msg.getTransactionId());\n\t      if (null != status) {\n\t          switch (status) {\n\t              case 0:\n\t                  return LocalTransactionState.UNKNOW;\n\t              case 1:\n\t                  return LocalTransactionState.COMMIT_MESSAGE;\n\t              case 2:\n\t                  return LocalTransactionState.ROLLBACK_MESSAGE;\n\t          }\n\t      }\n\t      return LocalTransactionState.COMMIT_MESSAGE;\n\t  }\n\t}\n\t\n}\n```\n\n从代码中可以看出，发送半消息是通过`TransactionMQProducer`的`sendMessageInTransaction`来进行发送\n\n```java\npublic TransactionSendResult sendMessageInTransaction(final Message msg,\n        final Object arg) throws MQClientException {\n        //判断transactionListener是否存在\n        if (null == this.transactionListener) {\n            throw new MQClientException(\"TransactionListener is null\", null);\n        }\n\n        msg.setTopic(NamespaceUtil.wrapNamespace(this.getNamespace(), msg.getTopic()));\n        //发送事务消息\n        return this.defaultMQProducerImpl.sendMessageInTransaction(msg, null, arg);\n}\n```\n\n`transactionListener` 是消息回查的类，它提供了两个方法\n\n* executeLocalTransaction: 执行本地事务\n* checkLocalTransaction: 回查本地事务\n\n`TransactionMQProducer`的`sendMessageInTransaction`最终会进入到`DefaultMQProducerImpl.sendMessageInTransaction`\n\n```java\npublic TransactionSendResult sendMessageInTransaction(final Message msg,\n        final LocalTransactionExecuter localTransactionExecuter, final Object arg)\n        throws MQClientException {\n        //判断检查本地事务的listener是否存在\n        TransactionListener transactionListener = getCheckListener();\n        if (null == localTransactionExecuter && null == transactionListener) {\n            throw new MQClientException(\"tranExecutor is null\", null);\n        }\n        // ignore DelayTimeLevel parameter\n        if (msg.getDelayTimeLevel() != 0) {\n            MessageAccessor.clearProperty(msg, MessageConst.PROPERTY_DELAY_TIME_LEVEL);\n        }\n\n        Validators.checkMessage(msg, this.defaultMQProducer);\n\n        SendResult sendResult = null;\n        MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, \"true\");\n        MessageAccessor.putProperty(msg, MessageConst.PROPERTY_PRODUCER_GROUP, this.defaultMQProducer.getProducerGroup());\n        try {\n            //发送半消息\n            sendResult = this.send(msg);\n        } catch (Exception e) {\n            throw new MQClientException(\"send message Exception\", e);\n        }\n\n        LocalTransactionState localTransactionState = LocalTransactionState.UNKNOW;\n        Throwable localException = null;\n        switch (sendResult.getSendStatus()) {\n            case SEND_OK: {\n                try {\n                    if (sendResult.getTransactionId() != null) {\n                        msg.putUserProperty(\"__transactionId__\", sendResult.getTransactionId());\n                    }\n                    String transactionId = msg.getProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);\n                    if (null != transactionId && !\"\".equals(transactionId)) {\n                        msg.setTransactionId(transactionId);\n                    }\n                    if (null != localTransactionExecuter) {\n                        localTransactionState = localTransactionExecuter.executeLocalTransactionBranch(msg, arg);\n                    } else if (transactionListener != null) {\n                        //发送消息成功，执行本地事务\n                        log.debug(\"Used new transaction API\");\n                        localTransactionState = transactionListener.executeLocalTransaction(msg, arg);\n                    }\n                    if (null == localTransactionState) {\n                        localTransactionState = LocalTransactionState.UNKNOW;\n                    }\n\n                    if (localTransactionState != LocalTransactionState.COMMIT_MESSAGE) {\n                        log.info(\"executeLocalTransactionBranch return {}\", localTransactionState);\n                        log.info(msg.toString());\n                    }\n                } catch (Throwable e) {\n                    log.info(\"executeLocalTransactionBranch exception\", e);\n                    log.info(msg.toString());\n                    localException = e;\n                }\n            }\n            break;\n            case FLUSH_DISK_TIMEOUT:\n            case FLUSH_SLAVE_TIMEOUT:\n            case SLAVE_NOT_AVAILABLE:\n                localTransactionState = LocalTransactionState.ROLLBACK_MESSAGE;\n                break;\n            default:\n                break;\n        }\n\n        try {\n            //执行endTransaction方法\n            // 如果半消息发送失败或本地事务执行失败告诉服务端是删除半消息\n            // 半消息发送成功且本地事务执行成功则告诉服务端生效半消息\n            this.endTransaction(msg, sendResult, localTransactionState, localException);\n        } catch (Exception e) {\n            log.warn(\"local transaction execute \" + localTransactionState + \", but end broker transaction failed\", e);\n        }\n\n        TransactionSendResult transactionSendResult = new TransactionSendResult();\n        transactionSendResult.setSendStatus(sendResult.getSendStatus());\n        transactionSendResult.setMessageQueue(sendResult.getMessageQueue());\n        transactionSendResult.setMsgId(sendResult.getMsgId());\n        transactionSendResult.setQueueOffset(sendResult.getQueueOffset());\n        transactionSendResult.setTransactionId(sendResult.getTransactionId());\n        transactionSendResult.setLocalTransactionState(localTransactionState);\n        return transactionSendResult;\n    }\n```\n\n这个方法的功能: \n\n1. 给消息追加上事务消息相关的`tag`,用于broker区分普通消息和事务消息\n2. 调用`this.send(msg)`发送半消息\n3. 发送成功由用户自己编写的`transactionListener`，执行本地事务\n4. 事务结束之后，执行`endTransaction`，告诉`broker`执行`commit/rollback`\n\n在`transactionListener`执行完之后有三种情况: `UNKNOW`、`COMMIT`、`RollBack`，然后调用`endTransaction`来结束事务\n\n```java\npublic void endTransaction(\n        final Message msg,\n        final SendResult sendResult,\n        final LocalTransactionState localTransactionState,\n        final Throwable localException) throws RemotingException, MQBrokerException, InterruptedException, UnknownHostException {\n        final MessageId id;\n        if (sendResult.getOffsetMsgId() != null) {\n            id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());\n        } else {\n            id = MessageDecoder.decodeMessageId(sendResult.getMsgId());\n        }\n        String transactionId = sendResult.getTransactionId();\n        final String brokerAddr = this.mQClientFactory.findBrokerAddressInPublish(sendResult.getMessageQueue().getBrokerName());\n        EndTransactionRequestHeader requestHeader = new EndTransactionRequestHeader();\n        requestHeader.setTransactionId(transactionId);\n        requestHeader.setCommitLogOffset(id.getOffset());\n\t// 根据事务执行的结果，来设置提交给broker的状态\n        switch (localTransactionState) {\n\t\t// 提交事务\n            case COMMIT_MESSAGE:\n                requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);\n                break;\n\t\t// 回滚\n            case ROLLBACK_MESSAGE:\n                requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);\n                break;\n            case UNKNOW:\n                requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);\n                break;\n            default:\n                break;\n        }\n\n        doExecuteEndTransactionHook(msg, sendResult.getMsgId(), brokerAddr, localTransactionState, false);\n        requestHeader.setProducerGroup(this.defaultMQProducer.getProducerGroup());\n        requestHeader.setTranStateTableOffset(sendResult.getQueueOffset());\n        requestHeader.setMsgId(sendResult.getMsgId());\n        String remark = localException != null ? (\"executeLocalTransactionBranch exception: \" + localException.toString()) : null;\n        this.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, requestHeader, remark,\n            this.defaultMQProducer.getSendMsgTimeout());\n    }\n```\n\n## Broker处理半消息（第一次send）\n\nBroker端通过`SendMessageProcessor.processRequest()`方法接收处理 Producer 发送的半消息\n\n最后会调用到`SendMessageProcessor.asyncSendMessage()`，判断消息类型，进行消息存储。\n\n```java\nprivate CompletableFuture<RemotingCommand> asyncSendMessage(ChannelHandlerContext ctx, RemotingCommand request,\n                                                                SendMessageContext mqtraceContext,\n                                                                SendMessageRequestHeader requestHeader) {\n        // 。。。没必要看，都是set一些属性\n        String transFlag = origProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);\n\t// 如果是事务消息\n        if (transFlag != null && Boolean.parseBoolean(transFlag)) {\n            if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {\n                response.setCode(ResponseCode.NO_PERMISSION);\n                response.setRemark(\n                        \"the broker[\" + this.brokerController.getBrokerConfig().getBrokerIP1()\n                                + \"] sending transaction message is forbidden\");\n                return CompletableFuture.completedFuture(response);\n            }\n            //存储半消息\n            putMessageResult = this.brokerController.getTransactionalMessageService().asyncPrepareMessage(msgInner);\n        } else {\n            //存储普通消息\n            putMessageResult = this.brokerController.getMessageStore().asyncPutMessage(msgInner);\n        }\n        return handlePutMessageResultFuture(putMessageResult, response, request, msgInner, responseHeader, mqtraceContext, ctx, queueIdInt);\n    }\n```\n\n存储半消息的核心代码: \n\n```java\npublic CompletableFuture<PutMessageResult> asyncPutHalfMessage(MessageExtBrokerInner messageInner) {\n        return store.asyncPutMessage(parseHalfMessageInner(messageInner));\n    }\n\n    private MessageExtBrokerInner parseHalfMessageInner(MessageExtBrokerInner msgInner) {\n        //备份消息的原主题名称与原队列ID\n        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_TOPIC, msgInner.getTopic());\n        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_REAL_QUEUE_ID,\n            String.valueOf(msgInner.getQueueId()));\n        msgInner.setSysFlag(\n            MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), MessageSysFlag.TRANSACTION_NOT_TYPE));\n        //事务消息的topic和queueID是写死固定的\n        msgInner.setTopic(TransactionalMessageUtil.buildHalfTopic());\n        msgInner.setQueueId(0);\n        msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));\n        return msgInner;\n    }\n```\n\n在这一步，备份消息的原主题名称与原队列ID，然后取消事务消息的消息标签，重新设置消息的主题为：RMQ_SYS_TRANS_HALF_TOPIC，队列ID固定为0。\n\n与其他普通消息区分开，然后完成消息持久化。到这里，Broker 就初步处理完了 Producer 发送的事务半消息。\n\n## Broker处理事务消息的二次提交\n\n\n```java\npublic RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request) throws\n        RemotingCommandException {\n        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n        final EndTransactionRequestHeader requestHeader =\n            (EndTransactionRequestHeader)request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);\n        LOGGER.debug(\"Transaction request:{}\", requestHeader);\n        //从节点不处理\n        if (BrokerRole.SLAVE == brokerController.getMessageStoreConfig().getBrokerRole()) {\n            response.setCode(ResponseCode.SLAVE_NOT_AVAILABLE);\n            LOGGER.warn(\"Message store is slave mode, so end transaction is forbidden. \");\n            return response;\n        }\n        // .....一堆没啥太大影响的代码\n        OperationResult result = new OperationResult();\n\t// 核心流程\n        if (MessageSysFlag.TRANSACTION_COMMIT_TYPE == requestHeader.getCommitOrRollback()) {\n            //根据commitLogOffset从commitlog文件中查找消息\n            result = this.brokerController.getTransactionalMessageService().commitMessage(requestHeader);\n            if (result.getResponseCode() == ResponseCode.SUCCESS) {\n\t\t// 如果是提交动作，就恢复原消息的主题与队列，再次存入commitlog文件进而转到消息消费队列，供消费者消费，\n            \t// 然后将原预处理消息存入一个新的主题RMQ_SYS_TRANS_OP_HALF_TOPIC，代表该消息已被处理\n                RemotingCommand res = checkPrepareMessage(result.getPrepareMessage(), requestHeader);\n                if (res.getCode() == ResponseCode.SUCCESS) {\n                    MessageExtBrokerInner msgInner = endMessageTransaction(result.getPrepareMessage());\n                    msgInner.setSysFlag(MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), requestHeader.getCommitOrRollback()));\n                    msgInner.setQueueOffset(requestHeader.getTranStateTableOffset());\n                    msgInner.setPreparedTransactionOffset(requestHeader.getCommitLogOffset());\n                    msgInner.setStoreTimestamp(result.getPrepareMessage().getStoreTimestamp());\n                    MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_TRANSACTION_PREPARED);\n                    RemotingCommand sendResult = sendFinalMessage(msgInner);\n                    if (sendResult.getCode() == ResponseCode.SUCCESS) {\n                        //其实是将消息存储在主题为：RMQ_SYS_TRANS_OP_HALF_TOPIC的主题中，代表这些消息已经被处理（提交或回滚）。\n                        this.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());\n                    }\n                    return sendResult;\n                }\n                return res;\n            }\n        } else if (MessageSysFlag.TRANSACTION_ROLLBACK_TYPE == requestHeader.getCommitOrRollback()) {\n            //根据commitlogOffset查找消息\n            result = this.brokerController.getTransactionalMessageService().rollbackMessage(requestHeader);\n            if (result.getResponseCode() == ResponseCode.SUCCESS) {\n                RemotingCommand res = checkPrepareMessage(result.getPrepareMessage(), requestHeader);\n                if (res.getCode() == ResponseCode.SUCCESS) {\n                    //删除预处理消息(prepare)\n                    //其实是将消息存储在主题为：RMQ_SYS_TRANS_OP_HALF_TOPIC的主题中，代表这些消息已经被处理（提交或回滚）。\n                    this.brokerController.getTransactionalMessageService().deletePrepareMessage(result.getPrepareMessage());\n                }\n                return res;\n            }\n        }\n        response.setCode(result.getResponseCode());\n        response.setRemark(result.getResponseRemark());\n        return response;\n    }\n```\n\n其流程大概如下:\n\n* 根据commitlogOffset找到消息\n* 如果是提交动作，就恢复原消息的主题与队列，再次存入commitlog文件进而转到消息消费队列，供消费者消费，然后将原预处理消息存入一个新的主题RMQ_SYS_TRANS_OP_HALF_TOPIC，代表该消息已被处理\n* 回滚消息，则直接将原预处理消息存入一个新的主题RMQ_SYS_TRANS_OP_HALF_TOPIC，代表该消息已被处理\n\n## 半消息事务回查\n\n两段式协议发送与提交回滚消息，执行完本地事务消息的状态为`UNKNOW`时，结束事务不做任何操作。通过事务状态定时回查得到发送端的事务状态是`rollback`或`commit`。\n\n通过`TransactionalMessageCheckService`线程定时去检测`RMQ_SYS_TRANS_HALF_TOPIC`主题中的消息，回查消息的事务状态。\n\n* RMQ_SYS_TRANS_HALF_TOPIC\n\n  prepare消息的主题，事务消息首先先进入到该主题。\n* RMQ_SYS_TRANS_OP_HALF_TOPIC\n\n  当消息服务器收到事务消息的提交或回滚请求后，会将消息存储在该主题下。\n\n```java\n// TransactionalMessageCheckService   \n@Override\n    public void run() {\n        log.info(\"Start transaction check service thread!\");\n        long checkInterval = brokerController.getBrokerConfig().getTransactionCheckInterval();\n        while (!this.isStopped()) {\n            this.waitForRunning(checkInterval);\n        }\n        log.info(\"End transaction check service thread!\");\n    }\n\n    @Override\n    protected void onWaitEnd() {\n        //事务过期时间\n        long timeout = brokerController.getBrokerConfig().getTransactionTimeOut();\n        int checkMax = brokerController.getBrokerConfig().getTransactionCheckMax();\n        long begin = System.currentTimeMillis();\n        log.info(\"Begin to check prepare message, begin time:{}\", begin);\n        //检查本地事务\n        this.brokerController.getTransactionalMessageService().check(timeout, checkMax, this.brokerController.getTransactionalMessageCheckListener());\n        log.info(\"End to check prepare message, consumed time:{}\", System.currentTimeMillis() - begin);\n    }\n```\n\n时序图如下:\n\n![](https://image.ztianzeng.com/uPic/20220506195258.png)\n\n# 异常情况\n\n## Producer发送半消息失败\n\n在发送成功之后才会执行本地事务，所以半消息发送失败之后就直接退出发送流程了。\n\n发送失败会抛出异常信息，可以自己针对异常信息再做进一步处理，是重试还是回滚上一步操作。\n\n## 半消息发送成功，没收到MQ返回的响应\n\n本地事务执行失败，本地事务会进行回滚。\n\n然后，发送rollback给MQ，MQ会删除之前发送的半消息，也就不会继续调用下游服务了。\n\n## 半消息发送成功，没收到MQ返回的响应\n\n发送半消息成功，但是没有收到MQ返回的响应，让我们系统误以为MQ消息发送失败，执行回滚逻辑。但是实际上MQ这个时候已经保存成功了。\n\n这种情况下，就需要通过MQ的回查逻辑`TransactionalMessageCheckService`定时扫描半消息队列，然后回查本地事务的状态\n\n# 总结\n\nRocketMQ实现事务消息的原理是通过改写`Topic`和`queueId`，将消息重写到对Consumer不可见的队列中，然后在Productor执行完本地事务之后，提交事务状态再决定将半事务消息`Commit`或者`Rollback`。\n\n如果由于某种情况，服务宕机或者网络抖动等原因，Broker没有收到Productor的事务状态请求，则会进入到补偿阶段，通过定时任务扫描半事务消息进行事务回查。\n","field":{"slug":"/posts/RocketMQ/RocketMQ事务消息实现原理"},"frontmatter":{"title":"RocketMQ事务消息实现原理","tags":["RocketMQ"],"date":"2022-05-05","description":"RocketMQ提供了事务消息的功能，采用了2PC+事务回查来实现事务，最终能通过RocketMQ提供的事务消息，能够简单方便的实现分布式事务。 概念介绍 事务消息 RocketMQ提供类似XA或Open XA的分布式事务功能，通过Rock..."}},"prev":{"frontmatter":{"title":"RocketMQ延迟消息原理"},"field":{"slug":"/posts/RocketMQ/RocketMQ延迟消息原理"}},"next":{"frontmatter":{"title":"SpringCloud并发请求其他系统接口，导致链路追踪失效"},"field":{"slug":"/posts/SpringCloud并发请求其他系统接口，导致链路追踪失效"}}},"pageContext":{"slug":"/posts/RocketMQ/RocketMQ事务消息实现原理","prevSlug":"/posts/RocketMQ/RocketMQ延迟消息原理","nextSlug":"/posts/SpringCloud并发请求其他系统接口，导致链路追踪失效"}},"staticQueryHashes":["1284643331","2841359383"]}