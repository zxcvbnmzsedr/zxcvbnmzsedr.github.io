(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{448:function(t,a,r){"use strict";r.r(a);var s=r(6),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("String的底层实现是SDS（Simple dynamic String）。")]),t._v(" "),a("h1",{attrs:{id:"sds-结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-结构"}},[t._v("#")]),t._v(" SDS 结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct __attribute__ ((__packed__)) sdshdr8 {\n    uint8_t len; /* 当前字符串数组的长度 */\n    uint8_t alloc; /* 当前字符串分配的总内存大小 */\n    unsigned char flags; /* 当前的字符串标记，用来标识是sdshdr8,sdshdr16等 */\n    char buf[]; /* 字符串真正的值 */\n};\n")])])]),a("h1",{attrs:{id:"相对于c语言的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相对于c语言的优势"}},[t._v("#")]),t._v(" 相对于C语言的优势")]),t._v(" "),a("h2",{attrs:{id:"统计长度时间复杂度-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统计长度时间复杂度-o-1"}},[t._v("#")]),t._v(" 统计长度时间复杂度 O(1)")]),t._v(" "),a("p",[t._v("工作中使用redis，经常会通过STRLEN命令得到一个字符串的长度， 在SDS结构中len属性记录了字符串的长度，所以我们获取一个字符串长度直接取len的值，复杂度是O(1)。")]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" LR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  'A'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'B'\n  'B'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'C'\n  'C'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'D'\n  'D'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'\\0'\n  '\\0'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'1'\n  '\\0'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|发现'\\0'不计数|")]),t._v("'\\0'\n  '1'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'2'\n  '2'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("('\\0')")]),t._v("\n  'A'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|len=1|")]),t._v("'A'\n  'D' "),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("<--\x3e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|len=4|")]),t._v("'A'\n")])])]),a("p",[t._v("而如果用C字符串，在获取一个字符串长度时，需对整个字符串进行遍历，直至遍历到空格符结束（C中遇到空格符代表一个完整字符串），此时的复杂度是O(N)。")]),t._v(" "),a("p",[t._v("在高并发场景下频繁遍历字符串，获取字符串的长度很有可能成为redis的性能瓶颈，所以SDS性能更好一些。数据溢出")]),t._v(" "),a("h2",{attrs:{id:"数据溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据溢出"}},[t._v("#")]),t._v(" 数据溢出")]),t._v(" "),a("p",[t._v("由于C字符串是不记录自身长度的，相邻的两个字符串存储的方式可能如下图，在创建字符串的时候就分配了合适的内存空间。")]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" LR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  'A'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'B'\n  'B'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'C'\n  'C'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'D'\n  'D'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'\\0'\n  '\\0'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'1'\n  '1'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'2'\n  '2'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("('\\0')")]),t._v("\n")])])]),a("p",[t._v("如果这个时候，想修改字符串 ABCD 成 ABCDE ，就会侵占相邻字符串的空间，自身数据溢出导致其他字符串的内容被修改。")]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" LR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  'A'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'B'\n  'B'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'C'\n  'C'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'D'\n  'D'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'E'\n  'E'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'\\0'\n  '\\0'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("'2'\n  '2'"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("2"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("('\\0')")]),t._v("\n")])])]),a("p",[t._v("而SDS很好的规避了这点，当我们需要修改数据时，首先会检查当前SDS空间len是否满足，不满足则自动扩容空间至修改所需的大小，然后再执行修改。")]),t._v(" "),a("h2",{attrs:{id:"内存重分配策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存重分配策略"}},[t._v("#")]),t._v(" 内存重分配策略")]),t._v(" "),a("p",[t._v("C字符串的长度是一定的，所以每次在增长或者是缩短字符串的时候，都需要做内存的重新分配，而内存重新分配又是一个\n比较耗时的操作。")]),t._v(" "),a("p",[t._v("SDS通过两种内存重分配策略，在解决字符串增长和缩短时兼顾效率和性能")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("空间预分配 优化SDS字符串增长")]),t._v(" "),a("p",[t._v("当修改字符串并需要对SDS空间进行扩展式，不仅会分配修改所必要的空间，还会为SDS分配额外的未使用空间，\n下次修改先检查未使用空间是否满足，满足则不用再扩展空间。")])])]),t._v(" "),a("ul",[a("li",[t._v("如果对 SDS 字符串修改后，len 值小于 1M，那么此时额外分配未使用空间 free 的大小与len相等。")]),t._v(" "),a("li",[t._v("如果对 SDS 字符串修改后，len 值大于等于 1M，那么此时额外分配未使用空间 free 的大小为1M。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("惰性空间释放 优化SDS字符串缩短")])]),t._v(" "),a("p",[t._v("惰性空间释放策略则用于优化SDS字符串缩短操作，当缩短SDS字符串后，并不会立即执行内存重分配来回收多余的空间，而是用free属性将这些空间记录下来，如果后续有增长操作，则可直接使用。")]),t._v(" "),a("h2",{attrs:{id:"数据格式多样性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据格式多样性"}},[t._v("#")]),t._v(" 数据格式多样性")]),t._v(" "),a("p",[t._v("C字符串中的字符必须符合某些特定的编码格式，C字符串以\\0空字符结尾标识一个字符串结束，所以字符串里边是不能包含\\0的，不然就会被误认是多个。\n由于这种限制，使得C字符串只能保存文本数据，像音视频、图片等二进制格式的数据是无法存储的。")]),t._v(" "),a("p",[t._v("redis 会以处理二进制的方式操作Buf数组中的数据，所以对存入其中的数据做任何的限制、过滤，只要存进来什么样，取出来还是什么样。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",[t._v("C语言")]),t._v(" "),a("th",[t._v("SDS")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("字符串长度处理")]),t._v(" "),a("td",[t._v("需要从头开始遍历，直到遇到 '\\0' 为止，时间复杂度O(N)")]),t._v(" "),a("td",[t._v("记录当前字符串的长度，直接读取即可，时间复杂度 O(1)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("内存重新分配")]),t._v(" "),a("td",[t._v("分配内存空间超过后，"),a("br"),t._v("会导致数组下标越级或者内存分配溢出")]),t._v(" "),a("td",[t._v("空间预分配 "),a("br"),t._v("SDS 修改后，len 长度小于 1M，那么将会额外分配与 len 相同长度的未使用空间。如果修改后长度大于 1M，那么将分配1M的使用空间。"),a("br"),t._v("惰性空间释放有"),a("br"),t._v("空间分配对应的就有空间释放。SDS 缩短时并不会回收多余的内存空间，而是使用 free 字段将多出来的空间记录下来。如果后续有变更操作，直接使用 free 中记录的空间，减少了内存的分配。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("二进制安全")]),t._v(" "),a("td",[t._v("二进制数据并不是规则的字符串格式，可能会包含一些特殊的字符，比如 '\\0' 等。"),a("br"),t._v("前面提到过，C中字符串遇到 '\\0' 会结束，那 '\\0' 之后的数据就读取不上了")]),t._v(" "),a("td",[t._v("根据 len 长度来判断字符串结束的，二进制安全的问题就解决了")])])])]),t._v(" "),a("h1",{attrs:{id:"三大编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大编码"}},[t._v("#")]),t._v(" 三大编码")]),t._v(" "),a("p",[t._v("Redis 内部会根据用户给的不同键值而使用不同的编码格式!")]),t._v(" "),a("ul",[a("li",[t._v("int: 保存long型的64位有符号整数,范围 [ -2^63 , 2^63-1 ]")]),t._v(" "),a("li",[t._v("embstr: 保存长度小于44字节的字符串")]),t._v(" "),a("li",[t._v("raw: 保存长度大于44字节的字符串")])]),t._v(" "),a("p",[t._v("以下是处理流程")]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" TD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    开始"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("B"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("(是不是embstr或者raw字符串?)")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    B"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|否|")]),t._v("结束"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    B"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|是|")]),t._v("C"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("{字符串长度<20 并且可以 转换为long类型}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    C"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|是|")]),t._v("D"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("{是否配置maxmemory切整数范围 0 ,10000}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    D"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|是|")]),t._v("E"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("(直接从共享数据里面拿到)")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    D"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|否,根据embstr和raw再分别处理|")]),t._v("结束"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    C"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|否|")]),t._v("F"),a("span",{pre:!0,attrs:{class:"token text string"}},[t._v("{字符串长度<44}")]),t._v("\n    F"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|是,编码为emstr|")]),t._v("结束\n    F"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),a("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|否,直接返回原始对象|")]),t._v("结束\n    E"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v("结束\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);