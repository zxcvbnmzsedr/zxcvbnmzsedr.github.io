{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/redis/Redis集群",
    "result": {"pageContext":{"id":"/topic/redis/Redis集群","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"三种集群方案"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主从复制模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"哨兵模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Cluster 模式"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"主从复制模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/image-20210920222454496.png","alt":"image-20210920222454496"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　为此， "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"引入主从复制机制的目的有两个"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"一个是读写分离，分担 \"master\" 的读写压力"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"一个是方便做容灾恢复"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"主从复制优点"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"主从复制缺点"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"也就是要人工介入"}]},{"type":"text","value":"）；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"原理"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["mermaid"],"dataProcessed":"true"},"children":[{"type":"element","tagName":"svg","properties":{"id":"mermaid-1658477522967","width":"100%","xmlns":"http://www.w3.org/2000/svg","height":"730","style":"max-width: 511px;","viewBox":"-50 -10 511 730"},"children":[{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":"#mermaid-1658477522967 {font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1658477522967 .error-icon{fill:#552222;}#mermaid-1658477522967 .error-text{fill:#552222;stroke:#552222;}#mermaid-1658477522967 .edge-thickness-normal{stroke-width:2px;}#mermaid-1658477522967 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1658477522967 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1658477522967 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1658477522967 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1658477522967 .marker{fill:#333333;stroke:#333333;}#mermaid-1658477522967 .marker.cross{stroke:#333333;}#mermaid-1658477522967 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1658477522967 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1658477522967 text.actor>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .actor-line{stroke:grey;}#mermaid-1658477522967 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-1658477522967 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-1658477522967 #arrowhead path{fill:#333;stroke:#333;}#mermaid-1658477522967 .sequenceNumber{fill:white;}#mermaid-1658477522967 #sequencenumber{fill:#333;}#mermaid-1658477522967 #crosshead path{fill:#333;stroke:#333;}#mermaid-1658477522967 .messageText{fill:#333;stroke:#333;}#mermaid-1658477522967 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1658477522967 .labelText,#mermaid-1658477522967 .labelText>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .loopText,#mermaid-1658477522967 .loopText>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1658477522967 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-1658477522967 .noteText,#mermaid-1658477522967 .noteText>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-1658477522967 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-1658477522967 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-1658477522967 .actorPopupMenu{position:absolute;}#mermaid-1658477522967 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-1658477522967 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1658477522967 .actor-man circle,#mermaid-1658477522967 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-1658477522967 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}"}]},{"type":"element","tagName":"g","properties":{},"children":[]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"symbol","properties":{"id":"computer","width":"24","height":"24"},"children":[{"type":"element","tagName":"path","properties":{"transform":"scale(.5)","d":"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"symbol","properties":{"id":"database","fillRule":"evenodd","clipRule":"evenodd"},"children":[{"type":"element","tagName":"path","properties":{"transform":"scale(.5)","d":"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"symbol","properties":{"id":"clock","width":"24","height":"24"},"children":[{"type":"element","tagName":"path","properties":{"transform":"scale(.5)","d":"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z"},"children":[]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"line","properties":{"id":"actor0","x1":"75","y1":"5","x2":"75","y2":"664","className":["200"],"strokeWidth":"0.5px","stroke":"#999"},"children":[]},{"type":"element","tagName":"g","properties":{"id":"root-0"},"children":[{"type":"element","tagName":"rect","properties":{"x":"0","y":"0","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"32.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"75","dy":"0"},"children":[{"type":"text","value":"从服务器"}]}]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"line","properties":{"id":"actor1","x1":"275","y1":"5","x2":"275","y2":"664","className":["200"],"strokeWidth":"0.5px","stroke":"#999"},"children":[]},{"type":"element","tagName":"g","properties":{"id":"root-1"},"children":[{"type":"element","tagName":"rect","properties":{"x":"200","y":"0","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"32.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"275","dy":"0"},"children":[{"type":"text","value":"主服务器"}]}]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"arrowhead","refX":"9","refY":"5","markerUnits":"userSpaceOnUse","markerWidth":"12","markerHeight":"12","orient":"auto"},"children":[{"type":"element","tagName":"path","properties":{"d":"M 0 0 L 10 5 L 0 10 z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"crosshead","markerWidth":"15","markerHeight":"8","orient":"auto","refX":"16","refY":"4"},"children":[{"type":"element","tagName":"path","properties":{"fill":"black","stroke":"#000000","strokeWidth":"1px","d":"M 9,2 V 6 L16,4 Z","style":"stroke-dasharray: 0, 0;"},"children":[]},{"type":"element","tagName":"path","properties":{"fill":"none","stroke":"#000000","strokeWidth":"1px","d":"M 0,1 L 6,7 M 6,1 L 0,7","style":"stroke-dasharray: 0, 0;"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"filled-head","refX":"18","refY":"7","markerWidth":"20","markerHeight":"28","orient":"auto"},"children":[{"type":"element","tagName":"path","properties":{"d":"M 18,7 L9,13 L14,7 L9,1 Z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"sequencenumber","refX":"15","refY":"15","markerWidth":"60","markerHeight":"40","orient":"auto"},"children":[{"type":"element","tagName":"circle","properties":{"cx":"15","cy":"15","r":"6"},"children":[]}]}]},{"type":"element","tagName":"text","properties":{"x":"175","y":"80","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"SYNC请求"}]},{"type":"element","tagName":"line","properties":{"x1":"75","y1":"113","x2":"275","y2":"113","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"128","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"创建快照、缓冲快照生成期间的写命令"}]},{"type":"element","tagName":"path","properties":{"d":"M 275,161 C 335,151 335,191 275,181","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"175","y":"206","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"同步快照"}]},{"type":"element","tagName":"line","properties":{"x1":"275","y1":"239","x2":"75","y2":"239","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"254","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"载入、解析快照"}]},{"type":"element","tagName":"path","properties":{"d":"M 75,287 C 135,277 135,317 75,307","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"332","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"缓冲快照同步的写命令"}]},{"type":"element","tagName":"path","properties":{"d":"M 275,365 C 335,355 335,395 275,385","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"175","y":"410","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"同步写缓冲"}]},{"type":"element","tagName":"line","properties":{"x1":"275","y1":"443","x2":"75","y2":"443","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"458","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"载入缓冲"}]},{"type":"element","tagName":"path","properties":{"d":"M 75,491 C 135,481 135,521 75,511","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"175","y":"581","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"同步增量"}]},{"type":"element","tagName":"line","properties":{"x1":"275","y1":"614","x2":"75","y2":"614","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"line","properties":{"x1":"65","y1":"531","x2":"285","y2":"531","className":["loopLine"]},"children":[]},{"type":"element","tagName":"line","properties":{"x1":"285","y1":"531","x2":"285","y2":"624","className":["loopLine"]},"children":[]},{"type":"element","tagName":"line","properties":{"x1":"65","y1":"624","x2":"285","y2":"624","className":["loopLine"]},"children":[]},{"type":"element","tagName":"line","properties":{"x1":"65","y1":"531","x2":"65","y2":"624","className":["loopLine"]},"children":[]},{"type":"element","tagName":"polygon","properties":{"points":"65,531 115,531 115,544 106.6,551 65,551","className":["labelBox"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"90","y":"544","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["labelText"],"style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"loop"}]},{"type":"element","tagName":"text","properties":{"x":"200","y":"549","textAnchor":"middle","className":["loopText"],"style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"200"},"children":[{"type":"text","value":"[Healthcheck]"}]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"x":"0","y":"644","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"676.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"75","dy":"0"},"children":[{"type":"text","value":"从服务器"}]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"x":"200","y":"644","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"676.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"275","dy":"0"},"children":[{"type":"text","value":"主服务器"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从数据库启动成功后，连接主数据库，发送 SYNC 命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"从数据库初始化完成"}]},{"type":"text","value":"）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"从数据库初始化完成后的操作"}]},{"type":"text","value":"）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"redis主从复制的坑"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　redis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　redis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　如果此时redis master节点宕机从节点复制失败，为保证集群可用性，会进行主备切换，slave变为了redis master。B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。另外如果主从复制延迟同样也会造成加锁和解锁延迟的问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　至于解决办法嘛，目前看还没有什么根治的方法，只能尽量保证机器的稳定性，减少发生此事件的概率,即便是redis作者也没有特别完美的解决这个问题"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"哨兵模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022808580.png","alt":"单哨兵"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"哨兵模式的作用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"发布订阅模式"}]},{"type":"text","value":"通知其他的从服务器，修改配置文件，让它们切换主机；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://segmentfault.com/img/remote/1460000022808582","alt":"多哨兵"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"故障切换的过程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"主观下线"}]},{"type":"text","value":"。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"客观下线"}]},{"type":"text","value":"。这样对于客户端而言，一切都是透明的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"哨兵模式的工作方式："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"哨兵模式的优缺点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"优点："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主从可以自动切换，系统更健壮，可用性更高("},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"可以看作自动版的主从复制"}]},{"type":"text","value":")。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"缺点："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Cluster 集群模式（Redis官方）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"也就是说每台 Redis 节点上存储不同的内容"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022808584.png","alt":"image-20200531184321294"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"集群的数据分片"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis 集群有16384 个哈希槽，每个 key 通过+693"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点 A 包含 0 到 5460 号哈希槽"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点 B 包含 5461 到 10922 号哈希槽"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点 C 包含 10923 到 16383 号哈希槽"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Redis 集群的主从复制模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"集群的特点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点的 fail 是通过集群中超过半数的节点检测失效时才生效。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　来源: "},{"type":"element","tagName":"a","properties":{"href":"https://segmentfault.com/a/1190000022808576"},"children":[{"type":"text","value":"https://segmentfault.com/a/1190000022808576"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n"}]}],"data":{"quirksMode":false}},"html":"<h1 id=\"三种集群方案\">三种集群方案</h1>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-rg7s1s6\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主从复制模式</p>\n</li>\n<li id=\"20220722161128-lyucuhn\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">哨兵模式</p>\n</li>\n<li id=\"20220722161128-grnr9fp\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Cluster 模式</p>\n</li>\n</ul>\n<h1 id=\"主从复制模式\">主从复制模式</h1>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/image-20210920222454496.png\" alt=\"image-20210920222454496\" /></span></p>\n<p updated=\"20220722161128\">　　通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。</p>\n<p updated=\"20220722161128\">　　为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。</p>\n<p updated=\"20220722161128\">　　为此， <strong>Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上</strong>。</p>\n<p updated=\"20220722161128\">　　在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。</p>\n<p updated=\"20220722161128\">　　<strong>引入主从复制机制的目的有两个</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-h9f5blw\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">一个是读写分离，分担 &quot;master&quot; 的读写压力</p>\n</li>\n<li id=\"20220722161128-ykebx91\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">一个是方便做容灾恢复</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　<strong>主从复制优点</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-27tvkvw\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；</p>\n</li>\n<li id=\"20220722161128-w59jaqk\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；</p>\n</li>\n<li id=\"20220722161128-ov65pel\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；</p>\n</li>\n<li id=\"20220722161128-w31ayzn\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；</p>\n</li>\n<li id=\"20220722161128-zwzkugh\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　<strong>主从复制缺点</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-ph7a149\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（<strong>也就是要人工介入</strong>）；</p>\n</li>\n<li id=\"20220722161128-c6l56fq\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；</p>\n</li>\n<li id=\"20220722161128-ksf1k07\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。</p>\n</li>\n<li id=\"20220722161128-2i6ulnt\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂</p>\n</li>\n</ul>\n<h2 id=\"原理\">原理</h2>\n<div data-content=\"sequenceDiagram\n    participant 从服务器\n    participant 主服务器\n    从服务器-&gt;&gt;主服务器: SYNC请求\n    主服务器-&gt;&gt;主服务器: 创建快照、缓冲快照生成期间的写命令\n    主服务器-&gt;&gt;从服务器: 同步快照\n    从服务器-&gt;&gt;从服务器: 载入、解析快照\n    主服务器-&gt;&gt;主服务器: 缓冲快照同步的写命令\n    主服务器-&gt;&gt;从服务器: 同步写缓冲\n    从服务器-&gt;&gt;从服务器: 载入缓冲\n    loop Healthcheck\n        主服务器-&gt;&gt;从服务器: 同步增量\n    end\" data-subtype=\"mermaid\"><div spin=\"1\"></div></div>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-jnctbqd\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">从数据库启动成功后，连接主数据库，发送 SYNC 命令；</p>\n</li>\n<li id=\"20220722161128-0llv5di\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；</p>\n</li>\n<li id=\"20220722161128-cqq3arg\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；</p>\n</li>\n<li id=\"20220722161128-tauj531\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；</p>\n</li>\n<li id=\"20220722161128-55qb3gy\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；</p>\n</li>\n<li id=\"20220722161128-xvapkwg\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（<strong>从数据库初始化完成</strong>）</p>\n</li>\n<li id=\"20220722161128-la5ukoi\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（<strong>从数据库初始化完成后的操作</strong>）</p>\n</li>\n<li id=\"20220722161128-l0uhs5j\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。</p>\n</li>\n<li id=\"20220722161128-df9gr6n\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p>\n</li>\n</ul>\n<h2 id=\"redis主从复制的坑\">redis主从复制的坑</h2>\n<p updated=\"20220722161128\">　　redis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。</p>\n<p updated=\"20220722161128\">　　redis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。</p>\n<p updated=\"20220722161128\">　　如果此时redis master节点宕机从节点复制失败，为保证集群可用性，会进行主备切换，slave变为了redis master。B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。另外如果主从复制延迟同样也会造成加锁和解锁延迟的问题。</p>\n<p updated=\"20220722161128\">　　此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。</p>\n<p updated=\"20220722161128\">　　至于解决办法嘛，目前看还没有什么根治的方法，只能尽量保证机器的稳定性，减少发生此事件的概率,即便是redis作者也没有特别完美的解决这个问题</p>\n<h1 id=\"哨兵模式\">哨兵模式</h1>\n<p updated=\"20220722161128\">　　第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p>\n<p updated=\"20220722161128\">　　哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，<strong>哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例</strong>。</p>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022808580.png\" alt=\"单哨兵\" /></span></p>\n<h2 id=\"哨兵模式的作用\">哨兵模式的作用</h2>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-9454swa\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；</p>\n</li>\n<li id=\"20220722161128-5xwntgb\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机；</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://segmentfault.com/img/remote/1460000022808582\" alt=\"多哨兵\" /></span></p>\n<h2 id=\"故障切换的过程\">故障切换的过程</h2>\n<p updated=\"20220722161128\">　　假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p>\n<h2 id=\"哨兵模式的工作方式-\">哨兵模式的工作方式：</h2>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-svwx7kg\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</p>\n</li>\n<li id=\"20220722161128-wftvr96\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）</p>\n</li>\n<li id=\"20220722161128-577xeo9\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态</p>\n</li>\n<li id=\"20220722161128-bf7ix6h\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）</p>\n</li>\n<li id=\"20220722161128-k5rpqgt\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。</p>\n</li>\n<li id=\"20220722161128-mcedtqj\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</p>\n</li>\n<li id=\"20220722161128-sliwcr0\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</p>\n</li>\n</ul>\n<h2 id=\"哨兵模式的优缺点\">哨兵模式的优缺点</h2>\n<p updated=\"20220722161128\">　　<strong>优点：</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-crzjuee\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</p>\n</li>\n<li id=\"20220722161128-ce2cwxa\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主从可以自动切换，系统更健壮，可用性更高(<strong>可以看作自动版的主从复制</strong>)。</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　<strong>缺点：</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-dg7kb47\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</p>\n</li>\n</ul>\n<h1 id=\"Cluster-集群模式-Redis官方-\">Cluster 集群模式（Redis官方）</h1>\n<p updated=\"20220722161128\">　　Redis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。</p>\n<p updated=\"20220722161128\">　　Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，<strong>也就是说每台 Redis 节点上存储不同的内容</strong>。</p>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022808584.png\" alt=\"image-20200531184321294\" /></span></p>\n<p updated=\"20220722161128\">　　在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。</p>\n<h2 id=\"集群的数据分片\">集群的数据分片</h2>\n<p updated=\"20220722161128\">　　Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。</p>\n<p updated=\"20220722161128\">　　Redis 集群有16384 个哈希槽，每个 key 通过+693</p>\n<p updated=\"20220722161128\">　　对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：</p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-8getcpl\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点 A 包含 0 到 5460 号哈希槽</p>\n</li>\n<li id=\"20220722161128-d8qyphh\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点 B 包含 5461 到 10922 号哈希槽</p>\n</li>\n<li id=\"20220722161128-9q80z8n\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点 C 包含 10923 到 16383 号哈希槽</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。</p>\n<p updated=\"20220722161128\">　　在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p>\n<h2 id=\"Redis-集群的主从复制模型\">Redis 集群的主从复制模型</h2>\n<p updated=\"20220722161128\">　　为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。</p>\n<h2 id=\"集群的特点\">集群的特点</h2>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-9h3azqf\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</p>\n</li>\n<li id=\"20220722161128-sgxdea6\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</p>\n</li>\n<li id=\"20220722161128-eah0mr9\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　来源: https://segmentfault.com/a/1190000022808576</p>\n","articleNode":{"field":{"contentType":"topic","topic":"redis"},"frontmatter":{"id":"/topic/redis/Redis集群","title":"Redis集群","date":"2022-04-28 14:17","absolute_path":"/topic/redis/Redis集群"},"htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"三种集群方案"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主从复制模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"哨兵模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Cluster 模式"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"主从复制模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/image-20210920222454496.png","alt":"image-20210920222454496"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　为此， "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"引入主从复制机制的目的有两个"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"一个是读写分离，分担 \"master\" 的读写压力"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"一个是方便做容灾恢复"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"主从复制优点"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"主从复制缺点"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"也就是要人工介入"}]},{"type":"text","value":"）；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"原理"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["mermaid"],"dataProcessed":"true"},"children":[{"type":"element","tagName":"svg","properties":{"id":"mermaid-1658477522967","width":"100%","xmlns":"http://www.w3.org/2000/svg","height":"730","style":"max-width: 511px;","viewBox":"-50 -10 511 730"},"children":[{"type":"element","tagName":"style","properties":{},"children":[{"type":"text","value":"#mermaid-1658477522967 {font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1658477522967 .error-icon{fill:#552222;}#mermaid-1658477522967 .error-text{fill:#552222;stroke:#552222;}#mermaid-1658477522967 .edge-thickness-normal{stroke-width:2px;}#mermaid-1658477522967 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1658477522967 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1658477522967 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1658477522967 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1658477522967 .marker{fill:#333333;stroke:#333333;}#mermaid-1658477522967 .marker.cross{stroke:#333333;}#mermaid-1658477522967 svg{font-family:\"trebuchet ms\",verdana,arial,sans-serif;font-size:16px;}#mermaid-1658477522967 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1658477522967 text.actor>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .actor-line{stroke:grey;}#mermaid-1658477522967 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-1658477522967 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-1658477522967 #arrowhead path{fill:#333;stroke:#333;}#mermaid-1658477522967 .sequenceNumber{fill:white;}#mermaid-1658477522967 #sequencenumber{fill:#333;}#mermaid-1658477522967 #crosshead path{fill:#333;stroke:#333;}#mermaid-1658477522967 .messageText{fill:#333;stroke:#333;}#mermaid-1658477522967 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1658477522967 .labelText,#mermaid-1658477522967 .labelText>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .loopText,#mermaid-1658477522967 .loopText>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1658477522967 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-1658477522967 .noteText,#mermaid-1658477522967 .noteText>tspan{fill:black;stroke:none;}#mermaid-1658477522967 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-1658477522967 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-1658477522967 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-1658477522967 .actorPopupMenu{position:absolute;}#mermaid-1658477522967 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-1658477522967 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1658477522967 .actor-man circle,#mermaid-1658477522967 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-1658477522967 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}"}]},{"type":"element","tagName":"g","properties":{},"children":[]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"symbol","properties":{"id":"computer","width":"24","height":"24"},"children":[{"type":"element","tagName":"path","properties":{"transform":"scale(.5)","d":"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"symbol","properties":{"id":"database","fillRule":"evenodd","clipRule":"evenodd"},"children":[{"type":"element","tagName":"path","properties":{"transform":"scale(.5)","d":"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"symbol","properties":{"id":"clock","width":"24","height":"24"},"children":[{"type":"element","tagName":"path","properties":{"transform":"scale(.5)","d":"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z"},"children":[]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"line","properties":{"id":"actor0","x1":"75","y1":"5","x2":"75","y2":"664","className":["200"],"strokeWidth":"0.5px","stroke":"#999"},"children":[]},{"type":"element","tagName":"g","properties":{"id":"root-0"},"children":[{"type":"element","tagName":"rect","properties":{"x":"0","y":"0","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"32.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"75","dy":"0"},"children":[{"type":"text","value":"从服务器"}]}]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"line","properties":{"id":"actor1","x1":"275","y1":"5","x2":"275","y2":"664","className":["200"],"strokeWidth":"0.5px","stroke":"#999"},"children":[]},{"type":"element","tagName":"g","properties":{"id":"root-1"},"children":[{"type":"element","tagName":"rect","properties":{"x":"200","y":"0","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"32.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"275","dy":"0"},"children":[{"type":"text","value":"主服务器"}]}]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"arrowhead","refX":"9","refY":"5","markerUnits":"userSpaceOnUse","markerWidth":"12","markerHeight":"12","orient":"auto"},"children":[{"type":"element","tagName":"path","properties":{"d":"M 0 0 L 10 5 L 0 10 z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"crosshead","markerWidth":"15","markerHeight":"8","orient":"auto","refX":"16","refY":"4"},"children":[{"type":"element","tagName":"path","properties":{"fill":"black","stroke":"#000000","strokeWidth":"1px","d":"M 9,2 V 6 L16,4 Z","style":"stroke-dasharray: 0, 0;"},"children":[]},{"type":"element","tagName":"path","properties":{"fill":"none","stroke":"#000000","strokeWidth":"1px","d":"M 0,1 L 6,7 M 6,1 L 0,7","style":"stroke-dasharray: 0, 0;"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"filled-head","refX":"18","refY":"7","markerWidth":"20","markerHeight":"28","orient":"auto"},"children":[{"type":"element","tagName":"path","properties":{"d":"M 18,7 L9,13 L14,7 L9,1 Z"},"children":[]}]}]},{"type":"element","tagName":"defs","properties":{},"children":[{"type":"element","tagName":"marker","properties":{"id":"sequencenumber","refX":"15","refY":"15","markerWidth":"60","markerHeight":"40","orient":"auto"},"children":[{"type":"element","tagName":"circle","properties":{"cx":"15","cy":"15","r":"6"},"children":[]}]}]},{"type":"element","tagName":"text","properties":{"x":"175","y":"80","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"SYNC请求"}]},{"type":"element","tagName":"line","properties":{"x1":"75","y1":"113","x2":"275","y2":"113","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"128","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"创建快照、缓冲快照生成期间的写命令"}]},{"type":"element","tagName":"path","properties":{"d":"M 275,161 C 335,151 335,191 275,181","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"175","y":"206","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"同步快照"}]},{"type":"element","tagName":"line","properties":{"x1":"275","y1":"239","x2":"75","y2":"239","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"254","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"载入、解析快照"}]},{"type":"element","tagName":"path","properties":{"d":"M 75,287 C 135,277 135,317 75,307","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"332","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"缓冲快照同步的写命令"}]},{"type":"element","tagName":"path","properties":{"d":"M 275,365 C 335,355 335,395 275,385","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"175","y":"410","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"同步写缓冲"}]},{"type":"element","tagName":"line","properties":{"x1":"275","y1":"443","x2":"75","y2":"443","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"458","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"载入缓冲"}]},{"type":"element","tagName":"path","properties":{"d":"M 75,491 C 135,481 135,521 75,511","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"text","properties":{"x":"175","y":"581","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["messageText"],"dy":"1em","style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"同步增量"}]},{"type":"element","tagName":"line","properties":{"x1":"275","y1":"614","x2":"75","y2":"614","className":["messageLine0"],"strokeWidth":"2","stroke":"none","markerEnd":"url(#arrowhead)","style":"fill: none;"},"children":[]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"line","properties":{"x1":"65","y1":"531","x2":"285","y2":"531","className":["loopLine"]},"children":[]},{"type":"element","tagName":"line","properties":{"x1":"285","y1":"531","x2":"285","y2":"624","className":["loopLine"]},"children":[]},{"type":"element","tagName":"line","properties":{"x1":"65","y1":"624","x2":"285","y2":"624","className":["loopLine"]},"children":[]},{"type":"element","tagName":"line","properties":{"x1":"65","y1":"531","x2":"65","y2":"624","className":["loopLine"]},"children":[]},{"type":"element","tagName":"polygon","properties":{"points":"65,531 115,531 115,544 106.6,551 65,551","className":["labelBox"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"90","y":"544","textAnchor":"middle","dominantBaseline":"middle","alignmentBaseline":"middle","className":["labelText"],"style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"text","value":"loop"}]},{"type":"element","tagName":"text","properties":{"x":"200","y":"549","textAnchor":"middle","className":["loopText"],"style":"font-family: \"trebuchet ms\", verdana, arial, sans-serif; font-size: 16px; font-weight: 400;"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"200"},"children":[{"type":"text","value":"[Healthcheck]"}]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"x":"0","y":"644","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"75","y":"676.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"75","dy":"0"},"children":[{"type":"text","value":"从服务器"}]}]}]},{"type":"element","tagName":"g","properties":{},"children":[{"type":"element","tagName":"rect","properties":{"x":"200","y":"644","fill":"#eaeaea","stroke":"#666","width":"150","height":"65","rx":"3","ry":"3","className":["actor"]},"children":[]},{"type":"element","tagName":"text","properties":{"x":"275","y":"676.5","dominantBaseline":"central","alignmentBaseline":"central","className":["actor"],"style":"text-anchor: middle; font-size: 14px; font-weight: 400; font-family: Open-Sans, \"sans-serif\";"},"children":[{"type":"element","tagName":"tspan","properties":{"x":"275","dy":"0"},"children":[{"type":"text","value":"主服务器"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从数据库启动成功后，连接主数据库，发送 SYNC 命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"从数据库初始化完成"}]},{"type":"text","value":"）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"从数据库初始化完成后的操作"}]},{"type":"text","value":"）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"redis主从复制的坑"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　redis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　redis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　如果此时redis master节点宕机从节点复制失败，为保证集群可用性，会进行主备切换，slave变为了redis master。B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。另外如果主从复制延迟同样也会造成加锁和解锁延迟的问题。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　至于解决办法嘛，目前看还没有什么根治的方法，只能尽量保证机器的稳定性，减少发生此事件的概率,即便是redis作者也没有特别完美的解决这个问题"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"哨兵模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022808580.png","alt":"单哨兵"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"哨兵模式的作用"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"发布订阅模式"}]},{"type":"text","value":"通知其他的从服务器，修改配置文件，让它们切换主机；"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://segmentfault.com/img/remote/1460000022808582","alt":"多哨兵"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"故障切换的过程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"主观下线"}]},{"type":"text","value":"。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"客观下线"}]},{"type":"text","value":"。这样对于客户端而言，一切都是透明的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"哨兵模式的工作方式："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"哨兵模式的优缺点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"优点："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"主从可以自动切换，系统更健壮，可用性更高("},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"可以看作自动版的主从复制"}]},{"type":"text","value":")。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"缺点："}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Cluster 集群模式（Redis官方）"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"也就是说每台 Redis 节点上存储不同的内容"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　"},{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/1460000022808584.png","alt":"image-20200531184321294"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"集群的数据分片"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　Redis 集群有16384 个哈希槽，每个 key 通过+693"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点 A 包含 0 到 5460 号哈希槽"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点 B 包含 5461 到 10922 号哈希槽"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点 C 包含 10923 到 16383 号哈希槽"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Redis 集群的主从复制模型"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"集群的特点"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"节点的 fail 是通过集群中超过半数的节点检测失效时才生效。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"　　来源: "},{"type":"element","tagName":"a","properties":{"href":"https://segmentfault.com/a/1190000022808576"},"children":[{"type":"text","value":"https://segmentfault.com/a/1190000022808576"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"style","properties":{"className":["grvsc-styles"]},"children":[{"type":"text","value":"\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n"}]}],"data":{"quirksMode":false}},"html":"<h1 id=\"三种集群方案\">三种集群方案</h1>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-rg7s1s6\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主从复制模式</p>\n</li>\n<li id=\"20220722161128-lyucuhn\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">哨兵模式</p>\n</li>\n<li id=\"20220722161128-grnr9fp\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Cluster 模式</p>\n</li>\n</ul>\n<h1 id=\"主从复制模式\">主从复制模式</h1>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/image-20210920222454496.png\" alt=\"image-20210920222454496\" /></span></p>\n<p updated=\"20220722161128\">　　通过持久化功能，Redis保证了即使在服务器重启的情况下也不会丢失（或少量丢失）数据，因为持久化会把内存中数据保存到硬盘上，重启会从硬盘上加载数据。 但是由于数据是存储在一台服务器上的，如果这台服务器出现硬盘故障等问题，也会导致数据丢失。</p>\n<p updated=\"20220722161128\">　　为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上，这样即使有一台服务器出现故障，其他服务器依然可以继续提供服务。</p>\n<p updated=\"20220722161128\">　　为此， <strong>Redis 提供了复制（replication）功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库上</strong>。</p>\n<p updated=\"20220722161128\">　　在复制的概念中，数据库分为两类，一类是主数据库（master），另一类是从数据库(slave）。主数据库可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库。而从数据库一般是只读的，并接受主数据库同步过来的数据。一个主数据库可以拥有多个从数据库，而一个从数据库只能拥有一个主数据库。</p>\n<p updated=\"20220722161128\">　　<strong>引入主从复制机制的目的有两个</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-h9f5blw\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">一个是读写分离，分担 &quot;master&quot; 的读写压力</p>\n</li>\n<li id=\"20220722161128-ykebx91\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">一个是方便做容灾恢复</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　<strong>主从复制优点</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-27tvkvw\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；</p>\n</li>\n<li id=\"20220722161128-w59jaqk\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；</p>\n</li>\n<li id=\"20220722161128-ov65pel\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；</p>\n</li>\n<li id=\"20220722161128-w31ayzn\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；</p>\n</li>\n<li id=\"20220722161128-zwzkugh\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　<strong>主从复制缺点</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-ph7a149\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（<strong>也就是要人工介入</strong>）；</p>\n</li>\n<li id=\"20220722161128-c6l56fq\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；</p>\n</li>\n<li id=\"20220722161128-ksf1k07\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。</p>\n</li>\n<li id=\"20220722161128-2i6ulnt\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂</p>\n</li>\n</ul>\n<h2 id=\"原理\">原理</h2>\n<div data-content=\"sequenceDiagram\n    participant 从服务器\n    participant 主服务器\n    从服务器-&gt;&gt;主服务器: SYNC请求\n    主服务器-&gt;&gt;主服务器: 创建快照、缓冲快照生成期间的写命令\n    主服务器-&gt;&gt;从服务器: 同步快照\n    从服务器-&gt;&gt;从服务器: 载入、解析快照\n    主服务器-&gt;&gt;主服务器: 缓冲快照同步的写命令\n    主服务器-&gt;&gt;从服务器: 同步写缓冲\n    从服务器-&gt;&gt;从服务器: 载入缓冲\n    loop Healthcheck\n        主服务器-&gt;&gt;从服务器: 同步增量\n    end\" data-subtype=\"mermaid\"><div spin=\"1\"></div></div>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-jnctbqd\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">从数据库启动成功后，连接主数据库，发送 SYNC 命令；</p>\n</li>\n<li id=\"20220722161128-0llv5di\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；</p>\n</li>\n<li id=\"20220722161128-cqq3arg\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；</p>\n</li>\n<li id=\"20220722161128-tauj531\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；</p>\n</li>\n<li id=\"20220722161128-55qb3gy\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；</p>\n</li>\n<li id=\"20220722161128-xvapkwg\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（<strong>从数据库初始化完成</strong>）</p>\n</li>\n<li id=\"20220722161128-la5ukoi\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（<strong>从数据库初始化完成后的操作</strong>）</p>\n</li>\n<li id=\"20220722161128-l0uhs5j\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。</p>\n</li>\n<li id=\"20220722161128-df9gr6n\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。</p>\n</li>\n</ul>\n<h2 id=\"redis主从复制的坑\">redis主从复制的坑</h2>\n<p updated=\"20220722161128\">　　redis高可用最常见的方案就是主从复制（master-slave），这种模式也给redis分布式锁挖了一坑。</p>\n<p updated=\"20220722161128\">　　redis cluster集群环境下，假如现在A客户端想要加锁，它会根据路由规则选择一台master节点写入key mylock，在加锁成功后，master节点会把key异步复制给对应的slave节点。</p>\n<p updated=\"20220722161128\">　　如果此时redis master节点宕机从节点复制失败，为保证集群可用性，会进行主备切换，slave变为了redis master。B客户端在新的master节点上加锁成功，而A客户端也以为自己还是成功加了锁的。另外如果主从复制延迟同样也会造成加锁和解锁延迟的问题。</p>\n<p updated=\"20220722161128\">　　此时就会导致同一时间内多个客户端对一个分布式锁完成了加锁，导致各种脏数据的产生。</p>\n<p updated=\"20220722161128\">　　至于解决办法嘛，目前看还没有什么根治的方法，只能尽量保证机器的稳定性，减少发生此事件的概率,即便是redis作者也没有特别完美的解决这个问题</p>\n<h1 id=\"哨兵模式\">哨兵模式</h1>\n<p updated=\"20220722161128\">　　第一种主从同步/复制的模式，当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p>\n<p updated=\"20220722161128\">　　哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，<strong>哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个 Redis 实例</strong>。</p>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022808580.png\" alt=\"单哨兵\" /></span></p>\n<h2 id=\"哨兵模式的作用\">哨兵模式的作用</h2>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-9454swa\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器；</p>\n</li>\n<li id=\"20220722161128-5xwntgb\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">当哨兵监测到 master 宕机，会自动将 slave 切换成 master ，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机；</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　然而一个哨兵进程对Redis服务器进行监控，也可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://segmentfault.com/img/remote/1460000022808582\" alt=\"多哨兵\" /></span></p>\n<h2 id=\"故障切换的过程\">故障切换的过程</h2>\n<p updated=\"20220722161128\">　　假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。这样对于客户端而言，一切都是透明的。</p>\n<h2 id=\"哨兵模式的工作方式-\">哨兵模式的工作方式：</h2>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-svwx7kg\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</p>\n</li>\n<li id=\"20220722161128-wftvr96\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）</p>\n</li>\n<li id=\"20220722161128-577xeo9\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态</p>\n</li>\n<li id=\"20220722161128-bf7ix6h\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）</p>\n</li>\n<li id=\"20220722161128-k5rpqgt\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。</p>\n</li>\n<li id=\"20220722161128-mcedtqj\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</p>\n</li>\n<li id=\"20220722161128-sliwcr0\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</p>\n</li>\n</ul>\n<h2 id=\"哨兵模式的优缺点\">哨兵模式的优缺点</h2>\n<p updated=\"20220722161128\">　　<strong>优点：</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-crzjuee\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。</p>\n</li>\n<li id=\"20220722161128-ce2cwxa\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">主从可以自动切换，系统更健壮，可用性更高(<strong>可以看作自动版的主从复制</strong>)。</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　<strong>缺点：</strong></p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-dg7kb47\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。</p>\n</li>\n</ul>\n<h1 id=\"Cluster-集群模式-Redis官方-\">Cluster 集群模式（Redis官方）</h1>\n<p updated=\"20220722161128\">　　Redis Cluster是一种服务器 Sharding 技术，3.0版本开始正式提供。</p>\n<p updated=\"20220722161128\">　　Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，<strong>也就是说每台 Redis 节点上存储不同的内容</strong>。</p>\n<p updated=\"20220722161128\">　　<span class=\"img\"><img src=\"https://www.shiyitopo.tech/uPic/1460000022808584.png\" alt=\"image-20200531184321294\" /></span></p>\n<p updated=\"20220722161128\">　　在这个图中，每一个蓝色的圈都代表着一个 redis 的服务器节点。它们任何两个节点之间都是相互连通的。客户端可以与任何一个节点相连接，然后就可以访问集群中的任何一个节点。对其进行存取和其他操作。</p>\n<h2 id=\"集群的数据分片\">集群的数据分片</h2>\n<p updated=\"20220722161128\">　　Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。</p>\n<p updated=\"20220722161128\">　　Redis 集群有16384 个哈希槽，每个 key 通过+693</p>\n<p updated=\"20220722161128\">　　对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：</p>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-8getcpl\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点 A 包含 0 到 5460 号哈希槽</p>\n</li>\n<li id=\"20220722161128-d8qyphh\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点 B 包含 5461 到 10922 号哈希槽</p>\n</li>\n<li id=\"20220722161128-9q80z8n\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点 C 包含 10923 到 16383 号哈希槽</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。</p>\n<p updated=\"20220722161128\">　　在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。</p>\n<h2 id=\"Redis-集群的主从复制模型\">Redis 集群的主从复制模型</h2>\n<p updated=\"20220722161128\">　　为了保证高可用，redis-cluster集群引入了主从复制模型，一个主节点对应一个或者多个从节点，当主节点宕机的时候，就会启用从节点。当其它主节点 ping 一个主节点 A 时，如果半数以上的主节点与 A 通信超时，那么认为主节点 A 宕机了。如果主节点 A 和它的从节点 A1 都宕机了，那么该集群就无法再提供服务了。</p>\n<h2 id=\"集群的特点\">集群的特点</h2>\n<ul updated=\"20220722161128\">\n<li id=\"20220722161128-9h3azqf\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">所有的 redis 节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</p>\n</li>\n<li id=\"20220722161128-sgxdea6\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</p>\n</li>\n<li id=\"20220722161128-eah0mr9\" updated=\"20220722161128\">\n<p updated=\"20220722161128\">客户端与 Redis 节点直连，不需要中间代理层.客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</p>\n</li>\n</ul>\n<p updated=\"20220722161128\">　　来源: https://segmentfault.com/a/1190000022808576</p>\n","headings":[{"depth":1,"value":"三种集群方案"},{"depth":1,"value":"主从复制模式"},{"depth":2,"value":"原理"},{"depth":2,"value":"redis主从复制的坑"},{"depth":1,"value":"哨兵模式"},{"depth":2,"value":"哨兵模式的作用"},{"depth":2,"value":"故障切换的过程"},{"depth":2,"value":"哨兵模式的工作方式："},{"depth":2,"value":"哨兵模式的优缺点"},{"depth":1,"value":"Cluster 集群模式（Redis官方）"},{"depth":2,"value":"集群的数据分片"},{"depth":2,"value":"Redis 集群的主从复制模型"},{"depth":2,"value":"集群的特点"}],"path":"/topic/redis/Redis集群"},"tree":{"title":"redis","id":"20220428141727-a3p03i0","parentId":"","href":"/topic/redis","path":"/topic/redis","children":[{"title":"Redis为什么这么快","id":"20220428141727-jbyo2wp","type":"d","href":"/topic/redis/Redis为什么这么快","parentId":"","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","sort":1,"children":[{"title":"完全基于内存","id":"20220428141727-m8thckv","type":"h","href":"/topic/redis/Redis为什么这么快#完全基于内存","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"数据结构简单","id":"20220428141727-0532nq9","type":"h","href":"/topic/redis/Redis为什么这么快#数据结构简单","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"工作线程采用单线程，避免了线程上下文切换所带来的损耗","id":"20220428141727-kw7bg9v","type":"h","href":"/topic/redis/Redis为什么这么快#工作线程采用单线程，避免了线程上下文切换所带来的损耗","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"对于客户端的连接采用多路复用和非阻塞I/O","id":"20220428141727-m7ruuk1","type":"h","href":"/topic/redis/Redis为什么这么快#对于客户端的连接采用多路复用和非阻塞I/O","parentId":"20220428141727-jbyo2wp","path":"/topic/redis/Redis为什么这么快","parentPath":"/topic/redis","children":[],"level":2},{"title":"redis单线程的问题","id":"20220428141728-w6wf4kq","type":"d","href":"/topic/redis/Redis为什么这么快/redis单线程的问题","parentId":"","path":"/topic/redis/Redis为什么这么快/redis单线程的问题","parentPath":"/topic/redis/Redis为什么这么快","sort":11,"children":[],"level":2}],"level":1},{"title":"Redis基本数据结构","id":"20220428141727-imsmasu","type":"d","href":"/topic/redis/Redis基本数据结构","parentId":"","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","sort":2,"children":[{"title":"常用的","id":"20220428141727-1gclyg6","type":"h","href":"/topic/redis/Redis基本数据结构#常用的","parentId":"20220428141727-imsmasu","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[{"title":"string","id":"20220428141727-u2m7nzt","type":"h","href":"/topic/redis/Redis基本数据结构#string","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"hash","id":"20220428141727-po0l8p4","type":"h","href":"/topic/redis/Redis基本数据结构#hash","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"list","id":"20220428141727-nyjx5v1","type":"h","href":"/topic/redis/Redis基本数据结构#list","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"set","id":"20220428141727-ujl3jkq","type":"h","href":"/topic/redis/Redis基本数据结构#set","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"zset","id":"20220428141727-8lh8dqt","type":"h","href":"/topic/redis/Redis基本数据结构#zset","parentId":"20220428141727-1gclyg6","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"扩展结构","id":"20220428141727-9xu8ei1","type":"h","href":"/topic/redis/Redis基本数据结构#扩展结构","parentId":"20220428141727-imsmasu","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[{"title":"bitmap","id":"20220428141727-89gt7iy","type":"h","href":"/topic/redis/Redis基本数据结构#bitmap","parentId":"20220428141727-9xu8ei1","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"hyperloglog","id":"20220428141727-08upaib","type":"h","href":"/topic/redis/Redis基本数据结构#hyperloglog","parentId":"20220428141727-9xu8ei1","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"GEO","id":"20220428141727-6z03dvm","type":"h","href":"/topic/redis/Redis基本数据结构#GEO","parentId":"20220428141727-9xu8ei1","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"扩展功能","id":"20220428141727-x5n4s7y","type":"h","href":"/topic/redis/Redis基本数据结构#扩展功能","parentId":"20220428141727-imsmasu","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[{"title":"pub/sub","id":"20220428141727-zay76x9","type":"h","href":"/topic/redis/Redis基本数据结构#pub/sub","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"pipeline","id":"20220428141727-m3750uw","type":"h","href":"/topic/redis/Redis基本数据结构#pipeline","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"Lua 脚本","id":"20220428141727-6rc0qt7","type":"h","href":"/topic/redis/Redis基本数据结构#Lua 脚本","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3},{"title":"事务","id":"20220428141727-8i9gpxn","type":"h","href":"/topic/redis/Redis基本数据结构#事务","parentId":"20220428141727-x5n4s7y","path":"/topic/redis/Redis基本数据结构","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"String的底层实现","id":"20220428141728-d2hmuxd","type":"d","href":"/topic/redis/Redis基本数据结构/String的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":1,"children":[{"title":"SDS 结构","id":"20220428141728-y2039os","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#SDS 结构","parentId":"20220428141728-d2hmuxd","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3},{"title":"相对于C语言的优势","id":"20220428141728-8t63ohh","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#相对于C语言的优势","parentId":"20220428141728-d2hmuxd","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[{"title":"统计长度时间复杂度 O(1)","id":"20220428141728-xeqpgol","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#统计长度时间复杂度 O(1)","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4},{"title":"数据溢出","id":"20220428141728-coew455","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#数据溢出","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4},{"title":"内存重分配策略","id":"20220428141728-mbwnou1","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#内存重分配策略","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4},{"title":"数据格式多样性","id":"20220428141728-5h2se0u","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#数据格式多样性","parentId":"20220428141728-8t63ohh","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4}],"level":3},{"title":"三大编码","id":"20220428141728-t4votze","type":"h","href":"/topic/redis/Redis基本数据结构/String的底层实现#三大编码","parentId":"20220428141728-d2hmuxd","path":"/topic/redis/Redis基本数据结构/String的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3}],"level":2},{"title":"List的底层实现","id":"20220428141727-skh553t","type":"d","href":"/topic/redis/Redis基本数据结构/List的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/List的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":2,"children":[],"level":2},{"title":"Hash的底层实现","id":"20220428141727-g51ewzt","type":"d","href":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":3,"children":[{"title":"ZipList编码的哈希对象","id":"20220428141727-fo8pixs","type":"h","href":"/topic/redis/Redis基本数据结构/Hash的底层实现#ZipList编码的哈希对象","parentId":"20220428141727-g51ewzt","path":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3},{"title":"hashtable对象","id":"20220428141727-f7zok8f","type":"h","href":"/topic/redis/Redis基本数据结构/Hash的底层实现#hashtable对象","parentId":"20220428141727-g51ewzt","path":"/topic/redis/Redis基本数据结构/Hash的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":3}],"level":2},{"title":"Set的底层实现","id":"20220428141728-5c6e914","type":"d","href":"/topic/redis/Redis基本数据结构/Set的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/Set的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":4,"children":[],"level":2},{"title":"ZSet的底层实现","id":"20220428141728-58eined","type":"d","href":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentId":"","path":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentPath":"/topic/redis/Redis基本数据结构","sort":5,"children":[{"title":"跳表是什么?","id":"20220428141728-9by553n","type":"h","href":"/topic/redis/Redis基本数据结构/ZSet的底层实现#跳表是什么?","parentId":"20220428141728-58eined","path":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[{"title":"优缺点","id":"20220428141728-rvbr2il","type":"h","href":"/topic/redis/Redis基本数据结构/ZSet的底层实现#优缺点","parentId":"20220428141728-9by553n","path":"/topic/redis/Redis基本数据结构/ZSet的底层实现","parentPath":"/topic/redis/Redis基本数据结构","children":[],"level":4}],"level":3}],"level":2}],"level":1},{"title":"Redis分布式缓存","id":"20220428141727-3x1i5zp","type":"d","href":"/topic/redis/Redis分布式缓存","parentId":"","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","sort":3,"children":[{"title":"双写一致性","id":"20220428141727-zahxna7","type":"h","href":"/topic/redis/Redis分布式缓存#双写一致性","parentId":"20220428141727-3x1i5zp","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":2},{"title":"缓存更新策略","id":"20220428141727-iqgn80l","type":"h","href":"/topic/redis/Redis分布式缓存#缓存更新策略","parentId":"20220428141727-3x1i5zp","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"最常见的策略","id":"20220428141727-45wxv7a","type":"h","href":"/topic/redis/Redis分布式缓存#最常见的策略","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"优点剖析","id":"20220428141727-tfanvhu","type":"h","href":"/topic/redis/Redis分布式缓存#优点剖析","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"1. “先淘汰缓存，再写数据库” 合理","id":"20220428141727-vzyp7bi","type":"h","href":"/topic/redis/Redis分布式缓存#1. “先淘汰缓存，再写数据库” 合理","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"2. 异步刷新，补缺补漏","id":"20220428141727-kbueoxr","type":"h","href":"/topic/redis/Redis分布式缓存#2. 异步刷新，补缺补漏","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"缺点剖析","id":"20220428141727-sd1lbh3","type":"h","href":"/topic/redis/Redis分布式缓存#缺点剖析","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"1. 容灾不足","id":"20220428141727-aff14q4","type":"h","href":"/topic/redis/Redis分布式缓存#1. 容灾不足","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"2. 并发问题","id":"20220428141727-7kjhtfn","type":"h","href":"/topic/redis/Redis分布式缓存#2. 并发问题","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"方案总结","id":"20220428141727-5w2loli","type":"h","href":"/topic/redis/Redis分布式缓存#方案总结","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"写流程：","id":"20220428141727-s959uv0","type":"h","href":"/topic/redis/Redis分布式缓存#写流程：","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"读流程：","id":"20220428141727-sceljri","type":"h","href":"/topic/redis/Redis分布式缓存#读流程：","parentId":"20220428141727-45wxv7a","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4}],"level":3},{"title":"方案分析","id":"20220428141727-7flpl0m","type":"h","href":"/topic/redis/Redis分布式缓存#方案分析","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"优点剖析","id":"20220428141727-1cqjx66","type":"h","href":"/topic/redis/Redis分布式缓存#优点剖析","parentId":"20220428141727-7flpl0m","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 容灾","id":"20220428141727-w9bvsqf","type":"h","href":"/topic/redis/Redis分布式缓存#1. 容灾","parentId":"20220428141727-1cqjx66","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4},{"title":"缺点剖析","id":"20220428141727-n1twxfd","type":"h","href":"/topic/redis/Redis分布式缓存#缺点剖析","parentId":"20220428141727-7flpl0m","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 只适合简单业务，复杂业务容易发生并发问题","id":"20220428141727-t5kobxh","type":"h","href":"/topic/redis/Redis分布式缓存#1. 只适合简单业务，复杂业务容易发生并发问题","parentId":"20220428141727-n1twxfd","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"缺点1的改进","id":"20220428141727-bz5ta88","type":"h","href":"/topic/redis/Redis分布式缓存#缺点1的改进","parentId":"20220428141727-t5kobxh","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":6}],"level":5},{"title":"2. 依然是并发问题","id":"20220428141727-gysgmg1","type":"h","href":"/topic/redis/Redis分布式缓存#2. 依然是并发问题","parentId":"20220428141727-n1twxfd","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4}],"level":3},{"title":"方案总结","id":"20220428141727-01sdgjy","type":"h","href":"/topic/redis/Redis分布式缓存#方案总结","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"写流程：","id":"20220428141727-eglmgkf","type":"h","href":"/topic/redis/Redis分布式缓存#写流程：","parentId":"20220428141727-01sdgjy","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4},{"title":"读流程：","id":"20220428141727-1vywbk4","type":"h","href":"/topic/redis/Redis分布式缓存#读流程：","parentId":"20220428141727-01sdgjy","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":4}],"level":3},{"title":"方案分析","id":"20220428141727-137lw2k","type":"h","href":"/topic/redis/Redis分布式缓存#方案分析","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"优点剖析","id":"20220428141727-p0zad1o","type":"h","href":"/topic/redis/Redis分布式缓存#优点剖析","parentId":"20220428141727-137lw2k","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 容灾完善","id":"20220428141727-cawius6","type":"h","href":"/topic/redis/Redis分布式缓存#1. 容灾完善","parentId":"20220428141727-p0zad1o","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"写流程容灾分析","id":"20220428141727-2d2z7fz","type":"h","href":"/topic/redis/Redis分布式缓存#写流程容灾分析","parentId":"20220428141727-cawius6","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":6},{"title":"读流程容灾分析","id":"20220428141727-4hr5okn","type":"h","href":"/topic/redis/Redis分布式缓存#读流程容灾分析","parentId":"20220428141727-cawius6","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":6}],"level":5},{"title":"2. 无并发问题","id":"20220428141727-uvwj2ga","type":"h","href":"/topic/redis/Redis分布式缓存#2. 无并发问题","parentId":"20220428141727-p0zad1o","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4},{"title":"缺点剖析","id":"20220428141727-fmiz5zl","type":"h","href":"/topic/redis/Redis分布式缓存#缺点剖析","parentId":"20220428141727-137lw2k","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[{"title":"1. 增加Cache_0强依赖","id":"20220428141727-hr6lxu9","type":"h","href":"/topic/redis/Redis分布式缓存#1. 增加Cache_0强依赖","parentId":"20220428141727-fmiz5zl","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5},{"title":"2. 复杂度是比较高的","id":"20220428141727-vbiftey","type":"h","href":"/topic/redis/Redis分布式缓存#2. 复杂度是比较高的","parentId":"20220428141727-fmiz5zl","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":5}],"level":4}],"level":3},{"title":"方案总结","id":"20220428141727-0an20z6","type":"h","href":"/topic/redis/Redis分布式缓存#方案总结","parentId":"20220428141727-iqgn80l","path":"/topic/redis/Redis分布式缓存","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"缓存击穿","id":"20220428141728-p93afgy","type":"d","href":"/topic/redis/Redis分布式缓存/缓存击穿","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","sort":1,"children":[{"title":"解决方案","id":"20220428141728-27esyuz","type":"h","href":"/topic/redis/Redis分布式缓存/缓存击穿#解决方案","parentId":"20220428141728-p93afgy","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","children":[{"title":"不过期","id":"20220428141728-foxjedm","type":"h","href":"/topic/redis/Redis分布式缓存/缓存击穿#不过期","parentId":"20220428141728-27esyuz","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":4},{"title":"互斥锁","id":"20220428141728-68zg08m","type":"h","href":"/topic/redis/Redis分布式缓存/缓存击穿#互斥锁","parentId":"20220428141728-27esyuz","path":"/topic/redis/Redis分布式缓存/缓存击穿","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":4}],"level":3}],"level":2},{"title":"缓存穿透","id":"20220428141728-64iljj5","type":"d","href":"/topic/redis/Redis分布式缓存/缓存穿透","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","sort":3,"children":[{"title":"接口校验","id":"20220428141728-wny00tb","type":"h","href":"/topic/redis/Redis分布式缓存/缓存穿透#接口校验","parentId":"20220428141728-64iljj5","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":3},{"title":"空对象缓存或者缺省值","id":"20220428141728-6wjc642","type":"h","href":"/topic/redis/Redis分布式缓存/缓存穿透#空对象缓存或者缺省值","parentId":"20220428141728-64iljj5","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":3},{"title":"布隆过滤器","id":"20220428141728-r9yad28","type":"h","href":"/topic/redis/Redis分布式缓存/缓存穿透#布隆过滤器","parentId":"20220428141728-64iljj5","path":"/topic/redis/Redis分布式缓存/缓存穿透","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":3}],"level":2},{"title":"缓存雪崩","id":"20220428141728-9ti4duq","type":"d","href":"/topic/redis/Redis分布式缓存/缓存雪崩","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存雪崩","parentPath":"/topic/redis/Redis分布式缓存","sort":4,"children":[{"title":"解决方案","id":"20220428141728-zu9jxq3","type":"h","href":"/topic/redis/Redis分布式缓存/缓存雪崩#解决方案","parentId":"20220428141728-9ti4duq","path":"/topic/redis/Redis分布式缓存/缓存雪崩","parentPath":"/topic/redis/Redis分布式缓存","children":[{"title":"三步骤","id":"20220428141728-0vnf8gp","type":"h","href":"/topic/redis/Redis分布式缓存/缓存雪崩#三步骤","parentId":"20220428141728-zu9jxq3","path":"/topic/redis/Redis分布式缓存/缓存雪崩","parentPath":"/topic/redis/Redis分布式缓存","children":[],"level":4}],"level":3}],"level":2},{"title":"缓存预热","id":"20220428141728-fz10tn2","type":"d","href":"/topic/redis/Redis分布式缓存/缓存预热","parentId":"","path":"/topic/redis/Redis分布式缓存/缓存预热","parentPath":"/topic/redis/Redis分布式缓存","sort":7,"children":[],"level":2}],"level":1},{"title":"Redis的分布式锁","id":"20220428141727-sgydg0x","type":"d","href":"/topic/redis/Redis的分布式锁","parentId":"","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","sort":4,"children":[{"title":"利用redis实现分布式锁","id":"20220428141727-e4nwnv1","type":"h","href":"/topic/redis/Redis的分布式锁#利用redis实现分布式锁","parentId":"20220428141727-sgydg0x","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[{"title":"三个重要因素","id":"20220428141727-zthzzjq","type":"h","href":"/topic/redis/Redis的分布式锁#三个重要因素","parentId":"20220428141727-e4nwnv1","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3},{"title":"涉及命令","id":"20220428141727-hs1yg88","type":"h","href":"/topic/redis/Redis的分布式锁#涉及命令","parentId":"20220428141727-e4nwnv1","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"实现思想","id":"20220428141727-5jo3h6s","type":"h","href":"/topic/redis/Redis的分布式锁#实现思想","parentId":"20220428141727-sgydg0x","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[{"title":"业务执行的时间大于redis锁过期的时间","id":"20220428141727-q83o36l","type":"h","href":"/topic/redis/Redis的分布式锁#业务执行的时间大于redis锁过期的时间","parentId":"20220428141727-5jo3h6s","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3},{"title":"redis部署模式的影响","id":"20220428141727-9xczwbf","type":"h","href":"/topic/redis/Redis的分布式锁#redis部署模式的影响","parentId":"20220428141727-5jo3h6s","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3},{"title":"原子性问题","id":"20220428141727-u4jomll","type":"h","href":"/topic/redis/Redis的分布式锁#原子性问题","parentId":"20220428141727-5jo3h6s","path":"/topic/redis/Redis的分布式锁","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"看门狗模式","id":"20220428141728-gdeeql2","type":"d","href":"/topic/redis/Redis的分布式锁/看门狗模式","parentId":"","path":"/topic/redis/Redis的分布式锁/看门狗模式","parentPath":"/topic/redis/Redis的分布式锁","sort":1,"children":[],"level":2},{"title":"Redlock","id":"20220428141728-qbzn1tc","type":"d","href":"/topic/redis/Redis的分布式锁/Redlock","parentId":"","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","sort":2,"children":[{"title":"问题1","id":"20220428141728-lg0r797","type":"h","href":"/topic/redis/Redis的分布式锁/Redlock#问题1","parentId":"20220428141728-qbzn1tc","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","children":[],"level":3},{"title":"问题2","id":"20220428141728-nhr8fen","type":"h","href":"/topic/redis/Redis的分布式锁/Redlock#问题2","parentId":"20220428141728-qbzn1tc","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","children":[],"level":3},{"title":"问题3","id":"20220428141728-5jc3ave","type":"h","href":"/topic/redis/Redis的分布式锁/Redlock#问题3","parentId":"20220428141728-qbzn1tc","path":"/topic/redis/Redis的分布式锁/Redlock","parentPath":"/topic/redis/Redis的分布式锁","children":[],"level":3}],"level":2}],"level":1},{"title":"Redis集群","id":"20220428141727-awm7yu5","type":"d","href":"/topic/redis/Redis集群","parentId":"","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","sort":6,"children":[{"title":"三种集群方案","id":"20220428141727-id6w37y","type":"h","href":"/topic/redis/Redis集群#三种集群方案","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":2},{"title":"主从复制模式","id":"20220428141727-01yokji","type":"h","href":"/topic/redis/Redis集群#主从复制模式","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[{"title":"原理","id":"20220428141727-2xgqon2","type":"h","href":"/topic/redis/Redis集群#原理","parentId":"20220428141727-01yokji","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"redis主从复制的坑","id":"20220428141727-h04f0fa","type":"h","href":"/topic/redis/Redis集群#redis主从复制的坑","parentId":"20220428141727-01yokji","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"哨兵模式","id":"20220428141727-jxcatge","type":"h","href":"/topic/redis/Redis集群#哨兵模式","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[{"title":"哨兵模式的作用","id":"20220428141727-3jb6vil","type":"h","href":"/topic/redis/Redis集群#哨兵模式的作用","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"故障切换的过程","id":"20220428141727-uscl9hh","type":"h","href":"/topic/redis/Redis集群#故障切换的过程","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"哨兵模式的工作方式：","id":"20220428141727-fe5liq6","type":"h","href":"/topic/redis/Redis集群#哨兵模式的工作方式：","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"哨兵模式的优缺点","id":"20220428141727-fq18erp","type":"h","href":"/topic/redis/Redis集群#哨兵模式的优缺点","parentId":"20220428141727-jxcatge","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"Cluster 集群模式（Redis官方）","id":"20220428141727-z0udk1o","type":"h","href":"/topic/redis/Redis集群#Cluster 集群模式（Redis官方）","parentId":"20220428141727-awm7yu5","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[{"title":"集群的数据分片","id":"20220428141727-zez6jhc","type":"h","href":"/topic/redis/Redis集群#集群的数据分片","parentId":"20220428141727-z0udk1o","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"Redis 集群的主从复制模型","id":"20220428141727-guu9h2l","type":"h","href":"/topic/redis/Redis集群#Redis 集群的主从复制模型","parentId":"20220428141727-z0udk1o","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3},{"title":"集群的特点","id":"20220428141727-a9a9ogo","type":"h","href":"/topic/redis/Redis集群#集群的特点","parentId":"20220428141727-z0udk1o","path":"/topic/redis/Redis集群","parentPath":"/topic/redis","children":[],"level":3}],"level":2},{"title":"Redis数据淘汰策略","id":"20220428141727-oaw8wmd","type":"d","href":"/topic/redis/Redis集群/Redis数据淘汰策略","parentId":"","path":"/topic/redis/Redis集群/Redis数据淘汰策略","parentPath":"/topic/redis/Redis集群","sort":5,"children":[{"title":"Redis的内存淘汰策略，有以下几种","id":"20220428141727-aort8cn","type":"h","href":"/topic/redis/Redis集群/Redis数据淘汰策略#Redis的内存淘汰策略，有以下几种","parentId":"20220428141727-oaw8wmd","path":"/topic/redis/Redis集群/Redis数据淘汰策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据","id":"20220428141727-egla613","type":"h","href":"/topic/redis/Redis集群/Redis数据淘汰策略#数据库中有 3000w 的数据，而 Redis 中只有 100w 数据，如何保证 Redis 中存放的都是热点数据","parentId":"20220428141727-oaw8wmd","path":"/topic/redis/Redis集群/Redis数据淘汰策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3}],"level":2},{"title":"redis持久化","id":"20220428141728-ahu8hnn","type":"d","href":"/topic/redis/Redis集群/redis持久化","parentId":"","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","sort":8,"children":[{"title":"策略","id":"20220428141728-h8spnbe","type":"h","href":"/topic/redis/Redis集群/redis持久化#策略","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"AOF持久化","id":"20220428141728-8sb3e90","type":"h","href":"/topic/redis/Redis集群/redis持久化#AOF持久化","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"执行流程","id":"20220428141728-xdy9wq3","type":"h","href":"/topic/redis/Redis集群/redis持久化#执行流程","parentId":"20220428141728-8sb3e90","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"怎么防止AOF文件越来越大？","id":"20220428141728-2fjjnsi","type":"h","href":"/topic/redis/Redis集群/redis持久化#怎么防止AOF文件越来越大？","parentId":"20220428141728-8sb3e90","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"AOF文件追加阻塞？","id":"20220428141728-jggnla6","type":"h","href":"/topic/redis/Redis集群/redis持久化#AOF文件追加阻塞？","parentId":"20220428141728-2fjjnsi","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":5}],"level":4}],"level":3},{"title":"RDB持久化","id":"20220428141728-3uk1dzb","type":"h","href":"/topic/redis/Redis集群/redis持久化#RDB持久化","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"执行流程","id":"20220428141728-b6xujxs","type":"h","href":"/topic/redis/Redis集群/redis持久化#执行流程","parentId":"20220428141728-3uk1dzb","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3},{"title":"混合持久化（Redis4.0+）","id":"20220428141728-z9bdsb4","type":"h","href":"/topic/redis/Redis集群/redis持久化#混合持久化（Redis4.0+）","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"执行流程","id":"20220428141728-flzi42f","type":"h","href":"/topic/redis/Redis集群/redis持久化#执行流程","parentId":"20220428141728-z9bdsb4","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3},{"title":"Redis的数据恢复策略","id":"20220428141728-x9y47t6","type":"h","href":"/topic/redis/Redis集群/redis持久化#Redis的数据恢复策略","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"Redis持久化策略该如何进行选择","id":"20220428141728-54y3bdq","type":"h","href":"/topic/redis/Redis集群/redis持久化#Redis持久化策略该如何进行选择","parentId":"20220428141728-ahu8hnn","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"1.不需要考虑数据丢失的情况","id":"20220428141728-ujbrmwt","type":"h","href":"/topic/redis/Redis集群/redis持久化#1.不需要考虑数据丢失的情况","parentId":"20220428141728-54y3bdq","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"2.单机实例情况下","id":"20220428141728-zahznfw","type":"h","href":"/topic/redis/Redis集群/redis持久化#2.单机实例情况下","parentId":"20220428141728-54y3bdq","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"3.在主从环境下","id":"20220428141728-jbd8vij","type":"h","href":"/topic/redis/Redis集群/redis持久化#3.在主从环境下","parentId":"20220428141728-54y3bdq","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[{"title":"那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？","id":"20220428141728-sjs8krt","type":"h","href":"/topic/redis/Redis集群/redis持久化#那么在从服务器进行数据热备份的情况下，是否还需要持久化呢？","parentId":"20220428141728-jbd8vij","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":5},{"title":"4.异地灾备","id":"20220428141728-aryf17w","type":"h","href":"/topic/redis/Redis集群/redis持久化#4.异地灾备","parentId":"20220428141728-jbd8vij","path":"/topic/redis/Redis集群/redis持久化","parentPath":"/topic/redis/Redis集群","children":[],"level":5}],"level":4}],"level":3}],"level":2},{"title":"Redis数据删除策略","id":"20220428141727-pvzi1zo","type":"d","href":"/topic/redis/Redis集群/Redis数据删除策略","parentId":"","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","sort":13,"children":[{"title":"惰性删除","id":"20220428141727-o0rija8","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#惰性删除","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"定期删除","id":"20220428141727-wq9axfb","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#定期删除","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":3},{"title":"AOF、RDB 和复制功能对过期键的处理","id":"20220428141727-gr8a4lk","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#AOF、RDB 和复制功能对过期键的处理","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[{"title":"RDB","id":"20220428141727-xhxrdyf","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#RDB","parentId":"20220428141727-gr8a4lk","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"AOF","id":"20220428141727-z7l5azb","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#AOF","parentId":"20220428141727-gr8a4lk","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"复制","id":"20220428141727-vdap5h4","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#复制","parentId":"20220428141727-gr8a4lk","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3},{"title":"疑问点？","id":"20220428141727-5x39avu","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#疑问点？","parentId":"20220428141727-pvzi1zo","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[{"title":"如果主从服务器链接断开怎么办？","id":"20220428141727-4505lb0","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#如果主从服务器链接断开怎么办？","parentId":"20220428141727-5x39avu","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4},{"title":"如果发生网络抖动，主服务器发送的 del 命令没有传递到从服务器怎么办？","id":"20220428141727-4x9rpfk","type":"h","href":"/topic/redis/Redis集群/Redis数据删除策略#如果发生网络抖动，主服务器发送的 del 命令没有传递到从服务器怎么办？","parentId":"20220428141727-5x39avu","path":"/topic/redis/Redis集群/Redis数据删除策略","parentPath":"/topic/redis/Redis集群","children":[],"level":4}],"level":3}],"level":2}],"level":1}],"level":0},"headings":[{"depth":1,"value":"三种集群方案","slug":"三种集群方案"},{"depth":1,"value":"主从复制模式","slug":"主从复制模式"},{"depth":2,"value":"原理","slug":"原理"},{"depth":2,"value":"redis主从复制的坑","slug":"redis主从复制的坑"},{"depth":1,"value":"哨兵模式","slug":"哨兵模式"},{"depth":2,"value":"哨兵模式的作用","slug":"哨兵模式的作用"},{"depth":2,"value":"故障切换的过程","slug":"故障切换的过程"},{"depth":2,"value":"哨兵模式的工作方式：","slug":"哨兵模式的工作方式"},{"depth":2,"value":"哨兵模式的优缺点","slug":"哨兵模式的优缺点"},{"depth":1,"value":"Cluster 集群模式（Redis官方）","slug":"cluster-集群模式redis官方"},{"depth":2,"value":"集群的数据分片","slug":"集群的数据分片"},{"depth":2,"value":"Redis 集群的主从复制模型","slug":"redis-集群的主从复制模型"},{"depth":2,"value":"集群的特点","slug":"集群的特点"}]}},
    "staticQueryHashes": ["630634786","928362550"]}