{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁",
    "result": {"pageContext":{"id":"/topic/Java并发工具包/并发工具/各种锁/锁的种类和特点/共享锁独占锁","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"共享锁独占锁"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"最能够诠释共享锁和独占锁的，就是"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"读写锁"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"读写锁"}]},{"type":"text","value":"的特点是，多线程读取时共享同一把锁，多线程写入时必须拿到独占的锁才能够进行写入。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"读写锁"}]},{"type":"text","value":"提升了在某些读多写少的情况下的性能，试想一下，如果我们采用ReentrantLock来进行读写文件的操作，虽然能够保证了线程的安全，但是读取文件这种不会修改数据的操作也会对文件进行加锁，会造成资源的浪费。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"读写锁的规则"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果一个线程已经占用了读锁，那另一个线程申请读锁的时候，可以申请成功。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果一个线程已经占用了读锁，那么另一个线程申请写锁的时候，申请写锁的线程会等待读锁的释放，因为读写不能同时进行。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果一个线程已经占用了写锁，那么另一个无论是申请读锁还是写锁都需要等待持有写锁的线程释放锁，同样也因为读写不能同时，并且两个线程不应该同时写。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"总结"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"读读共享"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其他互斥"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"写写互斥"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"读写互斥"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"写读互斥"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"使用方式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"   public class ReadWriteLockDemo {\n    private ReadWriteLock readWriteLock = new ReentrantReadWriteLock(false);\n    private Lock readLock = readWriteLock.readLock();\n    private Lock writeLock = readWriteLock.writeLock();\n    public void read() {\n        readLock.lock();\n        try {\n            System.out.println(Thread.currentThread().getName() + \"得到读锁，正在读取\");\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            System.out.println(Thread.currentThread().getName() + \"释放读锁\");\n            readLock.unlock();\n        }\n    }\n    public void write() {\n        writeLock.lock();\n        try {\n            System.out.println(Thread.currentThread().getName() + \"得到写锁，正在写入\");\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            System.out.println(Thread.currentThread().getName() + \"释放写锁\");\n            writeLock.unlock();\n        }\n    }\n    public static void main(String[] args) {\n        ReadWriteLockDemo demo = new ReadWriteLockDemo();\n        new Thread(demo::read).start();\n        new Thread(demo::read).start();\n        new Thread(demo::write).start();\n        new Thread(demo::write).start();\n    }\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"运行结果:"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/2021-11-29-13-04-32-image.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"加锁原理分析"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/762a042b.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"写锁的加锁代码"}]},{"type":"text","value":":"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"protected final boolean tryAcquire(int acquires) {\n  /**\n   * 1. 如果读锁或者写锁的数量不为0，并且拥有锁的线程是其他的线程，\n   * 2. 如果锁的数量饱和，则返回失败\n   * 3. 如果这个线程有资格获得锁,重入或者队列允许，则更新状态并设置拥有者\n   */\n  Thread current = Thread.currentThread()q;\n  // 获取当前锁的个数\n  int c = getState();\n  // 获取写锁的个数\n  int w = exclusiveCount(c);\n  if (c != 0) {// 如果线程已经持有了锁(c != 0)\n    // (Note: if c != 0 and w == 0 then shared count != 0)\n    // 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败\n    if (w == 0 || current != getExclusiveOwnerThread())  \n      return false;\n    if (w + exclusiveCount(acquires) > MAX_COUNT)\n      // 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。\n      throw new Error(\"Maximum lock count exceeded\");\n    // Reentrant acquire\n    setState(c + acquires);\n    return true;\n  }\n  // 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；\n  // 或者如果通过CAS增加写线程数失败也返回失败。\n  if (writerShouldBlock() ||\n      !compareAndSetState(c, c + acquires))\n    return false;\n  setExclusiveOwnerThread(current);\n  return true;\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"读锁的加锁代码:"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"\tprotected final int tryAcquireShared(int unused) {\n    \t\t\t\t/**\n    \t\t\t\t * 1. 如果其他线程获取了写锁，则失败\n    \t\t\t\t * 2. 如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。\n    \t\t\t\t * 3. 读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1<<16”。\n    \t\t\t\t */\n            Thread current = Thread.currentThread();\n            int c = getState();\n            if (exclusiveCount(c) != 0 &&\n                getExclusiveOwnerThread() != current)\n           \t    // 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态\n                return -1;\n            int r = sharedCount(c);\n            if (!readerShouldBlock() &&\n                r < MAX_COUNT &&\n                compareAndSetState(c, c + SHARED_UNIT)) {\n                if (r == 0) {\n                    firstReader = current;\n                    firstReaderHoldCount = 1;\n                } else if (firstReader == current) {\n                    firstReaderHoldCount++;\n                } else {\n                    HoldCounter rh = cachedHoldCounter;\n                    if (rh == null ||\n                        rh.tid != LockSupport.getThreadId(current))\n                        cachedHoldCounter = rh = readHolds.get();\n                    else if (rh.count == 0)\n                        readHolds.set(rh);\n                    rh.count++;\n                }\n                return 1;\n            }\n            return fullTryAcquireShared(current);\n        }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"从源码上看:"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于写锁的加锁，需要确保没有别的线程持有写锁、或者持有读锁。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于读锁的加锁，需要确保没有别的线程持有读锁即可。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面来讲讲，在真实业务中的线程插队逻辑。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"插队逻辑"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假设线程 2 和线程 4 正在同时读取，线程 3 想要写入，但是由于线程 2 和线程 4 已经持有读锁了，所以线程 3 就进入等待队列进行等待。此时，线程 5 突然跑过来想要插队获取读锁："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/%E8%AF%BB%E9%94%81%E6%8F%92%E9%98%9F.png","alt":"读锁插队"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"面对这种情况有两种应对策略："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"第一种策略：允许插队"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于现在有线程在读，而线程 5 又不会特别增加它们读的负担，因为线程们可以共用这把锁，所以第一种策略就是让线程 5 直接加入到线程 2 和线程 4 一起去读取。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种策略看上去增加了效率，但是有一个严重的问题，那就是如果想要读取的线程不停地增加，比如线程 6，那么线程 6 也可以插队，这就会导致读锁长时间内不会被释放，导致线程 3 长时间内拿不到写锁，也就是那个需要拿到写锁的线程会陷入“饥饿”状态，它将在长时间内得不到执行。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/%E8%AF%BB%E9%94%81%E6%8F%92%E9%98%9F%E6%88%90%E5%8A%9F.png","alt":"读锁插队成功"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"第二种策略：不允许插队"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这种策略认为由于线程 3 已经提前等待了，所以虽然线程 5 如果直接插队成功，可以提高效率，但是我们依然让线程 5 去排队等待："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/%E8%AF%BB%E9%94%81%E4%B8%8D%E5%85%81%E8%AE%B8%E6%8F%92%E9%98%9F.png","alt":"读锁不允许插队"},"children":[]},{"type":"text","value":"按照这种策略线程 5 会被放入等待队列中，并且排在线程 3 的后面，让线程 3 优先于线程 5 执行，这样可以避免“饥饿”状态。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这对于程序的健壮性是很有好处的，直到线程 3 运行完毕，线程 5 才有机会运行，这样谁都不会等待太久的时间。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://www.shiyitopo.tech/uPic/%E8%AF%BB%E9%94%81%E4%B8%8D%E5%85%81%E8%AE%B8%E6%8F%92%E9%98%9F-%E7%BB%93%E6%9E%9C2.png","alt":"读锁不允许插队-结果2"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以我们可以看出，即便是非公平锁，只要等待队列的头结点是尝试获取写锁的线程，那么读锁依然是不能插队的，目的是避免“饥饿”。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"锁的升降级"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"锁降级指的是写锁降级成为读锁。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"锁降级是指把持住当前拥有的写锁的同时，再获取到读锁，随后释放写锁的过程。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"来看看官方文档是怎么写的:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":" class CachedData {\n   Object data;\n   boolean cacheValid;\n   final ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();\n   void processCachedData() {\n     rwl.readLock().lock();\n     if (!cacheValid) {\n       // Must release read lock before acquiring write lock\n       rwl.readLock().unlock();\n       rwl.writeLock().lock();\n       try {\n         // Recheck state because another thread might have\n         // acquired write lock and changed state before we did.\n         if (!cacheValid) {\n           data = ...\n           cacheValid = true;\n         }\n         // Downgrade by acquiring read lock before releasing write lock\n         rwl.readLock().lock();\n       } finally {\n         rwl.writeLock().unlock(); // Unlock write, still hold read\n       }\n     }\n     try {\n       use(data);\n     } finally {\n       rwl.readLock().unlock();\n     }\n   }\n }\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"降级的过程"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"代码中申明了一个cacheValid的变量用于检查缓存是否有效。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"获取读锁，如果cache不可用，则释放读锁去获取写锁。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"再次检查cache，修改data，并且将cache设置成true，然后在"},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"释放写锁前获取读锁"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"此时，cache中数据可用，处理cache中数据，最后释放读锁。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"为什么需要锁的降级"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"其目的是保证数据可见性:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果当前的线程"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"在修改完cache中的数据后，还需要对数据进行一些处理，但是此时没有获取读锁而是直接释放了写锁，那么假设此时另一个线程"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"T"}]},{"type":"text","value":"获取了写锁并修改了数据，那么"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"线程无法感知到数据已被修改,则数据出现错误。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果遵循锁降级的步骤，线程"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"在释放写锁之前获取读锁，那么线程"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"T"}]},{"type":"text","value":"在获取写锁时将被阻塞，直到线程"},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"C"}]},{"type":"text","value":"完成数据处理过程，释放读锁。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"为什么不支持锁的升级？"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果我们运行下面这段代码，在不释放读锁的情况下直接尝试获取写锁，也就是锁的升级，会让线程直接阻塞，程序是无法运行的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"public static void upgrade() {\n    rwl.readLock().lock();\n    System.out.println(\"获取到了读锁\");\n    rwl.writeLock().lock();\n    System.out.println(\"成功升级\");\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们知道读写锁的特点是如果线程都申请读锁，是可以多个线程同时持有的，可是如果是写锁，只能有一个线程持有，并且不可能存在读锁和写锁同时持有的情况。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"正是因为不可能有读锁和写锁同时持有的情况，所以升级写锁的过程中，需要等到所有的读锁都释放，此时才能进行升级。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"总结"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"对于 ReentrantReadWriteLock 而言。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"插队策略\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"公平策略下，只要队列里有线程已经在排队，就不允许插队。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"非公平策略下：\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"如果允许读锁插队，那么由于读锁可以同时被多个线程持有，所以可能造成源源不断的后面的线程一直插队成功，导致读锁一直不能完全释放，从而导致写锁一直等待，为了防止“饥饿”，在等待队列的头结点是尝试获取写锁的线程的时候，不允许读锁插队。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"写锁可以随时插队，因为写锁并不容易插队成功，写锁只有在当前没有任何其他线程持有读锁和写锁的时候，才能插队成功，同时写锁一旦插队失败就会进入等待队列，所以很难造成“饥饿”的情况，允许写锁插队是为了提高效率。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"升降级策略：只能从写锁降级为读锁，不能从读锁升级为写锁。"}]},{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"共享锁独占锁","slug":"共享锁独占锁"},{"depth":2,"value":"读写锁的规则","slug":"读写锁的规则"},{"depth":2,"value":"使用方式","slug":"使用方式"},{"depth":2,"value":"加锁原理分析","slug":"加锁原理分析"},{"depth":2,"value":"插队逻辑","slug":"插队逻辑"},{"depth":3,"value":"第一种策略：允许插队","slug":"第一种策略允许插队"},{"depth":3,"value":"第二种策略：不允许插队","slug":"第二种策略不允许插队"},{"depth":2,"value":"锁的升降级","slug":"锁的升降级"},{"depth":3,"value":"降级的过程","slug":"降级的过程"},{"depth":3,"value":"为什么需要锁的降级","slug":"为什么需要锁的降级"},{"depth":3,"value":"为什么不支持锁的升级？","slug":"为什么不支持锁的升级"},{"depth":3,"value":"总结","slug":"总结-3"}]}},
    "staticQueryHashes": ["928362550"]}