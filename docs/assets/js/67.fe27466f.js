(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{371:function(e,n,t){"use strict";t.r(n);var a=t(6),s=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("此安装方法通用于所有*unix系统、Windows系统。")]),e._v(" "),n("p",[e._v("在OMV5（openmediavault）中安装WebDAV服务器端的方法不同于旧版本。在OMV5之前的版本，可以直接在管理界面的“插件”中安装并启用WebDAV服务，但是新版本去除了此插件，需要手工进行安装。目前相关资料较为匮乏，网上的WebDAV镜像质量也参差不齐。")]),e._v(" "),n("p",[e._v("通过对比目前较为受欢迎的WebDAV服务器端软件，https://github.com/hacdias/webdav 较为稳定（唯一遗憾的是，此仓库作者提供的Docker镜像竟然在Docker Hub中排名非常靠后，以至于完全搜不到）。")]),e._v(" "),n("p",[e._v("此开源项目是使用GoLang开发的，因此兼容性非常强悍，仅作者预编译针对不同操作系统和CPU架构的二进制文件就有34种，可以说涵盖了几乎所有运行环境。")]),e._v(" "),n("p",[e._v("作者默认使用此软件的都是专业选手，因此没有手把手的文档可以参考。这对于非程序员甚至非GoLang程序员不太友好。")]),e._v(" "),n("p",[e._v("作者给出的配置参考已经非常详细，但需要注意的是，你需要全部复制并做出对应修改，程序中并没有做默认值合并。注释中的will be merged仅仅针对当前配置文件下文的用户默认值。")]),e._v(" "),n("p",[e._v("二进制安装"),n("br"),e._v("\n访问"),n("a",{attrs:{href:"https://github.com/hacdias/webdav/releases/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/hacdias/webdav/releases/"),n("OutboundLink")],1),e._v("，对应下载作者预编译的二进制版本。")]),e._v(" "),n("p",[e._v("参考Systemd Example，注册为*unix服务，实现开机自动启动。此步骤有疑问的话，搜索对应操作系统+systemd关键词。")]),e._v(" "),n("p",[e._v("需要特别注意的是：")]),e._v(" "),n("p",[e._v("二进制文件所在的执行目录需要和Systemd配置文件中的ExecStart目录保持一致。\n作者说明了支持JSON, YAML and TOML配置文件格式，因此你需要加上相应后缀，否则配置文件不生效。例如JSON添加.json、YAML添加.yml。\nOMV5(Debian)中二进制文件安装例子：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('wget https://github.com/hacdias/webdav/releases/download/v4.1.0/linux-amd64-webdav.tar.gz\ntar -zxvf linux-amd64-webdav.tar.gz\nvim /etc/systemd/system/webdav.service\nwebdav.service（注意确保路径/opt/webdav.config.yml下的配置文件已存在）:\n\n[Unit]\nDescription=WebDAV server\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/bin/webdav --config /opt/webdav.config.yml\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n设置开机启动并启动服务：\n\nsystemctl enable webdav\nsystemctl start webdav\nDocker安装\n使用SSH连接后，执行命令：\n\ndocker run --restart always --name=webdav -itd \\\n-v /export:/data \\\n-v /opt/webdav.config.yml:/opt/webdav.config.yml \\\n-p 8081:80 \\\nhacdias/webdav:v4.1.0 --config /opt/webdav.config.yml\n\n命令内容一目了然了，相应配置文件参考\n\n# Server related settings\naddress: 0.0.0.0\nport: 80\nauth: true\ntls: false\nprefix: /\n\n# Default user settings (will be merged)\nscope: .\nmodify: true\nrules: []\n\ncors:\n  enabled: false\n  credentials: false\n\nusers:\n  - username: admin\n    password: "{bcrypt}$2a$12$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"\n    scope: /data\n')])])]),n("p",[e._v("scope即为根目录本地映射地址。password可以用明文，也可以加密，Bcrypt密码在线生成地址： https://bcrypt-generator.com/。")]),e._v(" "),n("p",[e._v("配置文件同样需要注意后缀问题。")]),e._v(" "),n("p",[e._v("关于内网穿透\n为NAS搭建内网穿透有很多种方案。")]),e._v(" "),n("p",[e._v("针对SSL证书部署，可以采用：")]),e._v(" "),n("p",[e._v("直接在配置文件中设置tls为true并配置相应的SSL证书地址。\n配置文件中保持tls为false，在FRP或其它内网穿透工具中配置HTTPS并加载相应证书。\n配置文件中保持tls为false，在FRP或其它内网穿透工具中仅穿透TCP协议（可配置加密和压缩），在公网服务器（FRP或其它内网穿透工具所在的服务器）中配置Nginx反向代理搞定证书问题。\n强烈推荐第三个方案，简单也安全。")]),e._v(" "),n("p",[e._v("关于Nginx反向代理的关键配置信息，此webdav服务端作者hacdias已经在README.md中注明。")]),e._v(" "),n("p",[e._v("请大家不要咨询在OMV中如何安装Docker或如何在Portainer中安装webdav之类的问题。此类问题太过于基础（例如后者，可以先进SSH直接执行命令，然后回到Portainer中看Container配置发生了什么变化）。")]),e._v(" "),n("p",[e._v("推荐大家使用Mountain Duck这样的工具挂载带有SSL证书的WebDAV地址，可以实现和OneDrive或Dropbox一样的智能同步功能（始终在此设备上保留、释放空间）。")]),e._v(" "),n("p",[e._v("from: https://www.joyk.com/dig/detail/1628887225532246")])])}),[],!1,null,null,null);n.default=s.exports}}]);