(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{336:function(t,e,s){"use strict";s.r(e);var v=s(6),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mysql锁思维导图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql锁思维导图"}},[t._v("#")]),t._v(" MySQL锁思维导图")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://image.ztianzeng.com/uPic/20220901143020.png",alt:""}}),t._v("​")]),t._v(" "),e("h1",{attrs:{id:"间隙锁死锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#间隙锁死锁"}},[t._v("#")]),t._v(" 间隙锁死锁")]),t._v(" "),e("p",[t._v("间隙锁的引入可能会导致死锁。前面提到了 "),e("strong",[t._v("间隙锁只与往间隙里写入记录这个操作冲突")]),t._v(" 。同一个间隙多次加锁是不会冲突的，于是问题来了。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("SessionA")]),t._v(" "),e("th",[t._v("SessionB")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("begin;")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td",[t._v("select * from t where id = 9 for update;")]),t._v(" "),e("td")]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("begin;")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("select * from t where id = 9 for update;")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("insert into values(9,9,9);(blocked)")])]),t._v(" "),e("tr",[e("td",[t._v("insert into values(9,9,9);(ERROR Deadlock found)")]),t._v(" "),e("td")])])]),t._v(" "),e("p",[t._v("分析如下：")]),t._v(" "),e("ul",[e("li",[t._v("1）session A 执行 select … for update 语句，由于 id=9 这一行并不存在，因此会加上间隙锁 (5,10);")]),t._v(" "),e("li",[t._v("2）session B 执行 select … for update 语句，同样会加上间隙锁 (5,10)，间隙锁之间不会冲突，因此这个语句可以执行成功；")]),t._v(" "),e("li",[t._v("3）session B 试图插入一行 (9,9,9)，被 session A 的间隙锁挡住了，只好进入等待；")]),t._v(" "),e("li",[t._v("4）session A 试图插入一行 (9,9,9)，被 session B 的间隙锁挡住了。")])]),t._v(" "),e("p",[t._v("至此，两个 session 进入互相等待状态，形成死锁。当然，InnoDB 的死锁检测马上就发现了这对死锁关系，让 session A 的 insert 语句报错返回了。")]),t._v(" "),e("h1",{attrs:{id:"next-key-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#next-key-lock"}},[t._v("#")]),t._v(" "),e("strong",[t._v("Next-Key Lock")])]),t._v(" "),e("p",[t._v("能够解决幻读问题的关键在于MySQL的数据存储结构是B+树，并且Next-Key Lock只有对于建立索引的列才能够起作用，在没有建立索引的列为了解决幻读使用的是表锁。")]),t._v(" "),e("p",[t._v("在对一列建立了索引后，那么就会在这个非聚集索引结构中以B+树的，将当前列的值作为Key对数据进行组织。")]),t._v(" "),e("p",[t._v("那么数据也就会按当前列的值有序存储。所以通过Next-Key Lock锁住符合当前条件行的前后区间能够，使用间隙锁组织新数据的插入能够防止出现幻读的情况。")]),t._v(" "),e("p",[e("strong",[t._v("Next-key lock（只在RR的当前读有效）出现的条件")])]),t._v(" "),e("p",[t._v("行锁 + gap锁。")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("没有设置索引或者没有命中索引，表锁")])]),t._v(" "),e("li",[e("p",[t._v("命中非唯一索引，next-key lock")])]),t._v(" "),e("li",[e("p",[t._v("命中唯一索引，x锁")])])])])}),[],!1,null,null,null);e.default=_.exports}}]);