{
    "componentChunkName": "component---src-templates-topic-page-template-tsx",
    "path": "/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式",
    "result": {"pageContext":{"id":"/topic/分布式解决方案/数据调度/分布式事务/Seata框架/Seata解决方案/TCC模式","htmlAst":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"TCC模式"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 与 Seata AT 事务⼀样都是两阶段事务，它与 AT 事务的主要区别为："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 对业务代码侵⼊严重"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"每个阶段的数据操作都要⾃⼰进⾏编码来实现，事务框架⽆法⾃动处理。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 性能更⾼"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不必对数据加全局锁，允许多个事务同时操作数据。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/ecaeda572495e4ea5e308fb938a38fd5.png","alt":"ecaeda572495e4ea5e308fb938a38fd5"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Seata TCC整体是"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"两阶段提交"}]},{"type":"text","value":"的模型。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼀个分布式的全局事务，全局事务是由若⼲分⽀事务组成的，分⽀事务要满⾜"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"两阶段提交"}]},{"type":"text","value":"的模型要求，即需要每个分⽀事务都具备⾃⼰的："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"⼀阶段 prepare ⾏为"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"⼆阶段 commit 或 rollback ⾏为"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20220427100423.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 模式，不依赖于底层数据资源的事务⽀持："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼀阶段 prepare ⾏为：调⽤ ⾃定义 的 prepare 逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼆阶段 commit ⾏为：调⽤ ⾃定义 的 commit 逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"⼆阶段 rollback ⾏为：调⽤ ⾃定义 的 rollback 逻辑。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 模式，是指⽀持把"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"⾃定义"}]},{"type":"text","value":"的分⽀事务纳⼊到全局事务的管理中。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"第⼀阶段 Try"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"以账户服务为例，当下订单时要扣减⽤户账户⾦额："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假如⽤户购买 100 元商品，要扣减 100 元。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20220427100935.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TCC 事务⾸先对这100元的扣减⾦额进⾏预留，或者说是先冻结这100元"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20220427101002.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"第⼆阶段 Confirm"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果第⼀阶段能够顺利完成，那么说明“扣减⾦额”业务(分⽀事务)最终肯定 是可以成功的。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当全局事务提交时， TC会控制当前分⽀事务进⾏提交，如 果提交失败，TC 会反复尝试，直到提交成功为⽌。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当全局事务提交时，就可以使⽤冻结的⾦额来最终实现业务数据操作："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20220427101024.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"第⼆阶段 Cancel"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果全局事务回滚，就把冻结的⾦额进⾏解冻，恢复到以前的状态，TC 会 控制当前分⽀事务回滚，如果回滚失败，TC 会反复尝试，直到回滚完成为⽌。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"assets/image-20220427101106-zhsw0mu.png","alt":"image.png"},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"多个事务并发的情况"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"多个TCC全局事务允许并发，它们执⾏扣减⾦额时，只需要冻结各⾃的⾦额即可："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://image.ztianzeng.com/uPic/20220427101229.png","alt":""},"children":[]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"SpringCloud集成TCC"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"定义TCC接口"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"由于我们使用的是 SpringCloud + Feign，Feign的调用基于http，因此此处我们使用"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@LocalTCC"}]},{"type":"text","value":"便可。值得注意的是，"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@LocalTCC"}]},{"type":"text","value":"一定需要注解在接口上，此接口可以是寻常的业务接口，只要实现了TCC的两阶段提交对应方法便可，TCC相关注解如下："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@LocalTCC"}]},{"type":"text","value":" 适用于SpringCloud+Feign模式下的TCC"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@TwoPhaseBusinessAction"}]},{"type":"text","value":" 注解try方法，其中name为当前tcc方法的bean名称，写方法名便可（全局唯一），commitMethod指向提交方法，rollbackMethod指向事务回滚方法。指定好三个方法之后，seata会根据全局事务的成功或失败，去帮我们自动调用提交方法或者回滚方法。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@BusinessActionContextParameter"}]},{"type":"text","value":" 注解可以将参数传递到二阶段（commitMethod/rollbackMethod）的方法。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"BusinessActionContext"}]},{"type":"text","value":" 便是指TCC事务上下文"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"/**\n * 这里定义tcc的接口\n * 一定要定义在接口上\n * 我们使用springCloud的远程调用\n * 那么这里使用LocalTCC便可\n *\n * @author tanzj\n */\n@LocalTCC\npublic interface TccService {\n \n    /**\n     * 定义两阶段提交\n     * name = 该tcc的bean名称,全局唯一\n     * commitMethod = commit 为二阶段确认方法\n     * rollbackMethod = rollback 为二阶段取消方法\n     * BusinessActionContextParameter注解 传递参数到二阶段中\n     *\n     * @param params  -入参\n     * @return String\n     */\n    @TwoPhaseBusinessAction(name = \"insert\", commitMethod = \"commitTcc\", rollbackMethod = \"cancel\")\n    String insert(\n            @BusinessActionContextParameter(paramName = \"params\") Map<String, String> params\n    );\n \n    /**\n     * 确认方法、可以另命名，但要保证与commitMethod一致\n     * context可以传递try方法的参数\n     *\n     * @param context 上下文\n     * @return boolean\n     */\n    boolean commitTcc(BusinessActionContext context);\n \n    /**\n     * 二阶段取消方法\n     *\n     * @param context 上下文\n     * @return boolean\n     */\n    boolean cancel(BusinessActionContext context);\n}\n"}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"TCC接口的业务实现"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为了保证代码的简洁，此处将路由层与业务层结合讲解，实际项目则不然。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"在try方法中使用"},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Transational"}]},{"type":"text","value":"可以直接通过spring事务回滚关系型数据库中的操作，而非关系型数据库等中间件的回滚操作可以交给rollbackMethod方法处理。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"使用context.getActionContext(\"params\")便可以得到一阶段try中定义的参数，在二阶段对此参数进行业务回滚操作。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"**注意1：**此处亦不可以捕获异常（同理切面处理异常），否则TCC将识别该操作为成功，二阶段直接执行commitMethod。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"注意2："},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"TCC模式要"}]},{"type":"text","value":"开发者自行"}]},{"type":"text","value":"保证幂等和事务防悬挂"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"text","value":"@Slf4j\n@RestController\npublic class TccServiceImpl implements  TccService {\n \n    @Autowired\n    TccDAO tccDAO;\n \n    /**\n     * tcc服务t（try）方法\n     * 根据实际业务场景选择实际业务执行逻辑或者资源预留逻辑\n     *\n     * @param params - name\n     * @return String\n     */\n    @Override\n    @PostMapping(\"/tcc-insert\")\n    @Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRED)\n    public String insert(@RequestBody Map<String, String> params) {\n        log.info(\"xid = \" + RootContext.getXID());\n        //todo 实际的操作，或操作MQ、redis等\n        tccDAO.insert(params);\n        //放开以下注解抛出异常\n        //throw new RuntimeException(\"服务tcc测试回滚\");\n        return \"success\";\n    }\n \n    /**\n     * tcc服务 confirm方法\n     * 若一阶段采用资源预留，在二阶段确认时要提交预留的资源\n     *\n     * @param context 上下文\n     * @return boolean\n     */\n    @Override\n    public boolean commitTcc(BusinessActionContext context) {\n        log.info(\"xid = \" + context.getXid() + \"提交成功\");\n        //todo 若一阶段资源预留，这里则要提交资源\n        return true;\n    }\n \n    /**\n     * tcc 服务 cancel方法\n     *\n     * @param context 上下文\n     * @return boolean\n     */\n    @Override\n    public boolean cancel(BusinessActionContext context) {\n        //todo 这里写中间件、非关系型数据库的回滚操作\n        System.out.println(\"please manually rollback this data:\" + context.getActionContext(\"params\"));\n        return true;\n    }\n}\n"}]}]}],"data":{"quirksMode":false}},"headings":[{"depth":1,"value":"TCC模式","slug":"tcc模式"},{"depth":1,"value":"第⼀阶段 Try","slug":"第阶段-try"},{"depth":1,"value":"第⼆阶段 Confirm","slug":"第阶段-confirm"},{"depth":1,"value":"第⼆阶段 Cancel","slug":"第阶段-cancel"},{"depth":1,"value":"多个事务并发的情况","slug":"多个事务并发的情况"},{"depth":1,"value":"SpringCloud集成TCC","slug":"springcloud集成tcc"},{"depth":3,"value":"定义TCC接口","slug":"定义tcc接口"},{"depth":3,"value":"TCC接口的业务实现","slug":"tcc接口的业务实现"}]}},
    "staticQueryHashes": ["928362550"]}